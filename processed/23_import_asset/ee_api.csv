name	description	function	returns	argument	type	details
ee.Algorithms.CannyEdgeDetector	Applies the Canny edge detection algorithm to an image. The output is an image whose bands have the same names as the input bands, and in which non-zero values indicate edges, and the magnitude of the value is the gradient magnitude.	ee.Algorithms.CannyEdgeDetector(image, threshold, sigma)	Image	image|threshold|sigma	Image|Float|Float, default: 1	
ee.Algorithms.Collection	Returns a Collection containing the specified features.	ee.Algorithms.Collection(features)	FeatureCollection	features	List	
ee.Algorithms.CrossCorrelation	Gives information on the quality of image registration between two (theoretically) co-registered images. The input is two images with the same number of bands. This function outputs an image composed of four bands of information. The first three are distances: the deltaX, deltaY, and the Euclidean distance for each pixel in imageA to the pixel which has the highest corresponding correlation coefficient in imageB. The fourth band is the value of the correlation coefficient for that pixel [-1 : +1].	ee.Algorithms.CrossCorrelation(imageA, imageB, maxGap, windowSize, maxMaskedFrac)	Image	imageA|imageB|maxGap|windowSize|maxMaskedFrac	Image|Image|Integer|Integer|Float, default: 0	
ee.Algorithms.Date	Creates a Date.	ee.Algorithms.Date(value, timeZone)	Date	value|timeZone	Object|String, default: null	
ee.Algorithms.Describe	Describes an object using a simple JSON-compatible structure.	ee.Algorithms.Describe(input)	Object	input	Object	
ee.Algorithms.Dictionary	Constructs a dictionary.	ee.Algorithms.Dictionary(input)	Dictionary	input	Object, default: null	
ee.Algorithms.FMask.fillMinima	Fills local minima.  Only works on INT types.	ee.Algorithms.FMask.fillMinima(image, borderValue, neighborhood)	Image	image|borderValue|neighborhood	Image|Long, default: null|Integer, default: 50	
ee.Algorithms.FMask.matchClouds	Runs the FMask cloud and shadow matching.  Outputs a single band ('csm'), containing the computed cloud and shadow masks.	ee.Algorithms.FMask.matchClouds(input, cloud, shadow, btemp, sceneLow, sceneHigh, neighborhood)	Image	input|cloud|shadow|btemp|sceneLow|sceneHigh|neighborhood	Image|Image|Image|Image|Float|Float|Integer, default: 50	
ee.Algorithms.Feature	Returns a Feature composed of the given geometry and metadata.	ee.Algorithms.Feature(geometry, metadata, geometryKey)	Feature	geometry|metadata|geometryKey	Geometry, default: null|Dictionary, default: {}|String, default: null	
ee.Algorithms.GeometryConstructors.BBox	Constructs a rectangle whose edges are lines of latitude and longitude.	ee.Algorithms.GeometryConstructors.BBox(west, south, east, north)	Geometry	west|south|east|north	Float|Float|Float|Float	
ee.Algorithms.GeometryConstructors.LineString	Constructs a LineString from the given coordinates.	ee.Algorithms.GeometryConstructors.LineString(coordinates, crs, geodesic)	Geometry	coordinates|crs|geodesic	List|Projection, default: null|Boolean, default: null	
ee.Algorithms.GeometryConstructors.LinearRing	Constructs a LinearRing from the given coordinates, automatically adding the first point at the end if the ring is not explicitly closed.	ee.Algorithms.GeometryConstructors.LinearRing(coordinates, crs, geodesic)	Geometry	coordinates|crs|geodesic	List|Projection, default: null|Boolean, default: null	
ee.Algorithms.GeometryConstructors.MultiGeometry	Constructs a MultiGeometry from the given list of geometry elements.	ee.Algorithms.GeometryConstructors.MultiGeometry(geometries, crs, geodesic, maxError)	Geometry	geometries|crs|geodesic|maxError	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null	
ee.Algorithms.GeometryConstructors.MultiLineString	Constructs a MultiLineString from the given coordinates.	ee.Algorithms.GeometryConstructors.MultiLineString(coordinates, crs, geodesic, maxError)	Geometry	coordinates|crs|geodesic|maxError	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null	
ee.Algorithms.GeometryConstructors.MultiPoint	Constructs a MultiPoint from the given coordinates.	ee.Algorithms.GeometryConstructors.MultiPoint(coordinates, crs)	Geometry	coordinates|crs	List|Projection, default: null	
ee.Algorithms.GeometryConstructors.MultiPolygon	Constructs a MultiPolygon from the given coordinates.	ee.Algorithms.GeometryConstructors.MultiPolygon(coordinates, crs, geodesic, maxError, evenOdd)	Geometry	coordinates|crs|geodesic|maxError|evenOdd	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null|Boolean, default: true	
ee.Algorithms.GeometryConstructors.Point	Constructs a new Point from the given x,y coordinates.	ee.Algorithms.GeometryConstructors.Point(coordinates, crs)	Geometry	coordinates|crs	List|Projection, default: null	
ee.Algorithms.GeometryConstructors.Polygon	Constructs a Polygon from the given coordinates.	ee.Algorithms.GeometryConstructors.Polygon(coordinates, crs, geodesic, maxError, evenOdd)	Geometry	coordinates|crs|geodesic|maxError|evenOdd	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null|Boolean, default: true	
ee.Algorithms.GeometryConstructors.Rectangle	Constructs a rectangular polygon from the given corner points.	ee.Algorithms.GeometryConstructors.Rectangle(coordinates, crs, geodesic, evenOdd)	Geometry	coordinates|crs|geodesic|evenOdd	List|Projection, default: null|Boolean, default: null|Boolean, default: true	
ee.Algorithms.HillShadow	Creates a shadow band, with output 1 where pixels are illumunated and 0 where they are shadowed. Takes as input an elevation band, azimuth and zenith of the light source in degrees, a neighborhood size, and whether or not to apply hysteresis when a shadow appears. Currently, this algorithm only works for Mercator projections, in which light rays are parallel.	ee.Algorithms.HillShadow(image, azimuth, zenith, neighborhoodSize, hysteresis)	Image	image|azimuth|zenith|neighborhoodSize|hysteresis	Image|Float|Float|Integer, default: 0|Boolean, default: false	
ee.Algorithms.HoughTransform	Applies the Hough transform to an image. For every input band, outputs a band where lines are detected by thresholding the Hough transform with a value of lineThreshold. The output band is named [input]_lines, where [input] is the name of the original band. The defaults provided for the parameters are intended as a starting point for use with UINT8 images.	ee.Algorithms.HoughTransform(image, gridSize, inputThreshold, lineThreshold, smooth)	Image	image|gridSize|inputThreshold|lineThreshold|smooth	Image|Integer, default: 256|Float, default: 64|Float, default: 72|Boolean, default: true	
ee.Algorithms.If	Selects one of its inputs based on a condition, similar to an if-then-else construct.	ee.Algorithms.If(condition, trueCase, falseCase)	Object	condition|trueCase|falseCase	Object, default: null|Object, default: null|Object, default: null	
ee.Algorithms.Image.Segmentation.GMeans	Performs G-Means clustering on the input image. Iteratively applies k-means followed by a normality test to automatically determine the number of clusters to use. The output contains a 'clusters' band containing the integer ID of the cluster that each pixel belongs to. The algorithm can work either on a fixed grid of non-overlapping cells (gridSize, which can be smaller than a tile) or on tiles with overlap (neighborhoodSize). The default is to use tiles with no overlap. Clusters in one cell or tile are unrelated to clusters in another. Any cluster that spans a cell or tile boundary may receive two different labels in the two halves. Any input pixels with partial masks are fully masked in the output. This algorithm is only expected to perform well for images with a narrow dynamic range (i.e. bytes or shorts).	ee.Algorithms.Image.Segmentation.GMeans(image, numIterations, pValue, neighborhoodSize, gridSize, uniqueLabels)	Image	image|numIterations|pValue|neighborhoodSize|gridSize|uniqueLabels	Image|Integer, default: 10|Float, default: 50|Integer, default: 0|Integer, default: null|Boolean, default: true	
ee.Algorithms.Image.Segmentation.KMeans	Performs K-Means clustering on the input image. Outputs a 1-band image  containing the ID of the cluster that each pixel belongs to.  The algorithm can work either on a fixed grid of non-overlapping cells (gridSize, which can be smaller than a tile) or on tiles with overlap (neighborhoodSize). The default is to use tiles with no overlap.  Clusters in one cell or tile are unrelated to clusters in another.  Any cluster that spans a cell or tile boundary may receive two different labels in the two halves.  Any input pixels with partial masks are fully masked in the output.	ee.Algorithms.Image.Segmentation.KMeans(image, numClusters, numIterations, neighborhoodSize, gridSize, forceConvergence, uniqueLabels)	Image	image|numClusters|numIterations|neighborhoodSize|gridSize|forceConvergence|uniqueLabels	Image|Integer, default: 8|Integer, default: 20|Integer, default: 0|Integer, default: null|Boolean, default: false|Boolean, default: true	
ee.Algorithms.Image.Segmentation.SNIC	Superpixel clustering based on SNIC (Simple Non-Iterative Clustering). Outputs a band of cluster IDs and the per-cluster averages for each of the input bands. If the 'seeds' image isn't provided as input, the output will include a 'seeds' band containing the generated seed locations. See: Achanta, Radhakrishna and Susstrunk, Sabine, 'Superpixels and Polygons using Simple Non-Iterative Clustering', CVPR, 2017.	ee.Algorithms.Image.Segmentation.SNIC(image, size, compactness, connectivity, neighborhoodSize, seeds)	Image	image|size|compactness|connectivity|neighborhoodSize|seeds	Image|Integer, default: 5|Float, default: 1|Integer, default: 8|Integer, default: null|Image, default: null	
ee.Algorithms.Image.Segmentation.seedGrid	Selects seed pixels for clustering.	ee.Algorithms.Image.Segmentation.seedGrid(size, gridType)	Image	size|gridType	"Integer, default: 5|String, default: ""square"""	
ee.Algorithms.IsEqual	Returns whether two objects are equal.	ee.Algorithms.IsEqual(left, right)	Boolean	left|right	Object, default: null|Object, default: null	
ee.Algorithms.Landsat.TOA	Calibrates Landsat DN to TOA reflectance and brightness temperature for Landsat and similar data. For recently-acquired scenes calibration coefficients are extracted from the image metadata; for older scenes the coefficients are derived from:	ee.Algorithms.Landsat.TOA(input)	Image	input	Image	
ee.Algorithms.Landsat.calibratedRadiance	Calibrates each band of an image by applying linear transformation with slope RADIANCE_MULT_BAND_N and y-intercept RADIANCE_ADD_BAND_N; these values are extracted from the image metadata.	ee.Algorithms.Landsat.calibratedRadiance(image)	Image	image	Image	
ee.Algorithms.Landsat.pathRowLimit	Limits requests to an ImageCollection of Landsat scenes to return a controllable number of the best scenes for each request. This is intended for use with statistical algorithms like median composites that need a certain amount of good data to perform well, but that do not benefit substantially from additional data beyond that while becoming needlessly expensive.  The default arguments select approximately one year's worth of good data.	ee.Algorithms.Landsat.pathRowLimit(collection, maxScenesPerPathRow, maxScenesTotal)	ImageCollection	collection|maxScenesPerPathRow|maxScenesTotal	ImageCollection|Integer, default: 25|Integer, default: 100	
ee.Algorithms.Landsat.simpleCloudScore	Computes a simple cloud-likelihood score in the range [0,100] using a combination of brightness, temperature, and NDSI.  This is not a robust cloud detector, and is intended mainly to compare multiple looks at the same point for relative cloud likelihood.	ee.Algorithms.Landsat.simpleCloudScore(image)	Image	image	Image	
ee.Algorithms.Landsat.simpleComposite	Computes a Landsat TOA composite from a collection of raw Landsat scenes.  It applies standard TOA calibration and then assigns a cloud score to each pixel using the SimpleLandsatCloudScore algorithm. It selects the lowest possible range of cloud scores at each point and then computes per-band percentile values from the accepted pixels.  This algorithm also uses the LandsatPathRowLimit algorithm to select only the least-cloudy scenes in regions where more than maxDepth input scenes are available.	ee.Algorithms.Landsat.simpleComposite(collection, percentile, cloudScoreRange, maxDepth, asFloat)	Image	collection|percentile|cloudScoreRange|maxDepth|asFloat	ImageCollection|Integer, default: 50|Integer, default: 10|Integer, default: 40|Boolean, default: false	
ee.Algorithms.ObjectType	Returns a string representing the type of the given object.	ee.Algorithms.ObjectType(value)	String	value	Object, default: null	
ee.Algorithms.ProjectionTransform	Transforms the geometry of a feature to a specific projection.	ee.Algorithms.ProjectionTransform(feature, proj, maxError)	Feature	feature|proj|maxError	Element|Projection, optional|ErrorMargin, default: null	
ee.Algorithms.Sentinel2.CDI	"Computes the Cloud Displacement Index (CDI) from a Sentinel-2 Level 1C image. CDI is a measure of the optical separation in elevated objects due to sensor parallax. Returns a floating point band named ""cdi""."	ee.Algorithms.Sentinel2.CDI(source)	Image	source	Image	
ee.Algorithms.String	Converts the input to a string.	ee.Algorithms.String(input)	String	input	Object	
ee.Algorithms.TemporalSegmentation.Ccdc	Implements the Continuous Change Detection and Classification temporal breakpoint algorithm.  This algorithm finds temporal breakpoints in an image collection by iteratively fitting harmonic functions to the data.  Fit coefficients are produced for all input bands, but the bands used for breakpoint detection can be specified with the 'breakpointBands' argument.	ee.Algorithms.TemporalSegmentation.Ccdc(collection, breakpointBands, tmaskBands, minObservations, chiSquareProbability, minNumOfYearsScaler, dateFormat, lambda, maxIterations)	Image	collection|breakpointBands|tmaskBands|minObservations|chiSquareProbability|minNumOfYearsScaler|dateFormat|lambda|maxIterations	ImageCollection|List, default: null|List, default: null|Integer, default: 6|Float, default: 0.99|Float, default: 1.33|Integer, default: 0|Float, default: 20|Integer, default: 25000	
ee.Algorithms.TemporalSegmentation.Ewmacd	Exponentially Weighted Moving Average Change Detection. This algorithm computes a harmonic model for the 'training' portion of the input data and subtracts that from the original results.  The residuals are then subjected to Shewhart X-bar charts and an exponentially weighted moving average.  Disturbed pixels are indicated when the charts signal a deviation from the given control limits.	ee.Algorithms.TemporalSegmentation.Ewmacd(timeSeries, vegetationThreshold, trainingStartYear, trainingEndYear, harmonicCount, xBarLimit1, xBarLimit2, lambda, lambdasigs, rounding, persistence)	Image	timeSeries|vegetationThreshold|trainingStartYear|trainingEndYear|harmonicCount|xBarLimit1|xBarLimit2|lambda|lambdasigs|rounding|persistence	ImageCollection|Float|Integer|Integer|Integer, default: 2|Float, default: 1.5|Integer, default: 20|Float, default: 0.3|Float, default: 3|Boolean, default: true|Integer, default: 3	
ee.Algorithms.TemporalSegmentation.LandTrendr	Landsat-based detection of Trends in Disturbance and Recovery: temporally segments a time-series of images by extracting the spectral trajectories of change over time. The first band of each image is used to find breakpoints, and those breakpoints are used to perform fitting on all subsequent bands. The breakpoints are returned as a 2-D matrix of 4 rows and as many columns as images. The first two rows are the original X and Y values. The third row contains the Y values fitted to the estimated segments, and the 4th row contains a 1 if the corresponding point was used as a segment vertex or 0 if not. Any additional fitted bands are appended as rows in the output. Breakpoint fitting assumes that increasing values represent disturbance and decreasing values represent recovery.	ee.Algorithms.TemporalSegmentation.LandTrendr(timeSeries, maxSegments, spikeThreshold, vertexCountOvershoot, preventOneYearRecovery, recoveryThreshold, pvalThreshold, bestModelProportion, minObservationsNeeded)	Image	timeSeries|maxSegments|spikeThreshold|vertexCountOvershoot|preventOneYearRecovery|recoveryThreshold|pvalThreshold|bestModelProportion|minObservationsNeeded	ImageCollection|Integer|Float, default: 0.9|Integer, default: 3|Boolean, default: false|Float, default: 0.25|Float, default: 0.1|Float, default: 0.75|Integer, default: 6	
ee.Algorithms.TemporalSegmentation.LandTrendrFit	Interpolates a time series using a set of LandTrendr breakpoint years. For each input band in the timeSeries, outputs a new 1D array-valued band containing the input values interpolated between the breakpoint times identified by the vertices image.  See the LandTrendr Algorithm for more details.	ee.Algorithms.TemporalSegmentation.LandTrendrFit(timeSeries, vertices, spikeThreshold, minObservationsNeeded)	Image	timeSeries|vertices|spikeThreshold|minObservationsNeeded	ImageCollection|Image|Float, default: 0.9|Integer, default: 6	
ee.Algorithms.TemporalSegmentation.StructuralChangeBreakpoints	Runs breakpoint detection, similar to R's strucchange::breakpoints function.	ee.Algorithms.TemporalSegmentation.StructuralChangeBreakpoints(collection, breakpointBand, seasonalModelOrder, minSpacing, maxBreaks, dateFormat)	Image	collection|breakpointBand|seasonalModelOrder|minSpacing|maxBreaks|dateFormat	ImageCollection|String, default: null|Integer, default: 3|Float, default: 0.15|Integer, default: 0|Integer, default: 1	
ee.Algorithms.TemporalSegmentation.VCT	Vegetation Change Tracker, an automated approach for reconstructing recent forest disturbance history using dense Landsat time series stacks.	ee.Algorithms.TemporalSegmentation.VCT(timeSeries, landCover, maxUd, minNdvi, forThrMax, nYears)	Image	timeSeries|landCover|maxUd|minNdvi|forThrMax|nYears	ImageCollection|ImageCollection|Float, default: 4|Float, default: 0.45|Float, default: 3|Integer, default: 30	
ee.Algorithms.TemporalSegmentation.Verdet	Vegetation Regeneration and Disturbance Estimates through Time, forest change detection algorithm. This algorithm generates a yearly clear-sky composite from satellite imagery, calculates a spectral vegetation index for each pixel in that composite, spatially segments the vegetation index image into patches, temporally divides the time series into differently sloped segments, and then labels those segments as disturbed, stable, or regenerating. Segmentation at both the spatial and temporal steps are performed using total variation regularization.	ee.Algorithms.TemporalSegmentation.Verdet(timeSeries, tolerance, alpha, nRuns)	Image	timeSeries|tolerance|alpha|nRuns	ImageCollection|Float, default: 0.0001|Float, default: 0.03333333333333333|Integer, default: 100	
ee.Algorithms.Terrain	Calculates slope, aspect, and a simple hillshade from a terrain DEM.	ee.Algorithms.Terrain(input)	Image	input	Image	
ee.Array	Returns an array with the given coordinates.	ee.Array(values, pixelType)	Array	values|pixelType	Object|PixelType, default: null	
ee.Array.abs	On an element-wise basis, computes the absolute value of the input.	Array.abs()	Array	input	Array	
ee.Array.accum	Accumulates elements of an array along the given axis, by setting each element of the result to the reduction of elements along that axis up to and including the current position. May be used to make a cumulative sum, a monotonically increasing sequence, etc.	Array.accum(axis, reducer)	Array	array|axis|reducer	Array|Integer|Reducer, default: null	
ee.Array.acos	On an element-wise basis, computes the arc cosine in radians of the input.	Array.acos()	Array	input	Array	
ee.Array.add	On an element-wise basis, adds the first value to the second.	Array.add(right)	Array	left|right	Array|Array	
ee.Array.and	On an element-wise basis, returns 1 if and only if both values are non-zero.	Array.and(right)	Array	left|right	Array|Array	
ee.Array.argmax	Returns the position, as a list of indices in each array axis, of the maximum value in an array, or null if the array is empty. If there are multiple occurrences of the maximum, returns the position of the first.	Array.argmax()	List	array	Array	
ee.Array.asin	On an element-wise basis, computes the arc sine in radians of the input.	Array.asin()	Array	input	Array	
ee.Array.atan	On an element-wise basis, computes the arc tangent in radians of the input.	Array.atan()	Array	input	Array	
ee.Array.atan2	On an element-wise basis, calculates the angle formed by the 2D vector [x, y].	Array.atan2(right)	Array	left|right	Array|Array	
ee.Array.bitCount	On an element-wise basis, calculates the number of one-bits in the 64-bit two's complement binary representation of the input.	Array.bitCount()	Array	input	Array	
ee.Array.bitsToArray	Convert the bits of an integer to an Array.  The array has as many elements as the position of the highest set bit, or a single 0 for a value of 0.	ee.Array.bitsToArray(input)	Array	input	Number	
ee.Array.bitwiseAnd	On an element-wise basis, calculates the bitwise AND of the input values.	Array.bitwiseAnd(right)	Array	left|right	Array|Array	
ee.Array.bitwiseNot	On an element-wise basis, calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Array.bitwiseNot()	Array	input	Array	
ee.Array.bitwiseOr	On an element-wise basis, calculates the bitwise OR of the input values.	Array.bitwiseOr(right)	Array	left|right	Array|Array	
ee.Array.bitwiseXor	On an element-wise basis, calculates the bitwise XOR of the input values.	Array.bitwiseXor(right)	Array	left|right	Array|Array	
ee.Array.byte	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.byte()	Array	input	Array	
ee.Array.cat	Concatenates multiple arrays into a single array along the given axis.  Each array must have the same dimensionality and the same length on all axes except the concatenation axis.	ee.Array.cat(arrays, axis)	Array	arrays|axis	List|Integer, default: 0	
ee.Array.cbrt	On an element-wise basis, computes the cubic root of the input.	Array.cbrt()	Array	input	Array	
ee.Array.ceil	On an element-wise basis, computes the smallest integer greater than or equal to the input.	Array.ceil()	Array	input	Array	
ee.Array.cos	On an element-wise basis, computes the cosine of the input in radians.	Array.cos()	Array	input	Array	
ee.Array.cosh	On an element-wise basis, computes the hyperbolic cosine of the input.	Array.cosh()	Array	input	Array	
ee.Array.cut	Cut an array along one or more axes.	Array.cut(position)	Array	array|position	Array|List	
ee.Array.digamma	On an element-wise basis, computes the digamma function of the input.	Array.digamma()	Array	input	Array	
ee.Array.divide	On an element-wise basis, divides the first value by the second, returning 0 for division by 0.	Array.divide(right)	Array	left|right	Array|Array	
ee.Array.dotProduct	Compute the dot product between two 1-D arrays.	Array.dotProduct(array2)	Number	array1|array2	Array|Array	
ee.Array.double	On an element-wise basis, casts the input value to a 64-bit float.	Array.double()	Array	input	Array	
ee.Array.eigen	Computes the real eigenvectors and eigenvalues of a square 2D array of A rows and A columns. Returns an array with A rows and A+1 columns, where each row contains an eigenvalue in the first column, and the corresponding eigenvector in the remaining A columns. The rows are sorted by eigenvalue, in descending order.	Array.eigen()	Array	input	Array	
ee.Array.eq	On an element-wise basis, returns 1 if and only if the first value is equal to the second.	Array.eq(right)	Array	left|right	Array|Array	
ee.Array.erf	On an element-wise basis, computes the error function of the input.	Array.erf()	Array	input	Array	
ee.Array.erfInv	On an element-wise basis, computes the inverse error function of the input.	Array.erfInv()	Array	input	Array	
ee.Array.erfc	On an element-wise basis, computes the complementary error function of the input.	Array.erfc()	Array	input	Array	
ee.Array.erfcInv	On an element-wise basis, computes the inverse complementary error function of the input.	Array.erfcInv()	Array	input	Array	
ee.Array.exp	On an element-wise basis, computes the Euler's number e raised to the power of the input.	Array.exp()	Array	input	Array	
ee.Array.first	On an element-wise basis, selects the value of the first value.	Array.first(right)	Array	left|right	Array|Array	
ee.Array.firstNonZero	On an element-wise basis, selects the first value if it is non-zero, and the second value otherwise.	Array.firstNonZero(right)	Array	left|right	Array|Array	
ee.Array.float	On an element-wise basis, casts the input value to a 32-bit float.	Array.float()	Array	input	Array	
ee.Array.floor	On an element-wise basis, computes the largest integer less than or equal to the input.	Array.floor()	Array	input	Array	
ee.Array.gamma	On an element-wise basis, computes the gamma function of the input.	Array.gamma()	Array	input	Array	
ee.Array.gammainc	On an element-wise basis, calculates the regularized lower incomplete Gamma function γ(x,a).	Array.gammainc(right)	Array	left|right	Array|Array	
ee.Array.get	Extracts the value at the given position from the input array.	Array.get(position)	Number	array|position	Array|List	
ee.Array.gt	On an element-wise basis, returns 1 if and only if the first value is greater than the second.	Array.gt(right)	Array	left|right	Array|Array	
ee.Array.gte	On an element-wise basis, returns 1 if and only if the first value is greater than or equal to the second.	Array.gte(right)	Array	left|right	Array|Array	
ee.Array.hypot	On an element-wise basis, calculates the magnitude of the 2D vector [x, y].	Array.hypot(right)	Array	left|right	Array|Array	
ee.Array.identity	Creates a 2D identity matrix of the given size.	ee.Array.identity(size)	Array	size	Integer	
ee.Array.int	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.int()	Array	input	Array	
ee.Array.int16	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.int16()	Array	input	Array	
ee.Array.int32	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.int32()	Array	input	Array	
ee.Array.int64	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.int64()	Array	input	Array	
ee.Array.int8	On an element-wise basis, casts the input value to a signed 8-bit integer.	Array.int8()	Array	input	Array	
ee.Array.lanczos	On an element-wise basis, computes the Lanczos approximation of the input.	Array.lanczos()	Array	input	Array	
ee.Array.leftShift	On an element-wise basis, calculates the left shift of v1 by v2 bits.	Array.leftShift(right)	Array	left|right	Array|Array	
ee.Array.length	Returns a 1-D ee.Array containing the length of each dimension of the given ee.Array.	Array.length()	Array	array	Array	
ee.Array.log	On an element-wise basis, computes the natural logarithm of the input.	Array.log()	Array	input	Array	
ee.Array.log10	On an element-wise basis, computes the base-10 logarithm of the input.	Array.log10()	Array	input	Array	
ee.Array.long	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.long()	Array	input	Array	
ee.Array.lt	On an element-wise basis, returns 1 if and only if the first value is less than the second.	Array.lt(right)	Array	left|right	Array|Array	
ee.Array.lte	On an element-wise basis, returns 1 if and only if the first value is less than or equal to the second.	Array.lte(right)	Array	left|right	Array|Array	
ee.Array.mask	Creates a subarray by slicing out each position in an input array that is parallel to a non-zero element of the given mask array.	Array.mask(mask)	Array	input|mask	Array|Array	
ee.Array.matrixCholeskyDecomposition	Calculates the Cholesky decomposition of a matrix. The Cholesky decomposition is a decomposition into the form L * L' where L is a lower triangular matrix. The input must be a symmetric positive-definite matrix. Returns a dictionary with 1 entry named 'L'.	Array.matrixCholeskyDecomposition()	Dictionary	array	Array	
ee.Array.matrixDeterminant	Computes the determinant of the matrix.	Array.matrixDeterminant()	Number	input	Array	
ee.Array.matrixDiagonal	Computes the diagonal of the matrix in a single column.	Array.matrixDiagonal()	Array	input	Array	
ee.Array.matrixFnorm	Computes the Frobenius norm of the matrix.	Array.matrixFnorm()	Number	input	Array	
ee.Array.matrixInverse	Computes the inverse of the matrix.	Array.matrixInverse()	Array	input	Array	
ee.Array.matrixLUDecomposition	Calculates the LU matrix decomposition such that P×input=L×U, where L is lower triangular (with unit diagonal terms), U is upper triangular and P is a partial pivot permutation matrix. The input matrix must be square. Returns a dictionary with entries named 'L', 'U' and 'P'.	Array.matrixLUDecomposition()	Dictionary	array	Array	
ee.Array.matrixMultiply	Returns the matrix multiplication A * B.	Array.matrixMultiply(right)	Array	left|right	Array|Array	
ee.Array.matrixPseudoInverse	Computes the Moore-Penrose pseudoinverse of the matrix.	Array.matrixPseudoInverse()	Array	input	Array	
ee.Array.matrixQRDecomposition	Calculates the QR-decomposition of a matrix into two matrices Q and R such that input = QR, where Q is orthogonal, and R is upper triangular. Returns a dictionary with entries named 'Q' and 'R'.	Array.matrixQRDecomposition()	Dictionary	array	Array	
ee.Array.matrixSingularValueDecomposition	Calculates the Singular Value Decomposition of the input matrix into U×S×V', such that U and V are orthogonal and S is diagonal. Returns a dictionary with entries named 'U', 'S' and 'V'.	Array.matrixSingularValueDecomposition()	Dictionary	array	Array	
ee.Array.matrixSolve	Solves for x in the matrix equation A * x = B, finding a least-squares solution if A is overdetermined.	Array.matrixSolve(right)	Array	left|right	Array|Array	
ee.Array.matrixToDiag	Computes a square diagonal matrix from a single column matrix.	Array.matrixToDiag()	Array	input	Array	
ee.Array.matrixTrace	Computes the trace of the matrix.	Array.matrixTrace()	Number	input	Array	
ee.Array.matrixTranspose	Transposes two dimensions of an array.	Array.matrixTranspose(axis1, axis2)	Array	array|axis1|axis2	Array|Integer, default: 0|Integer, default: 1	
ee.Array.max	On an element-wise basis, selects the maximum of the first and second values.	Array.max(right)	Array	left|right	Array|Array	
ee.Array.min	On an element-wise basis, selects the minimum of the first and second values.	Array.min(right)	Array	left|right	Array|Array	
ee.Array.mod	On an element-wise basis, calculates the remainder of the first value divided by the second.	Array.mod(right)	Array	left|right	Array|Array	
ee.Array.multiply	On an element-wise basis, multiplies the first value by the second.	Array.multiply(right)	Array	left|right	Array|Array	
ee.Array.neq	On an element-wise basis, returns 1 if and only if the first value is not equal to the second.	Array.neq(right)	Array	left|right	Array|Array	
ee.Array.not	On an element-wise basis, returns 0 if the input is non-zero, and 1 otherwise.	Array.not()	Array	input	Array	
ee.Array.or	On an element-wise basis, returns 1 if and only if either input value is non-zero.	Array.or(right)	Array	left|right	Array|Array	
ee.Array.pad	Pad an array to a given length. The pad value will be repeatedly appended to the array to extend it to given length along each axis. If the array is already as large or larger than a given length, it will remain unchanged along that axis.	Array.pad(lengths, pad)	Array	array|lengths|pad	Array|List|Number, default: 0	
ee.Array.pow	On an element-wise basis, raises the first value to the power of the second.	Array.pow(right)	Array	left|right	Array|Array	
ee.Array.project	Projects an array to a lower dimensional space by specifying the axes to retain. Dropped axes must be at most length 1.	Array.project(axes)	Array	array|axes	Array|List	
ee.Array.reduce	Apply a reducer to an array by collapsing all the input values along each specified axis into a single output value computed by the reducer.	Array.reduce(reducer, axes, fieldAxis)	Array	array|reducer|axes|fieldAxis	Array|Reducer|List|Integer, default: null	
ee.Array.repeat	Repeats the array along the given axis. The result will have the shape of the input, except length along the repeated axis will be multiplied by the given number of copies.	Array.repeat(axis, copies)	Array	array|axis|copies	Array|Integer, default: 0|Integer, default: 2	
ee.Array.reshape	Reshapes an array to a new list of dimension lengths.	Array.reshape(shape)	Array	array|shape	Array|Array	
ee.Array.rightShift	On an element-wise basis, calculates the signed right shift of v1 by v2 bits.	Array.rightShift(right)	Array	left|right	Array|Array	
ee.Array.round	On an element-wise basis, computes the integer nearest to the input.	Array.round()	Array	input	Array	
ee.Array.short	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.short()	Array	input	Array	
ee.Array.signum	On an element-wise basis, computes the signum function (sign) of the input; zero if the input is zero, 1 if the input is greater than zero, -1 if the input is less than zero.	Array.signum()	Array	input	Array	
ee.Array.sin	On an element-wise basis, computes the sine of the input in radians.	Array.sin()	Array	input	Array	
ee.Array.sinh	On an element-wise basis, computes the hyperbolic sine of the input.	Array.sinh()	Array	input	Array	
ee.Array.slice	Creates a subarray by slicing out each position along the given axis from the 'start' (inclusive) to 'end' (exclusive) by increments of 'step'. The result will have as many dimensions as the input, and the same length in all directions except the slicing axis, where the length will be the number of positions from 'start' to 'end' by 'step' that are in range of the input array's length along 'axis'. This means the result can be length 0 along the given axis if start=end, or if the start or end values are entirely out of range.	Array.slice(axis, start, end, step)	Array	array|axis|start|end|step	Array|Integer, default: 0|Integer, default: 0|Integer, default: null|Integer, default: 1	
ee.Array.sort	Sorts elements of the array along one axis.	Array.sort(keys)	Array	array|keys	Array|Array, default: null	
ee.Array.sqrt	On an element-wise basis, computes the square root of the input.	Array.sqrt()	Array	input	Array	
ee.Array.subtract	On an element-wise basis, subtracts the second value from the first.	Array.subtract(right)	Array	left|right	Array|Array	
ee.Array.tan	On an element-wise basis, computes the tangent of the input in radians.	Array.tan()	Array	input	Array	
ee.Array.tanh	On an element-wise basis, computes the hyperbolic tangent of the input.	Array.tanh()	Array	input	Array	
ee.Array.toByte	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.toByte()	Array	input	Array	
ee.Array.toDouble	On an element-wise basis, casts the input value to a 64-bit float.	Array.toDouble()	Array	input	Array	
ee.Array.toFloat	On an element-wise basis, casts the input value to a 32-bit float.	Array.toFloat()	Array	input	Array	
ee.Array.toInt	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.toInt()	Array	input	Array	
ee.Array.toInt16	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.toInt16()	Array	input	Array	
ee.Array.toInt32	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.toInt32()	Array	input	Array	
ee.Array.toInt64	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.toInt64()	Array	input	Array	
ee.Array.toInt8	On an element-wise basis, casts the input value to a signed 8-bit integer.	Array.toInt8()	Array	input	Array	
ee.Array.toList	Turns an Array into a list of lists of numbers.	Array.toList()	List	array	Array	
ee.Array.toLong	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.toLong()	Array	input	Array	
ee.Array.toShort	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.toShort()	Array	input	Array	
ee.Array.toUint16	On an element-wise basis, casts the input value to an unsigned 16-bit integer.	Array.toUint16()	Array	input	Array	
ee.Array.toUint32	On an element-wise basis, casts the input value to an unsigned 32-bit integer.	Array.toUint32()	Array	input	Array	
ee.Array.toUint8	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.toUint8()	Array	input	Array	
ee.Array.transpose	Transposes two dimensions of an array.	Array.transpose(axis1, axis2)	Array	array|axis1|axis2	Array|Integer, default: 0|Integer, default: 1	
ee.Array.trigamma	On an element-wise basis, computes the trigamma function of the input.	Array.trigamma()	Array	input	Array	
ee.Array.uint16	On an element-wise basis, casts the input value to an unsigned 16-bit integer.	Array.uint16()	Array	input	Array	
ee.Array.uint32	On an element-wise basis, casts the input value to an unsigned 32-bit integer.	Array.uint32()	Array	input	Array	
ee.Array.uint8	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.uint8()	Array	input	Array	
ee.Blob	Loads a Blob from a Google Cloud Storage URL.	ee.Blob(url)	Blob	url	String	
ee.Blob.string	Returns the contents of the blob as a String.	Blob.string(encoding)	String	blob|encoding	Blob|String, default: null	
ee.Blob.url	Returns the Blob's Google Cloud Storage URL.	Blob.url()	String	blob	Blob	
ee.Classifier.amnhMaxent	Creates a Maximum Entropy classifier.  Maxent is used to model species distribution probabilities using environmental data for locations of known presence and for a large number of 'background' locations. For more information and to cite, see: https://biodiversityinformatics.amnh.org/open_source/maxent/ and the reference  publication: Phillips, et. al., 2004 A maximum entropy approach to species distribution  modeling, Proceedings of the Twenty-First International Conference on Machine Learning. The output is a single band named 'probability', containing the modeled probability,  and an additional band named 'clamp' when the 'writeClampGrid' argument is true.	ee.Classifier.amnhMaxent(categoricalNames, outputFormat, autoFeature, linear, quadratic, product, threshold, hinge, hingeThreshold, l2lqThreshold, lq2lqptThreshold, addSamplesToBackground, addAllSamplesToBackground, betaMultiplier, betaHinge, betaLqp, betaCategorical, betaThreshold, extrapolate, doClamp, writeClampGrid, randomTestPoints, seed)	Classifier	categoricalNames|outputFormat|autoFeature|linear|quadratic|product|threshold|hinge|hingeThreshold|l2lqThreshold|lq2lqptThreshold|addSamplesToBackground|addAllSamplesToBackground|betaMultiplier|betaHinge|betaLqp|betaCategorical|betaThreshold|extrapolate|doClamp|writeClampGrid|randomTestPoints|seed	"List, default: null|String, default: ""cloglog""|Boolean, default: true|Boolean, default: true|Boolean, default: true|Boolean, default: true|Boolean, default: false|Boolean, default: true|Integer, default: 15|Integer, default: 10|Integer, default: 80|Boolean, default: true|Boolean, default: false|Float, default: 1|Float, default: -1|Float, default: -1|Float, default: -1|Float, default: -1|Boolean, default: true|Boolean, default: true|Boolean, default: true|Integer, default: 0|Long, default: 0"	
ee.Classifier.confusionMatrix	Computes a 2D confusion matrix for a classifier based on its training data (ie: resubstitution error).  Axis 0 of the matrix corresponds to the input classes, and axis 1 corresponds to the output classes.  The rows and columns  start at class 0 and increase sequentially up to the maximum class value, so some rows or columns might be empty if the input classes aren't 0-based or sequential.	Classifier.confusionMatrix()	ConfusionMatrix	classifier	Classifier	
ee.Classifier.decisionTree	Creates a classifier that applies the given decision tree.	ee.Classifier.decisionTree(treeString)	Classifier	treeString	String	
ee.Classifier.decisionTreeEnsemble	Creates a classifier that applies the given decision trees.	ee.Classifier.decisionTreeEnsemble(treeStrings)	Classifier	treeStrings	List	
ee.Classifier.explain	Describe the results of a trained classifier.	Classifier.explain()	Dictionary	classifier	Classifier	
ee.Classifier.libsvm	Creates an empty Support Vector Machine classifier.	ee.Classifier.libsvm(decisionProcedure, svmType, kernelType, shrinking, degree, gamma, coef0, cost, nu, terminationEpsilon, lossEpsilon, oneClass)	Classifier	decisionProcedure|svmType|kernelType|shrinking|degree|gamma|coef0|cost|nu|terminationEpsilon|lossEpsilon|oneClass	"String, default: ""Voting""|String, default: ""C_SVC""|String, default: ""LINEAR""|Boolean, default: true|Integer, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Integer, default: null"	
ee.Classifier.load	Creates a Classifier.	ee.Classifier.load(id)	Classifier	id	String	
ee.Classifier.minimumDistance	Creates a minimum distance classifier for the given distance metric.  In CLASSIFICATION mode, the nearest class is returned.  In REGRESSION mode, the distance to the nearest class center is returned.  In RAW mode, the distance to every class center is returned.	ee.Classifier.minimumDistance(metric, kNearest)	Classifier	metric|kNearest	"String, default: ""euclidean""|Integer, default: 1"	
ee.Classifier.mode	Returns the classifier mode: CLASSIFICATION, REGRESSION, PROBABILITY, MULTIPROBABILITY, RAW or RAW_REGRESSION.	Classifier.mode()	String	classifier	Classifier	
ee.Classifier.schema	Returns the names of the inputs used by this classifier, or null if this classifier has not had any training data added yet.	Classifier.schema()	List	classifier	Classifier	
ee.Classifier.setOutputMode	Sets the output mode.	Classifier.setOutputMode(mode)	Classifier	classifier|mode	Classifier|String	
ee.Classifier.smileCart	Creates an empty CART classifier. See:	ee.Classifier.smileCart(maxNodes, minLeafPopulation)	Classifier	maxNodes|minLeafPopulation	Integer, default: null|Integer, default: 1	
ee.Classifier.smileGradientTreeBoost	Creates an empty Gradient Tree Boost classifier.	ee.Classifier.smileGradientTreeBoost(numberOfTrees, shrinkage, samplingRate, maxNodes, loss, seed)	Classifier	numberOfTrees|shrinkage|samplingRate|maxNodes|loss|seed	"Integer|Float, default: 0.005|Float, default: 0.7|Integer, default: null|String, default: ""LeastAbsoluteDeviation""|Integer, default: 0"	
ee.Classifier.smileKNN	Creates an empty kNN classifier.	ee.Classifier.smileKNN(k, searchMethod, metric)	Classifier	k|searchMethod|metric	"Integer, default: 1|String, default: ""AUTO""|String, default: ""EUCLIDEAN"""	
ee.Classifier.smileNaiveBayes	Creates an empty Naive Bayes classifier.  This classifier assumes that the feature vector consists of positive integers, and negative inputs are discarded.	ee.Classifier.smileNaiveBayes(lambda)	Classifier	lambda	Float, default: 0.000001	
ee.Classifier.smileRandomForest	Creates an empty Random Forest classifier.	ee.Classifier.smileRandomForest(numberOfTrees, variablesPerSplit, minLeafPopulation, bagFraction, maxNodes, seed)	Classifier	numberOfTrees|variablesPerSplit|minLeafPopulation|bagFraction|maxNodes|seed	Integer|Integer, default: null|Integer, default: 1|Float, default: 0.5|Integer, default: null|Integer, default: 0	
ee.Classifier.spectralRegion	Creates a classifier that tests if its inputs lie within a polygon defined by a set  of coordinates in an arbitrary 2D coordinate system.  Each input to be classified  must have 2 values (e.g.: images must have 2 bands).  The result will be 1 wherever  the input values are contained within the given polygon and 0 otherwise.	ee.Classifier.spectralRegion(coordinates, schema)	Classifier	coordinates|schema	List|List, default: null	
ee.Classifier.train	Trains the classifier on a collection of features, using the specified numeric properties of each feature as training data. The geometry of the features is ignored.	Classifier.train(features, classProperty, inputProperties, subsampling, subsamplingSeed)	Classifier	classifier|features|classProperty|inputProperties|subsampling|subsamplingSeed	Classifier|FeatureCollection|String|List, default: null|Float, default: 1|Integer, default: 0	
ee.Clusterer.schema	Returns the names of the inputs used by this Clusterer, or null if this Clusterer has not had any training data added yet.	Clusterer.schema()	List	clusterer	Clusterer	
ee.Clusterer.train	Trains the Clusterer on a collection of features, using the specified numeric properties of each feature as training data. The geometry of the features is ignored.	Clusterer.train(features, inputProperties, subsampling, subsamplingSeed)	Clusterer	clusterer|features|inputProperties|subsampling|subsamplingSeed	Clusterer|FeatureCollection|List, default: null|Float, default: 1|Integer, default: 0	
ee.Clusterer.wekaCascadeKMeans	Cascade simple k-means, selects the best k according to the Calinski-Harabasz criterion. For more information see:	ee.Clusterer.wekaCascadeKMeans(minClusters, maxClusters, restarts, manual, init, distanceFunction, maxIterations)	Clusterer	minClusters|maxClusters|restarts|manual|init|distanceFunction|maxIterations	"Integer, default: 2|Integer, default: 10|Integer, default: 10|Boolean, default: false|Boolean, default: false|String, default: ""Euclidean""|Integer, default: null"	
ee.Clusterer.wekaCobweb	Implementation of the Cobweb clustering algorithm. For more information see:	ee.Clusterer.wekaCobweb(acuity, cutoff, seed)	Clusterer	acuity|cutoff|seed	Float, default: 1|Float, default: 0.002|Integer, default: 42	
ee.Clusterer.wekaKMeans	Cluster data using the k means algorithm. Can use either the Euclidean distance (default) or the Manhattan distance. If the Manhattan distance is used, then centroids are computed as the component-wise median rather than mean. For more information see:	ee.Clusterer.wekaKMeans(nClusters, init, canopies, maxCandidates, periodicPruning, minDensity, t1, t2, distanceFunction, maxIterations, preserveOrder, fast, seed)	Clusterer	nClusters|init|canopies|maxCandidates|periodicPruning|minDensity|t1|t2|distanceFunction|maxIterations|preserveOrder|fast|seed	"Integer|Integer, default: 0|Boolean, default: false|Integer, default: 100|Integer, default: 10000|Integer, default: 2|Float, default: -1.5|Float, default: -1|String, default: ""Euclidean""|Integer, default: null|Boolean, default: false|Boolean, default: false|Integer, default: 10"	
ee.Clusterer.wekaLVQ	A Clusterer that implements the Learning Vector Quantization algorithm. For more details, see:	ee.Clusterer.wekaLVQ(numClusters, learningRate, epochs, normalizeInput)	Clusterer	numClusters|learningRate|epochs|normalizeInput	Integer, default: 7|Float, default: 1|Integer, default: 1000|Boolean, default: false	
ee.Clusterer.wekaXMeans	X-Means is K-Means with an efficient estimation of the number of clusters. For more information see:	ee.Clusterer.wekaXMeans(minClusters, maxClusters, maxIterations, maxKMeans, maxForChildren, useKD, cutoffFactor, distanceFunction, seed)	Clusterer	minClusters|maxClusters|maxIterations|maxKMeans|maxForChildren|useKD|cutoffFactor|distanceFunction|seed	"Integer, default: 2|Integer, default: 8|Integer, default: 3|Integer, default: 1000|Integer, default: 1000|Boolean, default: false|Float, default: 0|String, default: ""Euclidean""|Integer, default: 10"	
ee.ConfusionMatrix	Creates a confusion matrix. Axis 0 (the rows) of the matrix correspond to the actual values, and Axis 1 (the columns) to the predicted values.	ee.ConfusionMatrix(array, order)	ConfusionMatrix	array|order	Object|List, default: null	
ee.ConfusionMatrix.accuracy	Computes the overall accuracy of a confusion matrix defined as correct / total.	ConfusionMatrix.accuracy()	Float	confusionMatrix	ConfusionMatrix	
ee.ConfusionMatrix.array	Returns a confusion matrix as an Array.	ConfusionMatrix.array()	Array	confusionMatrix	ConfusionMatrix	
ee.ConfusionMatrix.consumersAccuracy	Computes the consumer's accuracy (reliability) of a confusion matrix defined as (correct / total) for each row.	ConfusionMatrix.consumersAccuracy()	Array	confusionMatrix	ConfusionMatrix	
ee.ConfusionMatrix.fscore	Computes the Fβ-score for the confusion matrix.	ConfusionMatrix.fscore(beta)	Array	confusionMatrix|beta	ConfusionMatrix|Float, default: 1	
ee.ConfusionMatrix.kappa	Computes the Kappa statistic for the confusion matrix.	ConfusionMatrix.kappa()	Float	confusionMatrix	ConfusionMatrix	
ee.ConfusionMatrix.order	Returns the name and order of the rows and columns of the matrix.	ConfusionMatrix.order()	List	confusionMatrix	ConfusionMatrix	
ee.ConfusionMatrix.producersAccuracy	Computes the producer's accuracy of a confusion matrix defined as (correct / total) for each column.	ConfusionMatrix.producersAccuracy()	Array	confusionMatrix	ConfusionMatrix	
ee.Date	Constructs a new Date object.	ee.Date(date, tz)	Date	date|tz	ComputedObject|Date|Number|String|String, optional	
ee.Date.advance	Create a new Date by adding the specified units to the given Date.	Date.advance(delta, unit, timeZone)	Date	date|delta|unit|timeZone	Date|Float|String|String, default: null	
ee.Date.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Date.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Date.difference	Returns the difference between two Dates in the specified units; the result is floating-point and based on the average length of the unit.	Date.difference(start, unit)	Float	date|start|unit	Date|Date|String	
ee.Date.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Date.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Date.format	Convert a date to string.	Date.format(format, timeZone)	String	date|format|timeZone	Date|String, default: null|String, default: null	
ee.Date.fromYMD	Returns a Date given year, month, day.	ee.Date.fromYMD(year, month, day, timeZone)	Date	year|month|day|timeZone	Integer|Integer|Integer|String, default: null	
ee.Date.get	Returns the specified unit of this date.	Date.get(unit, timeZone)	Long	date|unit|timeZone	Date|String|String, default: null	
ee.Date.getFraction	Returns this date's elapsed fraction of the specified unit (between 0 and 1).	Date.getFraction(unit, timeZone)	Float	date|unit|timeZone	Date|String|String, default: null	
ee.Date.getInfo	Retrieves the value of this object from the server.	Date.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Date.getRange	Returns a DateRange covering the unit of the specified type that contains this date, e.g. Date('2013-3-15').getRange('year') returns DateRange('2013-1-1', '2014-1-1').	Date.getRange(unit, timeZone)	DateRange	date|unit|timeZone	Date|String|String, default: null	
ee.Date.getRelative	Returns the specified (0-based) unit of this date relative to a larger unit, e.g. getRelative('day', 'year') returns a value between 0 and 365.	Date.getRelative(unit, inUnit, timeZone)	Long	date|unit|inUnit|timeZone	Date|String|String|String, default: null	
ee.Date.millis	The number of milliseconds since 1970-01-01T00:00:00Z.	Date.millis()	Long	date	Date	
ee.Date.parse	Parse a date string, given a string describing its format.	ee.Date.parse(format, date, timeZone)	Date	format|date|timeZone	String|String|String, default: null	
ee.Date.serialize	Returns the serialized representation of this object.	Date.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.Date.unitRatio	Returns the ratio of the length of one unit to the length of another, e.g. unitRatio('day', 'minute') returns 1440.  Valid units are 'year', 'month' 'week', 'day', 'hour', 'minute', and 'second'.	ee.Date.unitRatio(numerator, denominator)	Float	numerator|denominator	String|String	
ee.Date.update	Create a new Date by setting one or more of the units of the given Date to a new value.  If a timeZone is given the new value(s) is interpreted in that zone.	Date.update(year, month, day, hour, minute, second, timeZone)	Date	date|year|month|day|hour|minute|second|timeZone	Date|Integer, default: null|Integer, default: null|Integer, default: null|Integer, default: null|Integer, default: null|Number, default: null|String, default: null	
ee.DateRange	Creates a DateRange with the given start (inclusive) and end (exclusive), which may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). If 'end' is not specified, a 1-millisecond range starting at 'start' is created.	ee.DateRange(start, end, timeZone)	DateRange	start|end|timeZone	Object|Object, default: null|String, default: null	
ee.DateRange.contains	Returns true if the given Date or DateRange is within this DateRange.	DateRange.contains(other)	Boolean	dateRange|other	DateRange|Object	
ee.DateRange.end	Returns the (exclusive) end of this DateRange.	DateRange.end()	Date	dateRange	DateRange	
ee.DateRange.intersection	Returns a DateRange that contains all points in the intersection of this DateRange and another.	DateRange.intersection(other)	DateRange	dateRange|other	DateRange|DateRange	
ee.DateRange.intersects	Returns true if the given DateRange has at least one point in common with this DateRange.	DateRange.intersects(other)	Boolean	dateRange|other	DateRange|DateRange	
ee.DateRange.isEmpty	Returns true if this DateRange contains no dates (i.e. start >= end).	DateRange.isEmpty()	Boolean	dateRange	DateRange	
ee.DateRange.isUnbounded	Returns true if this DateRange contains all dates.	DateRange.isUnbounded()	Boolean	dateRange	DateRange	
ee.DateRange.start	Returns the (inclusive) start of this DateRange.	DateRange.start()	Date	dateRange	DateRange	
ee.DateRange.unbounded	Returns a DateRange that includes all possible dates.	ee.DateRange.unbounded()	DateRange			
ee.DateRange.union	UsageReturnsDateRange.union(other)DateRange	DateRange.union(other)	DateRange	dateRange|other	DateRange|DateRange	
ee.Dictionary	Constructs a new Dictionary.	ee.Dictionary(dict)	Dictionary	dict	ComputedObject|Object, optional	
ee.Dictionary.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Dictionary.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Dictionary.combine	Combines two dictionaries.  In the case of duplicate names, the output will contain the value of the second dictionary unless overwrite is false.  Null values in both dictionaries are ignored / removed.	Dictionary.combine(second, overwrite)	Dictionary	first|second|overwrite	Dictionary|Dictionary|Boolean, default: true	
ee.Dictionary.contains	Returns true if the dictionary contains the given key.	Dictionary.contains(key)	Boolean	dictionary|key	Dictionary|String, default: null	
ee.Dictionary.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Dictionary.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Dictionary.fromLists	Construct a dictionary from two parallel lists of keys and values.	ee.Dictionary.fromLists(keys, values)	Dictionary	keys|values	List|List	
ee.Dictionary.get	Extracts a named value from a dictionary.  If the dictionary does not contain the given key, then defaultValue is returned, unless it is null.	Dictionary.get(key, defaultValue)	Object	dictionary|key|defaultValue	Dictionary|String|Object, default: null	
ee.Dictionary.getArray	Extracts a named array value from a dictionary.	Dictionary.getArray(key)	Array	dictionary|key	Dictionary|String	
ee.Dictionary.getGeometry	Extracts a named geometry value from a dictionary.	Dictionary.getGeometry(key)	Geometry	dictionary|key	Dictionary|String	
ee.Dictionary.getInfo	Retrieves the value of this object from the server.	Dictionary.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Dictionary.getNumber	Extracts a named number value from a dictionary.	Dictionary.getNumber(key)	Number	dictionary|key	Dictionary|String	
ee.Dictionary.getString	Extracts a named string value from a dictionary.	Dictionary.getString(key)	String	dictionary|key	Dictionary|String	
ee.Dictionary.keys	Retrieve the keys of a dictionary as a list.  The keys will be sorted in natural order.	Dictionary.keys()	List	dictionary	Dictionary	
ee.Dictionary.map	Map an algorithm over a dictionary.  The algorithm is expected to take 2 arguments, a key from the existing dictionary and the value it corresponds to, and return a new value for the given key.  If the algorithm returns null, the key is dropped.	Dictionary.map(baseAlgorithm)	Dictionary	dictionary|baseAlgorithm	Dictionary|Algorithm	
ee.Dictionary.remove	Returns a dictionary with the specified keys removed.	Dictionary.remove(selectors, ignoreMissing)	Dictionary	dictionary|selectors|ignoreMissing	Dictionary|List|Boolean, default: false	
ee.Dictionary.rename	Rename elements in a dictionary.	Dictionary.rename(from, to, overwrite)	Dictionary	dictionary|from|to|overwrite	Dictionary|List|List|Boolean, default: false	
ee.Dictionary.select	Returns a dictionary with only the specified keys.	Dictionary.select(selectors, ignoreMissing)	Dictionary	dictionary|selectors|ignoreMissing	Dictionary|List|Boolean, default: false	
ee.Dictionary.serialize	Returns the serialized representation of this object.	Dictionary.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.Dictionary.set	Set a value in a dictionary.	Dictionary.set(key, value)	Dictionary	dictionary|key|value	Dictionary|String|Object	
ee.Dictionary.size	Returns the number of entries in a dictionary.	Dictionary.size()	Integer	dictionary	Dictionary	
ee.Dictionary.toArray	Returns numeric values of a dictionary as an array. If no keys are specified, all values are returned in the natural ordering of the dictionary's keys. The default 'axis' is 0.	Dictionary.toArray(keys, axis)	Array	dictionary|keys|axis	Dictionary|List, default: null|Integer, default: 0	
ee.Dictionary.toImage	Creates an image of constants from values in a dictionary. The bands of the image are ordered and named according to the names argument.  If no names are specified, the bands are sorted alpha-numerically.	Dictionary.toImage(names)	Image	dictionary|names	Dictionary|List, default: null	
ee.Dictionary.values	Returns the values of a dictionary as a list.  If no keys are specified, all values are returned in the natural ordering of the dictionary's keys.	Dictionary.values(keys)	List	dictionary|keys	Dictionary|List, default: null	
ee.ErrorMargin	Returns an ErrorMargin of the given type with the given value.	ee.ErrorMargin(value, unit)	ErrorMargin	value|unit	"Float, default: null|String, default: ""meters"""	
ee.Feature	Features can be constructed from one of the following arguments plus an optional dictionary of properties:	ee.Feature(geometry, properties)	Feature	geometry|properties	ComputedObject|Feature|Geometry|Object|Object, optional	
ee.Feature.area	Returns the area of the feature's default geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	Feature.area(maxError, proj)	Float	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Feature.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Feature.bounds	Returns a feature containing the bounding box of the geometry of a given feature.	Feature.bounds(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Feature.buffer(distance, maxError, proj)	Feature	feature|distance|maxError|proj	Element|Float|ErrorMargin, default: null|Projection, default: null	
ee.Feature.centroid	Returns a feature containing the point at the center of the highest-dimension components of the geometry of a feature. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Feature.centroid(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.containedIn	Returns true if and only if the geometry of one feature is contained in the geometry of another.	Feature.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.contains	Returns true if and only if the geometry of one feature contains the geometry of another.	Feature.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.convexHull	Returns the feature, with the geometry replaced by the convex hull of the original geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Feature.convexHull(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.copyProperties	Copies metadata properties from one element to another.	Feature.copyProperties(source, properties, exclude)	Element	destination|source|properties|exclude	Element, default: null|Element, default: null|List, default: null|List, default: null	
ee.Feature.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	Feature.cutLines(distances, maxError, proj)	Feature	feature|distances|maxError|proj	Element|List|ErrorMargin, default: null|Projection, default: null	
ee.Feature.difference	Returns a feature with the properties of the 'left' feature, and the geometry that results from subtracting the 'right' geometry from the 'left' geometry.	Feature.difference(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.disjoint	Returns true if and only if the feature geometries are disjoint.	Feature.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.dissolve	Returns a feature containing the union of the geometry of a feature. This leaves single geometries untouched, and unions multi geometries.	Feature.dissolve(maxError, proj)	Element	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.distance	Returns the minimum distance between the geometries of two features.	Feature.distance(right, maxError, proj)	Float	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Feature.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Feature.geometry	Returns the geometry of a given feature in a given projection.	Feature.geometry(maxError, proj, geodesics)	Geometry	feature|maxError|proj|geodesics	Element|ErrorMargin, default: null|Projection, default: null|Boolean, default: null	
ee.Feature.get	Extract a property from a feature.	Feature.get(property)		object|property	Element|String	
ee.Feature.getArray	Extract a property from a feature.	Feature.getArray(property)	Array	object|property	Element|String	
ee.Feature.getInfo	An imperative function that returns information about this feature via an AJAX call.	Feature.getInfo(callback)	GeoJSONFeature	feature|callback	Feature|Function, optional	
ee.Feature.getMapId	An imperative function that returns a map ID and optional token, suitable for generating a Map overlay.	Feature.getMapId(visParams, callback)	MapId|Object	feature|visParams|callback	Feature|Object, optional|Function, optional	
ee.Feature.getNumber	Extract a property from a feature.	Feature.getNumber(property)	Number	object|property	Element|String	
ee.Feature.getString	Extract a property from a feature.	Feature.getString(property)	String	object|property	Element|String	
ee.Feature.hersDescriptor	Creates a dictionary of Histogram Error Ring Statistic (HERS) descriptor arrays from square array properties of an element. The HERS radius is taken to be the array's (side_length - 1) / 2.	Feature.hersDescriptor(selectors, buckets, peakWidthScale)	Dictionary	element|selectors|buckets|peakWidthScale	Element|List, default: null|Integer, default: 100|Float, default: 1	
ee.Feature.id	Returns the ID of a given element within a collection. Objects outside collections are not guaranteed to have IDs.	Feature.id()	String	element	Element	
ee.Feature.intersection	Returns a feature containing the intersection of the geometries of two features, with the properties of the left feature.	Feature.intersection(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.intersects	Returns true if and only if the feature geometries intersect.	Feature.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.length	Returns the length of the linear parts of the geometry of a given feature. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Feature.length(maxError, proj)	Float	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry of a given feature. The perimeter of multi geometries is the sum of the perimeters of their components.	Feature.perimeter(maxError, proj)	Float	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.propertyNames	Returns the names of properties on this element.	Feature.propertyNames()	List	element	Element	
ee.Feature.select	Selects properties from a feature by name or RE2-compatible regex and optionally renames them.	Feature.select(propertySelectors, newProperties, retainGeometry)	Element	input|propertySelectors|newProperties|retainGeometry	Element|List|List, default: null|Boolean, default: true	
ee.Feature.serialize	Returns the serialized representation of this object.	Feature.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.Feature.set	Overrides one or more metadata properties of an Element.	Feature.set(var_args)	Element	element|var_args	Element|VarArgs	
ee.Feature.setGeometry	Returns the feature, with the geometry replaced by the specified geometry.	Feature.setGeometry(geometry)	Element	feature|geometry	Element|Geometry, default: null	
ee.Feature.simplify	Simplifies the geometry of a feature to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Feature.simplify(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin|Projection, default: null	
ee.Feature.symmetricDifference	Returns a feature containing the symmetric difference between geometries of two features.	Feature.symmetricDifference(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.toArray	Creates an array from the given properties of an object, which must all be numbers.	Feature.toArray(properties)	Array	feature|properties	Feature|List	
ee.Feature.toDictionary	Extract properties from a feature as a dictionary.	Feature.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	
ee.Feature.transform	Transforms the geometry of a feature to a specific projection.	Feature.transform(proj, maxError)	Feature	feature|proj|maxError	Element|Projection, optional|ErrorMargin, default: null	
ee.Feature.union	Returns a feature containing the union of the geometries of two features.	Feature.union(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	
ee.Feature.withinDistance	Returns true if and only if the geometries of two features are within a specified distance.	Feature.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Element|Element|Float|ErrorMargin, default: null|Projection, default: null	
ee.FeatureCollection	FeatureCollections can be constructed from the following arguments:	ee.FeatureCollection(args, column)	FeatureCollection	args|column	ComputedObject|Feature|FeatureCollection|Geometry|List|String, optional	
ee.FeatureCollection.aggregate_array	Aggregates over a given property of the objects in a collection, calculating a list of all the values of the selected property.	FeatureCollection.aggregate_array(property)	List	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_count	Aggregates over a given property of the objects in a collection, calculating the number of non-null values of the property.	FeatureCollection.aggregate_count(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_count_distinct	Aggregates over a given property of the objects in a collection, calculating the number of distinct values for the selected property.	FeatureCollection.aggregate_count_distinct(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_first	Aggregates over a given property of the objects in a collection, calculating the property value of the first object in the collection.	FeatureCollection.aggregate_first(property)		collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_histogram	Aggregates over a given property of the objects in a collection, calculating a histogram of the selected property.	FeatureCollection.aggregate_histogram(property)	Dictionary	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_max	Aggregates over a given property of the objects in a collection, calculating the maximum of the values of the selected property.	FeatureCollection.aggregate_max(property)		collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_mean	Aggregates over a given property of the objects in a collection, calculating the mean of the selected property.	FeatureCollection.aggregate_mean(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_min	Aggregates over a given property of the objects in a collection, calculating the minimum of the values of the selected property.	FeatureCollection.aggregate_min(property)		collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_product	Aggregates over a given property of the objects in a collection, calculating the product of the values of the selected property.	FeatureCollection.aggregate_product(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_sample_sd	Aggregates over a given property of the objects in a collection, calculating the sample std. deviation of the values of the selected property.	FeatureCollection.aggregate_sample_sd(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_sample_var	Aggregates over a given property of the objects in a collection, calculating the sample variance of the values of the selected property.	FeatureCollection.aggregate_sample_var(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_stats	Aggregates over a given property of the objects in a collection, calculating the sum, min, max, mean, sample standard deviation, sample variance, total standard deviation and total variance of the selected property.	FeatureCollection.aggregate_stats(property)	Dictionary	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_sum	Aggregates over a given property of the objects in a collection, calculating the sum of the values of the selected property.	FeatureCollection.aggregate_sum(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_total_sd	Aggregates over a given property of the objects in a collection, calculating the total std. deviation of the values of the selected property.	FeatureCollection.aggregate_total_sd(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aggregate_total_var	Aggregates over a given property of the objects in a collection, calculating the total variance of the values of the selected property.	FeatureCollection.aggregate_total_var(property)	Number	collection|property	FeatureCollection|String	
ee.FeatureCollection.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	FeatureCollection.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.FeatureCollection.classify	Classifies each feature in a collection.	FeatureCollection.classify(classifier, outputName)	FeatureCollection	features|classifier|outputName	"FeatureCollection|Classifier|String, default: ""classification"""	
ee.FeatureCollection.cluster	Clusters each feature in a collection, adding a new column to each feature containing the cluster number to which it has been assigned.	FeatureCollection.cluster(clusterer, outputName)	FeatureCollection	features|clusterer|outputName	"FeatureCollection|Clusterer|String, default: ""cluster"""	
ee.FeatureCollection.copyProperties	Copies metadata properties from one element to another.	FeatureCollection.copyProperties(source, properties, exclude)	Element	destination|source|properties|exclude	Element, default: null|Element, default: null|List, default: null|List, default: null	
ee.FeatureCollection.distance	Produces a DOUBLE image where each pixel is the distance in meters from the pixel center to the nearest Point, LineString, or polygonal boundary in the collection. Note distance is also measured within interiors of polygons. Pixels that are not within 'searchRadius' meters of a geometry will be masked out.	FeatureCollection.distance(searchRadius, maxError)	Image	features|searchRadius|maxError	FeatureCollection|Float, default: 100000|Float, default: 100	
ee.FeatureCollection.distinct	Removes duplicates from a collection. Note that duplicates are determined using a strong hash over the serialized form of the selected properties.	FeatureCollection.distinct(properties)	FeatureCollection	collection|properties	FeatureCollection|Object	
ee.FeatureCollection.draw	Paints a vector collection for visualization. Not intended for use as input to other algorithms.	FeatureCollection.draw(color, pointRadius, strokeWidth)	Image	collection|color|pointRadius|strokeWidth	FeatureCollection|String|Integer, default: 3|Integer, default: 2	
ee.FeatureCollection.errorMatrix	Computes a 2D error matrix for a collection by comparing two columns of a collection: one containing the actual values, and one containing predicted values.The values are expected to be small contiguous integers, starting from 0. Axis 0 (the rows) of the matrix correspond to the actual values, and Axis 1 (the columns) to the predicted values.	FeatureCollection.errorMatrix(actual, predicted, order)	ConfusionMatrix	collection|actual|predicted|order	FeatureCollection|String|String|List, default: null	
ee.FeatureCollection.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	FeatureCollection.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.FeatureCollection.filter	Apply a filter to this collection.	FeatureCollection.filter(filter)	Collection	collection|filter	Collection|Filter	
ee.FeatureCollection.filterBounds	Shortcut to filter a collection by intersection with geometry. Items in the collection with a footprint that fails to intersect the given geometry will be excluded.	FeatureCollection.filterBounds(geometry)	Collection	collection|geometry	Collection|ComputedObject|FeatureCollection|Geometry	
ee.FeatureCollection.filterDate	Shortcut to filter a collection by a date range. The start and end may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). Based on 'system:time_start'.	FeatureCollection.filterDate(start, end)	Collection	collection|start|end	Collection|Date|Number|String|Date|Number|String, optional	
ee.FeatureCollection.first	Returns the first entry from a given collection.	FeatureCollection.first()	Element	collection	FeatureCollection	
ee.FeatureCollection.flatten	Flattens collections of collections.	FeatureCollection.flatten()	FeatureCollection	collection	FeatureCollection	
ee.FeatureCollection.geometry	Extracts and merges the geometries of a collection. Requires that all the geometries in the collection share the projection and edge interpretation.	FeatureCollection.geometry(maxError)	Geometry	collection|maxError	FeatureCollection|ErrorMargin, optional	
ee.FeatureCollection.get	Extract a property from a feature.	FeatureCollection.get(property)		object|property	Element|String	
ee.FeatureCollection.getArray	Extract a property from a feature.	FeatureCollection.getArray(property)	Array	object|property	Element|String	
ee.FeatureCollection.getDownloadURL	Gets a download URL. When the URL is accessed, the FeatureCollection is downloaded in one of several formats.	FeatureCollection.getDownloadURL(format, selectors, filename, callback)	Object|String	featurecollection|format|selectors|filename|callback	FeatureCollection|String, optional|List, optional|String, optional|Function, optional	
ee.FeatureCollection.getInfo	An imperative function that returns all the known information about this collection via an AJAX call.	FeatureCollection.getInfo(callback)	FeatureCollectionDescription	featurecollection|callback	FeatureCollection|Function, optional	
ee.FeatureCollection.getMapId	An imperative function that returns a map ID and optional token, suitable for generating a Map overlay.	FeatureCollection.getMapId(visParams, callback)	MapId|Object	featurecollection|visParams|callback	FeatureCollection|Object, optional|Function, optional	
ee.FeatureCollection.getNumber	Extract a property from a feature.	FeatureCollection.getNumber(property)	Number	object|property	Element|String	
ee.FeatureCollection.getString	Extract a property from a feature.	FeatureCollection.getString(property)	String	object|property	Element|String	
ee.FeatureCollection.inverseDistance	Returns an inverse-distance weighted estimate of the value at each pixel.	FeatureCollection.inverseDistance(range, propertyName, mean, stdDev, gamma, reducer)	Image	collection|range|propertyName|mean|stdDev|gamma|reducer	FeatureCollection|Float|String|Float|Float|Float, default: 1|Reducer, default: null	
ee.FeatureCollection.iterate	Applies a user-supplied function to each element of a collection. The user-supplied function is given two arguments: the current element, and the value returned by the previous call to iterate() or the first argument, for the first iteration. The result is the value returned by the final call to the user-supplied function.	FeatureCollection.iterate(algorithm, first)	ComputedObject	collection|algorithm|first	Collection|Function|Object, optional	
ee.FeatureCollection.kriging	Returns the results of sampling a Kriging estimator at each pixel.	FeatureCollection.kriging(propertyName, shape, range, sill, nugget, maxDistance, reducer)	Image	collection|propertyName|shape|range|sill|nugget|maxDistance|reducer	FeatureCollection|String|String|Float|Float|Float|Float, default: null|Reducer, default: null	
ee.FeatureCollection.limit	Limit a collection to the specified number of elements, optionally sorting them by a specified property first.	FeatureCollection.limit(max, property, ascending)	Collection	collection|max|property|ascending	Collection|Number|String, optional|Boolean, optional	
ee.FeatureCollection.makeArray	Add a 1-D Array to each feature in a collection by combining a list of properties for each feature into a 1-D Array. All of the properties must be numeric values.  If a feature doesn't contain all of the named properties, or any of them aren't numeric, the feature will be dropped from the resulting collection.	FeatureCollection.makeArray(properties, name)	FeatureCollection	collection|properties|name	"FeatureCollection|List|String, default: ""array"""	
ee.FeatureCollection.map	Maps an algorithm over a collection.	FeatureCollection.map(algorithm, dropNulls)	Collection	collection|algorithm|dropNulls	Collection|Function|Boolean, optional	
ee.FeatureCollection.merge	Merges two collections into one. The result has all the elements that were in either collection.	FeatureCollection.merge(collection2)	FeatureCollection	collection1|collection2	FeatureCollection|FeatureCollection	
ee.FeatureCollection.propertyNames	Returns the names of properties on this element.	FeatureCollection.propertyNames()	List	element	Element	
ee.FeatureCollection.randomColumn	Adds a column of deterministic pseudorandom numbers to a collection.  The outputs are double-precision floating point numbers. When using the 'uniform' distribution (default), outputs are in the range of [0, 1). Using the 'normal' distribution, outputs have μ=0, 𝛔=1, but have no explicit limits.	FeatureCollection.randomColumn(columnName, seed, distribution)	FeatureCollection	collection|columnName|seed|distribution	"FeatureCollection|String, default: ""random""|Long, default: 0|String, default: ""uniform"""	
ee.FeatureCollection.randomPoints	Generates points that are uniformly random in the given geometry. If the geometry is two-dimensional (polygon or multi-polygon) then the returned points are uniformly distributed on the given region of the sphere. If the geometry is one-dimensional (linestrings), the returned points are interpolated uniformly along the geometry's edges. If the geometry has dimension zero (points), the returned points are sampled uniformly from the input points. If a multi-geometry of mixed dimension is given, points are sampled from the component geometries with the highest dimension.	ee.FeatureCollection.randomPoints(region, points, seed, maxError)	FeatureCollection	region|points|seed|maxError	Geometry|Integer, default: 1000|Long, default: 0|ErrorMargin, optional	
ee.FeatureCollection.reduceColumns	Apply a reducer to each element of a collection, using the given selectors to determine the inputs.	FeatureCollection.reduceColumns(reducer, selectors, weightSelectors)	Dictionary	collection|reducer|selectors|weightSelectors	FeatureCollection|Reducer|List|List, default: null	
ee.FeatureCollection.reduceToImage	Creates an image from a feature collection by applying a reducer over the selected properties of all the features that intersect each pixel.	FeatureCollection.reduceToImage(properties, reducer)	Image	collection|properties|reducer	FeatureCollection|List|Reducer	
ee.FeatureCollection.remap	Remaps the value of a specific property in a collection. Takes two parallel lists and maps values found in one to values in the other. Any element with a value that is not specified in the first list is dropped from the output collection.	FeatureCollection.remap(lookupIn, lookupOut, columnName)	FeatureCollection	collection|lookupIn|lookupOut|columnName	FeatureCollection|List|List|String	
ee.FeatureCollection.select	Select properties from each Feature in a collection.  It is also possible to call this function with only string arguments; they will be all be interpreted as propertySelectors (varargs).	FeatureCollection.select(propertySelectors, newProperties, retainGeometry)	FeatureCollection	featurecollection|propertySelectors|newProperties|retainGeometry	FeatureCollection|List|List, optional|Boolean, optional	
ee.FeatureCollection.serialize	Returns the serialized representation of this object.	FeatureCollection.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.FeatureCollection.set	Overrides one or more metadata properties of an Element.	FeatureCollection.set(var_args)	Element	element|var_args	Element|VarArgs	
ee.FeatureCollection.size	Returns the number of elements in the collection.	FeatureCollection.size()	Integer	collection	FeatureCollection	
ee.FeatureCollection.sort	Sort a collection by the specified property.	FeatureCollection.sort(property, ascending)	Collection	collection|property|ascending	Collection|String|Boolean, optional	
ee.FeatureCollection.style	Draw a vector collection for visualization using a simple style language.	FeatureCollection.style(color, pointSize, pointShape, width, fillColor, styleProperty, neighborhood, lineType)	Image	collection|color|pointSize|pointShape|width|fillColor|styleProperty|neighborhood|lineType	"FeatureCollection|String, default: ""black""|Integer, default: 3|String, default: ""circle""|Float, default: 2|String, default: null|String, default: null|Integer, default: 5|String, default: ""solid"""	
ee.FeatureCollection.toDictionary	Extract properties from a feature as a dictionary.	FeatureCollection.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	
ee.FeatureCollection.toList	Returns the elements of a collection as a list.	FeatureCollection.toList(count, offset)	List	collection|count|offset	FeatureCollection|Integer|Integer, default: 0	
ee.FeatureCollection.union	Merges all geometries in a given collection into one and returns a collection containing a single feature with only an ID of 'union_result' and a geometry.	FeatureCollection.union(maxError)	FeatureCollection	collection|maxError	FeatureCollection|ErrorMargin, default: null	
ee.Filter	Constructs a new filter. This constructor accepts the following args:	ee.Filter(filter)	Filter	filter	Filter|List, optional	
ee.Filter.and	Combine two or more filters using boolean AND.	ee.Filter.and(var_args)	Filter	var_args	VarArgs	
ee.Filter.area	Returns a filter that passes if the specified geometry has an area within the given range (inclusive).	ee.Filter.area(min, max, maxError, geometrySelector)	Filter	min|max|maxError|geometrySelector	Float|Float|ErrorMargin, default: null|String, default: null	
ee.Filter.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Filter.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Filter.bounds	Creates a filter that passes if the object's geometry intersects the given geometry.	ee.Filter.bounds(geometry, errorMargin)	Filter	geometry|errorMargin	ComputedObject|FeatureCollection|Geometry|ComputedObject|Number, optional	
ee.Filter.calendarRange	Returns a filter that passes if the object's timestamp falls within the given range of a calendar field. The month, day_of_year, day_of_month, and day_of_week are 1-based. Times are assumed to be in UTC. Weeks are assumed to begin on Monday as day 1. If end < start then this tests for value >= start OR value <= end, to allow for wrapping.	ee.Filter.calendarRange(start, end, field)	Filter	start|end|field	"Integer|Integer, default: null|String, default: ""day_of_year"""	
ee.Filter.contains	Creates a unary or binary filter that passes if the left geometry contains the right geometry (empty geometries are not contained in anything).	ee.Filter.contains(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	
ee.Filter.date	Filter a collection by date range. The start and end may be Dates, numbers	ee.Filter.date(start, end)	Filter	start|end	Date|Number|String|Date|Number|String, optional	
ee.Filter.dateRangeContains	Creates a unary or binary filter that passes if the left operand, a date range, contains the right operand, a date.	ee.Filter.dateRangeContains(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.dayOfYear	Returns a filter that passes if the object's timestamp falls within the given day-of-year range.	ee.Filter.dayOfYear(start, end)	Filter	start|end	Integer|Integer	
ee.Filter.disjoint	Creates a unary or binary filter that passes unless the left geometry intersects the right geometry.	ee.Filter.disjoint(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	
ee.Filter.eq	Filter to metadata equal to the given value.	ee.Filter.eq(name, value)	Filter	name|value	String|Object	
ee.Filter.equals	Creates a unary or binary filter that passes if the two operands are equals.	ee.Filter.equals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Filter.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Filter.expression	Constructs a filter tree from a string.	ee.Filter.expression(expression)	Filter	expression	String	
ee.Filter.getInfo	Retrieves the value of this object from the server.	Filter.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Filter.greaterThan	Creates a unary or binary filter that passes if the left operand is greater than the right operand.	ee.Filter.greaterThan(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.greaterThanOrEquals	Creates a unary or binary filter that passes unless the left operand is less than the right operand.	ee.Filter.greaterThanOrEquals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.gt	Filter on metadata greater than the given value.	ee.Filter.gt(name, value)	Filter	name|value	String|Object	
ee.Filter.gte	Filter on metadata greater than or equal to the given value.	ee.Filter.gte(name, value)	Filter	name|value	String|Object	
ee.Filter.hasType	Creates a unary or binary filter that passes if the left operand has the type, or is a subtype of the type named in the right operand.	ee.Filter.hasType(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.inList	Filter on metadata contained in a list.	ee.Filter.inList(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, optional|List, optional|String, optional|List, optional	
ee.Filter.intersects	Creates a unary or binary filter that passes if the left geometry intersects the right geometry.	ee.Filter.intersects(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	
ee.Filter.isContained	Creates a unary or binary filter that passes if the right geometry contains the left geometry (empty geometries are not contained in anything).	ee.Filter.isContained(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	
ee.Filter.lessThan	Creates a unary or binary filter that passes if the left operand is less than the right operand.	ee.Filter.lessThan(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.lessThanOrEquals	Creates a unary or binary filter that passes unless the left operand is greater than the right operand.	ee.Filter.lessThanOrEquals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.listContains	Creates a unary or binary filter that passes if the left operand, a list, contains the right operand.	ee.Filter.listContains(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.lt	Filter to metadata less than the given value.	ee.Filter.lt(name, value)	Filter	name|value	String|Object	
ee.Filter.lte	Filter on metadata less than or equal to the given value.	ee.Filter.lte(name, value)	Filter	name|value	String|Object	
ee.Filter.maxDifference	Creates a unary or binary filter that passes if the left and right operands, both numbers, are within a given maximum difference. If used as a join condition, this numeric difference is used as a join measure.	ee.Filter.maxDifference(difference, leftField, rightValue, rightField, leftValue)	Filter	difference|leftField|rightValue|rightField|leftValue	Float|String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.neq	Filter to metadata not equal to the given value.	ee.Filter.neq(name, value)	Filter	name|value	String|Object	
ee.Filter.not	Returns the opposite of the input filter, i.e. the resulting filter will match if and only if the input filter doesn't match.	Filter.not()	Filter	filter	Filter	
ee.Filter.notEquals	Creates a unary or binary filter that passes unless the two operands are equals.	ee.Filter.notEquals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.notNull	Returns a filter that passes if all the named properties are not null.	ee.Filter.notNull(properties)	Filter	properties	List	
ee.Filter.or	Combine two or more filters using boolean OR.	ee.Filter.or(var_args)	Filter	var_args	VarArgs	
ee.Filter.rangeContains	Returns a filter that passes if the value of the selected field is in the specified range (inclusive).	ee.Filter.rangeContains(field, minValue, maxValue)	Filter	field|minValue|maxValue	String|Object|Object	
ee.Filter.serialize	Returns the serialized representation of this object.	Filter.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.Filter.stringContains	Creates a unary or binary filter that passes if the left operand, a string, contains the right operand, also a string.	ee.Filter.stringContains(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.stringEndsWith	Creates a unary or binary filter that passes if the left operand, a string, ends with the right operand, also a string.	ee.Filter.stringEndsWith(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.stringStartsWith	Creates a unary or binary filter that passes if the left operand, a string, starts with the right operand, also a string.	ee.Filter.stringStartsWith(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	
ee.Filter.withinDistance	Creates a unary or binary filter that passes if the left geometry is within a specified distance of the right geometry. If used as a join condition, this distance is used as a join measure.	ee.Filter.withinDistance(distance, leftField, rightValue, rightField, leftValue, maxError)	Filter	distance|leftField|rightValue|rightField|leftValue|maxError	Float|String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	
ee.Geometry	Creates a geometry.	ee.Geometry(geoJson, proj, geodesic, evenOdd)	Geometry	geoJson|proj|geodesic|evenOdd	Object|Projection, optional|Boolean, optional|Boolean, optional	
ee.Geometry.BBox	Constructs a rectangle whose edges are lines of latitude and longitude.	ee.Geometry.BBox(west, south, east, north)	Geometry.BBox	west|south|east|north	Number|Number|Number|Number	
ee.Geometry.BBox.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	BBox.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	BBox.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.BBox.bounds	Returns the bounding rectangle of the geometry.	BBox.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	BBox.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	BBox.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.containedIn	Returns true if and only if one geometry is contained in the other.	BBox.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.contains	Returns true if and only if one geometry contains the other.	BBox.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	BBox.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	BBox.coordinates()	List	geometry	Geometry	
ee.Geometry.BBox.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	BBox.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.BBox.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	BBox.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	BBox.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.disjoint	Returns true if and only if the geometries are disjoint.	BBox.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	BBox.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.distance	Returns the minimum distance between two geometries.	BBox.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	BBox.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.BBox.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	BBox.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.BBox.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	BBox.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.BBox.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	BBox.geometries()	List	geometry	Geometry	
ee.Geometry.BBox.getInfo	Retrieves the value of this object from the server.	BBox.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.BBox.intersection	Returns the intersection of the two geometries.	BBox.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.intersects	Returns true if and only if the geometries intersect.	BBox.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.isUnbounded	Returns whether the geometry is unbounded.	BBox.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.BBox.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	BBox.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	BBox.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.projection	Returns the projection of the geometry.	BBox.projection()	Projection	geometry	Geometry	
ee.Geometry.BBox.serialize	Returns the serialized representation of this object.	BBox.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.BBox.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	BBox.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.BBox.symmetricDifference	Returns the symmetric difference between two geometries.	BBox.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.toGeoJSON	Returns a GeoJSON representation of the geometry.	BBox.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.BBox.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	BBox.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.BBox.transform	Transforms the geometry to a specific projection.	BBox.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.BBox.type	Returns the GeoJSON type of the geometry.	BBox.type()	String	geometry	Geometry	
ee.Geometry.BBox.union	Returns the union of the two geometries.	BBox.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.BBox.withinDistance	Returns true if and only if the geometries are within a specified distance.	BBox.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString	Constructs an ee.Geometry describing a LineString.	ee.Geometry.LineString(coords, proj, geodesic, maxError)	Geometry.LineString	coords|proj|geodesic|maxError	List|Projection, optional|Boolean, optional|ErrorMargin, optional	
ee.Geometry.LineString.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	LineString.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	LineString.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.LineString.bounds	Returns the bounding rectangle of the geometry.	LineString.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	LineString.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	LineString.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.containedIn	Returns true if and only if one geometry is contained in the other.	LineString.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.contains	Returns true if and only if one geometry contains the other.	LineString.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	LineString.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	LineString.coordinates()	List	geometry	Geometry	
ee.Geometry.LineString.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	LineString.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.LineString.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	LineString.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	LineString.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.disjoint	Returns true if and only if the geometries are disjoint.	LineString.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	LineString.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.distance	Returns the minimum distance between two geometries.	LineString.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	LineString.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.LineString.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	LineString.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.LineString.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	LineString.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.LineString.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	LineString.geometries()	List	geometry	Geometry	
ee.Geometry.LineString.getInfo	Retrieves the value of this object from the server.	LineString.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.LineString.intersection	Returns the intersection of the two geometries.	LineString.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.intersects	Returns true if and only if the geometries intersect.	LineString.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.isUnbounded	Returns whether the geometry is unbounded.	LineString.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.LineString.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	LineString.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	LineString.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.projection	Returns the projection of the geometry.	LineString.projection()	Projection	geometry	Geometry	
ee.Geometry.LineString.serialize	Returns the serialized representation of this object.	LineString.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.LineString.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	LineString.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.LineString.symmetricDifference	Returns the symmetric difference between two geometries.	LineString.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.toGeoJSON	Returns a GeoJSON representation of the geometry.	LineString.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.LineString.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	LineString.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.LineString.transform	Transforms the geometry to a specific projection.	LineString.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.LineString.type	Returns the GeoJSON type of the geometry.	LineString.type()	String	geometry	Geometry	
ee.Geometry.LineString.union	Returns the union of the two geometries.	LineString.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LineString.withinDistance	Returns true if and only if the geometries are within a specified distance.	LineString.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing	Constructs an ee.Geometry describing a LinearRing. If the last point is not equal to the first, a duplicate of the first point will be added at the end.	ee.Geometry.LinearRing(coords, proj, geodesic, maxError)	Geometry.LinearRing	coords|proj|geodesic|maxError	List|Projection, optional|Boolean, optional|ErrorMargin, optional	
ee.Geometry.LinearRing.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	LinearRing.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	LinearRing.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.LinearRing.bounds	Returns the bounding rectangle of the geometry.	LinearRing.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	LinearRing.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	LinearRing.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.containedIn	Returns true if and only if one geometry is contained in the other.	LinearRing.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.contains	Returns true if and only if one geometry contains the other.	LinearRing.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	LinearRing.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	LinearRing.coordinates()	List	geometry	Geometry	
ee.Geometry.LinearRing.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	LinearRing.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.LinearRing.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	LinearRing.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	LinearRing.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.disjoint	Returns true if and only if the geometries are disjoint.	LinearRing.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	LinearRing.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.distance	Returns the minimum distance between two geometries.	LinearRing.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	LinearRing.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.LinearRing.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	LinearRing.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.LinearRing.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	LinearRing.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.LinearRing.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	LinearRing.geometries()	List	geometry	Geometry	
ee.Geometry.LinearRing.getInfo	Retrieves the value of this object from the server.	LinearRing.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.LinearRing.intersection	Returns the intersection of the two geometries.	LinearRing.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.intersects	Returns true if and only if the geometries intersect.	LinearRing.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.isUnbounded	Returns whether the geometry is unbounded.	LinearRing.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.LinearRing.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	LinearRing.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	LinearRing.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.projection	Returns the projection of the geometry.	LinearRing.projection()	Projection	geometry	Geometry	
ee.Geometry.LinearRing.serialize	Returns the serialized representation of this object.	LinearRing.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.LinearRing.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	LinearRing.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.LinearRing.symmetricDifference	Returns the symmetric difference between two geometries.	LinearRing.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.toGeoJSON	Returns a GeoJSON representation of the geometry.	LinearRing.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.LinearRing.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	LinearRing.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.LinearRing.transform	Transforms the geometry to a specific projection.	LinearRing.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.LinearRing.type	Returns the GeoJSON type of the geometry.	LinearRing.type()	String	geometry	Geometry	
ee.Geometry.LinearRing.union	Returns the union of the two geometries.	LinearRing.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.LinearRing.withinDistance	Returns true if and only if the geometries are within a specified distance.	LinearRing.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString	Constructs an ee.Geometry describing a MultiLineString.	ee.Geometry.MultiLineString(coords, proj, geodesic, maxError)	Geometry.MultiLineString	coords|proj|geodesic|maxError	List|Projection, optional|Boolean, optional|ErrorMargin, optional	
ee.Geometry.MultiLineString.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	MultiLineString.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	MultiLineString.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.MultiLineString.bounds	Returns the bounding rectangle of the geometry.	MultiLineString.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	MultiLineString.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	MultiLineString.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.containedIn	Returns true if and only if one geometry is contained in the other.	MultiLineString.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.contains	Returns true if and only if one geometry contains the other.	MultiLineString.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	MultiLineString.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	MultiLineString.coordinates()	List	geometry	Geometry	
ee.Geometry.MultiLineString.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	MultiLineString.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.MultiLineString.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	MultiLineString.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	MultiLineString.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.disjoint	Returns true if and only if the geometries are disjoint.	MultiLineString.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	MultiLineString.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.distance	Returns the minimum distance between two geometries.	MultiLineString.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	MultiLineString.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.MultiLineString.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	MultiLineString.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.MultiLineString.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	MultiLineString.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.MultiLineString.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	MultiLineString.geometries()	List	geometry	Geometry	
ee.Geometry.MultiLineString.getInfo	Retrieves the value of this object from the server.	MultiLineString.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.MultiLineString.intersection	Returns the intersection of the two geometries.	MultiLineString.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.intersects	Returns true if and only if the geometries intersect.	MultiLineString.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.isUnbounded	Returns whether the geometry is unbounded.	MultiLineString.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.MultiLineString.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	MultiLineString.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	MultiLineString.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.projection	Returns the projection of the geometry.	MultiLineString.projection()	Projection	geometry	Geometry	
ee.Geometry.MultiLineString.serialize	Returns the serialized representation of this object.	MultiLineString.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.MultiLineString.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	MultiLineString.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.MultiLineString.symmetricDifference	Returns the symmetric difference between two geometries.	MultiLineString.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.toGeoJSON	Returns a GeoJSON representation of the geometry.	MultiLineString.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.MultiLineString.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	MultiLineString.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.MultiLineString.transform	Transforms the geometry to a specific projection.	MultiLineString.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.MultiLineString.type	Returns the GeoJSON type of the geometry.	MultiLineString.type()	String	geometry	Geometry	
ee.Geometry.MultiLineString.union	Returns the union of the two geometries.	MultiLineString.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiLineString.withinDistance	Returns true if and only if the geometries are within a specified distance.	MultiLineString.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint	Constructs an ee.Geometry describing a MultiPoint.	ee.Geometry.MultiPoint(coords, proj)	Geometry.MultiPoint	coords|proj	List|Projection, optional	
ee.Geometry.MultiPoint.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	MultiPoint.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	MultiPoint.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.MultiPoint.bounds	Returns the bounding rectangle of the geometry.	MultiPoint.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	MultiPoint.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	MultiPoint.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.containedIn	Returns true if and only if one geometry is contained in the other.	MultiPoint.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.contains	Returns true if and only if one geometry contains the other.	MultiPoint.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	MultiPoint.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	MultiPoint.coordinates()	List	geometry	Geometry	
ee.Geometry.MultiPoint.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	MultiPoint.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.MultiPoint.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	MultiPoint.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	MultiPoint.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.disjoint	Returns true if and only if the geometries are disjoint.	MultiPoint.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	MultiPoint.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.distance	Returns the minimum distance between two geometries.	MultiPoint.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	MultiPoint.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.MultiPoint.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	MultiPoint.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.MultiPoint.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	MultiPoint.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.MultiPoint.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	MultiPoint.geometries()	List	geometry	Geometry	
ee.Geometry.MultiPoint.getInfo	Retrieves the value of this object from the server.	MultiPoint.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.MultiPoint.intersection	Returns the intersection of the two geometries.	MultiPoint.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.intersects	Returns true if and only if the geometries intersect.	MultiPoint.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.isUnbounded	Returns whether the geometry is unbounded.	MultiPoint.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.MultiPoint.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	MultiPoint.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	MultiPoint.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.projection	Returns the projection of the geometry.	MultiPoint.projection()	Projection	geometry	Geometry	
ee.Geometry.MultiPoint.serialize	Returns the serialized representation of this object.	MultiPoint.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.MultiPoint.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	MultiPoint.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.MultiPoint.symmetricDifference	Returns the symmetric difference between two geometries.	MultiPoint.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.toGeoJSON	Returns a GeoJSON representation of the geometry.	MultiPoint.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.MultiPoint.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	MultiPoint.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.MultiPoint.transform	Transforms the geometry to a specific projection.	MultiPoint.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.MultiPoint.type	Returns the GeoJSON type of the geometry.	MultiPoint.type()	String	geometry	Geometry	
ee.Geometry.MultiPoint.union	Returns the union of the two geometries.	MultiPoint.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPoint.withinDistance	Returns true if and only if the geometries are within a specified distance.	MultiPoint.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon	Constructs an ee.Geometry describing a MultiPolygon.	ee.Geometry.MultiPolygon(coords, proj, geodesic, maxError, evenOdd)	Geometry.MultiPolygon	coords|proj|geodesic|maxError|evenOdd	List|Projection, optional|Boolean, optional|ErrorMargin, optional|Boolean, optional	
ee.Geometry.MultiPolygon.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	MultiPolygon.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	MultiPolygon.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.MultiPolygon.bounds	Returns the bounding rectangle of the geometry.	MultiPolygon.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	MultiPolygon.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	MultiPolygon.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.containedIn	Returns true if and only if one geometry is contained in the other.	MultiPolygon.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.contains	Returns true if and only if one geometry contains the other.	MultiPolygon.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	MultiPolygon.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	MultiPolygon.coordinates()	List	geometry	Geometry	
ee.Geometry.MultiPolygon.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	MultiPolygon.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.MultiPolygon.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	MultiPolygon.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	MultiPolygon.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.disjoint	Returns true if and only if the geometries are disjoint.	MultiPolygon.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	MultiPolygon.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.distance	Returns the minimum distance between two geometries.	MultiPolygon.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	MultiPolygon.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.MultiPolygon.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	MultiPolygon.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.MultiPolygon.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	MultiPolygon.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.MultiPolygon.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	MultiPolygon.geometries()	List	geometry	Geometry	
ee.Geometry.MultiPolygon.getInfo	Retrieves the value of this object from the server.	MultiPolygon.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.MultiPolygon.intersection	Returns the intersection of the two geometries.	MultiPolygon.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.intersects	Returns true if and only if the geometries intersect.	MultiPolygon.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.isUnbounded	Returns whether the geometry is unbounded.	MultiPolygon.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.MultiPolygon.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	MultiPolygon.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	MultiPolygon.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.projection	Returns the projection of the geometry.	MultiPolygon.projection()	Projection	geometry	Geometry	
ee.Geometry.MultiPolygon.serialize	Returns the serialized representation of this object.	MultiPolygon.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.MultiPolygon.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	MultiPolygon.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.MultiPolygon.symmetricDifference	Returns the symmetric difference between two geometries.	MultiPolygon.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.toGeoJSON	Returns a GeoJSON representation of the geometry.	MultiPolygon.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.MultiPolygon.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	MultiPolygon.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.MultiPolygon.transform	Transforms the geometry to a specific projection.	MultiPolygon.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.MultiPolygon.type	Returns the GeoJSON type of the geometry.	MultiPolygon.type()	String	geometry	Geometry	
ee.Geometry.MultiPolygon.union	Returns the union of the two geometries.	MultiPolygon.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.MultiPolygon.withinDistance	Returns true if and only if the geometries are within a specified distance.	MultiPolygon.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point	Constructs an ee.Geometry describing a point.	ee.Geometry.Point(coords, proj)	Geometry.Point	coords|proj	List|Projection, optional	
ee.Geometry.Point.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	Point.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Point.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.Point.bounds	Returns the bounding rectangle of the geometry.	Point.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Point.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Point.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.containedIn	Returns true if and only if one geometry is contained in the other.	Point.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.contains	Returns true if and only if one geometry contains the other.	Point.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Point.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Point.coordinates()	List	geometry	Geometry	
ee.Geometry.Point.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	Point.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.Point.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	Point.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Point.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.disjoint	Returns true if and only if the geometries are disjoint.	Point.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Point.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.distance	Returns the minimum distance between two geometries.	Point.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Point.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.Point.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Point.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.Point.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Point.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.Point.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Point.geometries()	List	geometry	Geometry	
ee.Geometry.Point.getInfo	Retrieves the value of this object from the server.	Point.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.Point.intersection	Returns the intersection of the two geometries.	Point.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.intersects	Returns true if and only if the geometries intersect.	Point.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.isUnbounded	Returns whether the geometry is unbounded.	Point.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.Point.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Point.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Point.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.projection	Returns the projection of the geometry.	Point.projection()	Projection	geometry	Geometry	
ee.Geometry.Point.serialize	Returns the serialized representation of this object.	Point.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.Point.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Point.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.Point.symmetricDifference	Returns the symmetric difference between two geometries.	Point.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.toGeoJSON	Returns a GeoJSON representation of the geometry.	Point.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.Point.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Point.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.Point.transform	Transforms the geometry to a specific projection.	Point.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.Point.type	Returns the GeoJSON type of the geometry.	Point.type()	String	geometry	Geometry	
ee.Geometry.Point.union	Returns the union of the two geometries.	Point.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Point.withinDistance	Returns true if and only if the geometries are within a specified distance.	Point.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon	Constructs an ee.Geometry describing a polygon.	ee.Geometry.Polygon(coords, proj, geodesic, maxError, evenOdd)	Geometry.Polygon	coords|proj|geodesic|maxError|evenOdd	List|Projection, optional|Boolean, optional|ErrorMargin, optional|Boolean, optional	
ee.Geometry.Polygon.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	Polygon.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Polygon.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.Polygon.bounds	Returns the bounding rectangle of the geometry.	Polygon.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Polygon.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Polygon.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.containedIn	Returns true if and only if one geometry is contained in the other.	Polygon.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.contains	Returns true if and only if one geometry contains the other.	Polygon.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Polygon.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Polygon.coordinates()	List	geometry	Geometry	
ee.Geometry.Polygon.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	Polygon.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.Polygon.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	Polygon.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Polygon.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.disjoint	Returns true if and only if the geometries are disjoint.	Polygon.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Polygon.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.distance	Returns the minimum distance between two geometries.	Polygon.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Polygon.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.Polygon.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Polygon.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.Polygon.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Polygon.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.Polygon.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Polygon.geometries()	List	geometry	Geometry	
ee.Geometry.Polygon.getInfo	Retrieves the value of this object from the server.	Polygon.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.Polygon.intersection	Returns the intersection of the two geometries.	Polygon.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.intersects	Returns true if and only if the geometries intersect.	Polygon.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.isUnbounded	Returns whether the geometry is unbounded.	Polygon.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.Polygon.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Polygon.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Polygon.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.projection	Returns the projection of the geometry.	Polygon.projection()	Projection	geometry	Geometry	
ee.Geometry.Polygon.serialize	Returns the serialized representation of this object.	Polygon.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.Polygon.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Polygon.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.Polygon.symmetricDifference	Returns the symmetric difference between two geometries.	Polygon.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.toGeoJSON	Returns a GeoJSON representation of the geometry.	Polygon.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.Polygon.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Polygon.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.Polygon.transform	Transforms the geometry to a specific projection.	Polygon.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.Polygon.type	Returns the GeoJSON type of the geometry.	Polygon.type()	String	geometry	Geometry	
ee.Geometry.Polygon.union	Returns the union of the two geometries.	Polygon.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Polygon.withinDistance	Returns true if and only if the geometries are within a specified distance.	Polygon.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle	Constructs an ee.Geometry describing a rectangular polygon.	ee.Geometry.Rectangle(coords, proj, geodesic, evenOdd)	Geometry.Rectangle	coords|proj|geodesic|evenOdd	List|Projection, optional|Boolean, optional|Boolean, optional	
ee.Geometry.Rectangle.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	Rectangle.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Rectangle.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.Rectangle.bounds	Returns the bounding rectangle of the geometry.	Rectangle.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Rectangle.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Rectangle.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.containedIn	Returns true if and only if one geometry is contained in the other.	Rectangle.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.contains	Returns true if and only if one geometry contains the other.	Rectangle.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Rectangle.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Rectangle.coordinates()	List	geometry	Geometry	
ee.Geometry.Rectangle.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	Rectangle.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.Rectangle.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	Rectangle.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Rectangle.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.disjoint	Returns true if and only if the geometries are disjoint.	Rectangle.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Rectangle.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.distance	Returns the minimum distance between two geometries.	Rectangle.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Rectangle.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.Rectangle.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Rectangle.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.Rectangle.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Rectangle.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.Rectangle.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Rectangle.geometries()	List	geometry	Geometry	
ee.Geometry.Rectangle.getInfo	Retrieves the value of this object from the server.	Rectangle.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.Rectangle.intersection	Returns the intersection of the two geometries.	Rectangle.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.intersects	Returns true if and only if the geometries intersect.	Rectangle.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.isUnbounded	Returns whether the geometry is unbounded.	Rectangle.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.Rectangle.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Rectangle.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Rectangle.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.projection	Returns the projection of the geometry.	Rectangle.projection()	Projection	geometry	Geometry	
ee.Geometry.Rectangle.serialize	Returns the serialized representation of this object.	Rectangle.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.Rectangle.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Rectangle.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.Rectangle.symmetricDifference	Returns the symmetric difference between two geometries.	Rectangle.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.toGeoJSON	Returns a GeoJSON representation of the geometry.	Rectangle.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.Rectangle.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Rectangle.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.Rectangle.transform	Transforms the geometry to a specific projection.	Rectangle.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.Rectangle.type	Returns the GeoJSON type of the geometry.	Rectangle.type()	String	geometry	Geometry	
ee.Geometry.Rectangle.union	Returns the union of the two geometries.	Rectangle.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.Rectangle.withinDistance	Returns true if and only if the geometries are within a specified distance.	Rectangle.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their components (intersecting areas are counted multiple times).	Geometry.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Geometry.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Geometry.bounds	Returns the bounding rectangle of the geometry.	Geometry.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Geometry.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Geometry.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.containedIn	Returns true if and only if one geometry is contained in the other.	Geometry.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.contains	Returns true if and only if one geometry contains the other.	Geometry.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Geometry.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Geometry.coordinates()	List	geometry	Geometry	
ee.Geometry.coveringGrid	Returns a collection of features that cover this geometry, where each feature is a rectangle in the grid defined by the given projection.	Geometry.coveringGrid(proj, scale)	FeatureCollection	geometry|proj|scale	Geometry|Projection|Float, default: null	
ee.Geometry.cutLines	Converts LineString, MultiLineString, and LinearRing geometries into a MultiLineString by cutting them into parts no longer than the given distance along their length. All other geometry types will be converted to an empty MultiLineString.	Geometry.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Geometry.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.disjoint	Returns true if and only if the geometries are disjoint.	Geometry.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Geometry.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.distance	Returns the minimum distance between two geometries.	Geometry.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Geometry.edgesAreGeodesics()	Boolean	geometry	Geometry	
ee.Geometry.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Geometry.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Geometry.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Geometry.geodesic()	Boolean	geometry	Geometry	
ee.Geometry.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Geometry.geometries()	List	geometry	Geometry	
ee.Geometry.getInfo	Retrieves the value of this object from the server.	Geometry.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Geometry.intersection	Returns the intersection of the two geometries.	Geometry.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.intersects	Returns true if and only if the geometries intersect.	Geometry.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.isUnbounded	Returns whether the geometry is unbounded.	Geometry.isUnbounded()	Boolean	geometry	Geometry	
ee.Geometry.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Geometry.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Geometry.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.projection	Returns the projection of the geometry.	Geometry.projection()	Projection	geometry	Geometry	
ee.Geometry.serialize	Returns the serialized representation of this object.	Geometry.serialize(legacy)	String	geometry|legacy	Geometry|Boolean, optional	
ee.Geometry.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Geometry.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	
ee.Geometry.symmetricDifference	Returns the symmetric difference between two geometries.	Geometry.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.toGeoJSON	Returns a GeoJSON representation of the geometry.	Geometry.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	
ee.Geometry.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Geometry.toGeoJSONString()	String	geometry	Geometry	
ee.Geometry.transform	Transforms the geometry to a specific projection.	Geometry.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	
ee.Geometry.type	Returns the GeoJSON type of the geometry.	Geometry.type()	String	geometry	Geometry	
ee.Geometry.union	Returns the union of the two geometries.	Geometry.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	
ee.Geometry.withinDistance	Returns true if and only if the geometries are within a specified distance.	Geometry.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	
ee.Image	An object to represent an Earth Engine image. This constructor accepts a variety of arguments:	ee.Image(args)	Image	args	Image|List, optional	
ee.Image.abs	Computes the absolute value of the input.	Image.abs()	Image	value	Image	
ee.Image.acos	Computes the arc cosine in radians of the input.	Image.acos()	Image	value	Image	
ee.Image.add	Adds the first value to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.add(image2)	Image	image1|image2	Image|Image	
ee.Image.addBands	Returns an image containing all bands copied from the first input and selected bands from the second input, optionally overwriting bands in the first image with the same name. The new image has the metadata and footprint from the first input image.	Image.addBands(srcImg, names, overwrite)	Image	dstImg|srcImg|names|overwrite	Image|Image|List, default: null|Boolean, default: false	
ee.Image.and	Returns 1 if and only if both values are non-zero for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.and(image2)	Image	image1|image2	Image|Image	
ee.Image.arrayAccum	Accumulates elements of each array pixel along the given axis, by setting each element of the result array pixel to the reduction of elements in that pixel along the given axis, up to and including the current position on the axis. May be used to make a cumulative sum, a monotonically increasing sequence, etc.	Image.arrayAccum(axis, reducer)	Image	input|axis|reducer	Image|Integer|Reducer, default: null	
ee.Image.arrayArgmax	Computes the positional indices of the maximum value in image of array values. If there are multiple occurrences of the maximum, the indices reflect the first.	Image.arrayArgmax()	Image	image	Image	
ee.Image.arrayCat	Creates an array image by concatenating each array pixel along the given axis in each band.	Image.arrayCat(image2, axis)	Image	image1|image2|axis	Image|Image|Integer	
ee.Image.arrayDimensions	Returns the number of dimensions in each array band, and 0 for scalar image bands.	Image.arrayDimensions()	Image	input	Image	
ee.Image.arrayDotProduct	Computes the dot product of each pair of 1-D arrays in the bands of the input images.	Image.arrayDotProduct(image2)	Image	image1|image2	Image|Image	
ee.Image.arrayFlatten	Converts a single band image of equal-shape multidimensional pixels to an image of scalar pixels, with one band for each element of the array.	Image.arrayFlatten(coordinateLabels, separator)	Image	image|coordinateLabels|separator	"Image|List|String, default: ""_"""	
ee.Image.arrayGet	For each band, an output band of the same name is created with the value at the given position extracted from the input multidimensional pixel in that band.	Image.arrayGet(position)	Image	image|position	Image|Image	
ee.Image.arrayLength	Returns the length of each pixel's array along the given axis.	Image.arrayLength(axis)	Image	input|axis	Image|Integer	
ee.Image.arrayLengths	Returns a 1D array image with the length of each array axis.	Image.arrayLengths()	Image	input	Image	
ee.Image.arrayMask	Creates an array image where each array-valued pixel is masked with another array-valued pixel, retaining only the elements where the mask is non-zero. If the mask image has one band it will be applied to all the bands of 'input', otherwise they must have the same number of bands.	Image.arrayMask(mask)	Image	input|mask	Image|Image	
ee.Image.arrayPad	Pads the array values in each pixel to be a fixed length. The pad value will be appended to each array to extend it to given length along each axis.  All bands of the image must be array-valued and have the same dimensions.	Image.arrayPad(lengths, pad)	Image	image|lengths|pad	Image|List|Number, default: 0	
ee.Image.arrayProject	Projects the array in each pixel to a lower dimensional space by specifying the axes to retain. Dropped axes must be at most length 1.	Image.arrayProject(axes)	Image	input|axes	Image|List	
ee.Image.arrayReduce	Reduces elements of each array pixel.	Image.arrayReduce(reducer, axes, fieldAxis)	Image	input|reducer|axes|fieldAxis	Image|Reducer|List|Integer, default: null	
ee.Image.arrayRepeat	Repeats each array pixel along the given axis. Each output pixel will have the shape of the input pixel, except length along the repeated axis, which will be multiplied by the number of copies.	Image.arrayRepeat(axis, copies)	Image	input|axis|copies	Image|Integer|Image	
ee.Image.arrayReshape	Converts array bands of an image with equally-shaped, possibly multidimensional pixels to an image of arrays with a new shape.	Image.arrayReshape(lengths, dimensions)	Image	image|lengths|dimensions	Image|Image|Integer	
ee.Image.arraySlice	Creates a subarray by slicing out each position along the given axis from the 'start' (inclusive) to 'end' (exclusive) by increments of 'step'. The result will have as many dimensions as the input, and the same length in all directions except the slicing axis, where the length will be the number of positions from 'start' to 'end' by 'step' that are in range of the input array's length along 'axis'. This means the result can be length 0 along the given axis if start=end, or if the start or end values are entirely out of range.	Image.arraySlice(axis, start, end, step)	Image	input|axis|start|end|step	Image|Integer, default: 0|Image, default: null|Image, default: null|Integer, default: 1	
ee.Image.arraySort	Sorts elements of each array pixel along one axis.	Image.arraySort(keys)	Image	image|keys	Image|Image, default: null	
ee.Image.arrayTranspose	Transposes two dimensions of each array pixel.	Image.arrayTranspose(axis1, axis2)	Image	input|axis1|axis2	Image|Integer, default: 0|Integer, default: 1	
ee.Image.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Image.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Image.asin	Computes the arc sine in radians of the input.	Image.asin()	Image	value	Image	
ee.Image.atan	Computes the arc tangent in radians of the input.	Image.atan()	Image	value	Image	
ee.Image.atan2	Calculates the angle formed by the 2D vector [x, y] for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.atan2(image2)	Image	image1|image2	Image|Image	
ee.Image.bandNames	Returns a list containing the names of the bands of an image.	Image.bandNames()	List	image	Image	
ee.Image.bandTypes	Returns a dictionary of the image's band types.	Image.bandTypes()	Dictionary	image	Image	
ee.Image.bitCount	Calculates the number of one-bits in the 64-bit two's complement binary representation of the input.	Image.bitCount()	Image	value	Image	
ee.Image.bitsToArrayImage	Turns the bits of an integer into a 1-D array.  The array has a lengthup to the highest 'on' bit in the input.	Image.bitsToArrayImage()	Image	input	Image	
ee.Image.bitwiseAnd	Calculates the bitwise AND of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwiseAnd(image2)	Image	image1|image2	Image|Image	
ee.Image.bitwiseNot	Calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Image.bitwiseNot()	Image	value	Image	
ee.Image.bitwiseOr	Calculates the bitwise OR of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwiseOr(image2)	Image	image1|image2	Image|Image	
ee.Image.bitwiseXor	Calculates the bitwise XOR of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwiseXor(image2)	Image	image1|image2	Image|Image	
ee.Image.blend	Overlays one image on top of another. The images are blended together using the masks as opacity. If either of images has only 1 band, it is replicated to match the number of bands in the other image.	Image.blend(top)	Image	bottom|top	Image|Image	
ee.Image.byte	Casts the input value to an unsigned 8-bit integer.	Image.byte()	Image	value	Image	
ee.Image.cast	Casts some or all bands of an image to the specified types.	Image.cast(bandTypes, bandOrder)	Image	image|bandTypes|bandOrder	Image|Dictionary|List, default: null	
ee.Image.cat	Combines the given images into a single image which contains all bands from all of the images.	ee.Image.cat(var_args)	Image	var_args	VarArgs	
ee.Image.cbrt	Computes the cubic root of the input.	Image.cbrt()	Image	value	Image	
ee.Image.ceil	Computes the smallest integer greater than or equal to the input.	Image.ceil()	Image	value	Image	
ee.Image.changeProj	Tweaks the projection of the input image, moving each pixel from its location in srcProj to the same coordinates in dstProj.	Image.changeProj(srcProj, dstProj)	Image	input|srcProj|dstProj	Image|Projection|Projection	
ee.Image.clamp	Clamps the values in all bands of an image to all lie within the specified range.	Image.clamp(low, high)	Image	input|low|high	Image|Float|Float	
ee.Image.classify	Classifies an image.	Image.classify(classifier, outputName)	Image	image|classifier|outputName	"Image|Classifier|String, default: ""classification"""	
ee.Image.clip	Clips an image to a Geometry or Feature.	Image.clip(geometry)	Image	image|geometry	Image|Feature|Geometry|Object	
ee.Image.clipToBoundsAndScale	Clips an image to the bounds of a Geometry, and scales the clipped image to a particular size or scale.	Image.clipToBoundsAndScale(geometry, width, height, maxDimension, scale)	Image	input|geometry|width|height|maxDimension|scale	Image|Geometry, default: null|Integer, default: null|Integer, default: null|Integer, default: null|Float, default: null	
ee.Image.clipToCollection	Clips an image to a FeatureCollection. The output bands correspond exactly the input bands, except data not covered by the geometry of at least one feature from the collection is masked. The output image retains the metadata of the input image.	Image.clipToCollection(collection)	Image	input|collection	Image|Object	
ee.Image.cluster	Applies a clusterer to an image.  Returns a new image with a single band containing values from 0 to N, indicating the cluster each pixel is assigned to.	Image.cluster(clusterer, outputName)	Image	image|clusterer|outputName	"Image|Clusterer|String, default: ""cluster"""	
ee.Image.connectedComponents	Finds connected components with the same value of the first band of the input and labels them with a globally unique value.  Connectedness is specified by the given kernel.  Objects larger than maxSize are considered background, and are masked.	Image.connectedComponents(connectedness, maxSize)	Image	image|connectedness|maxSize	Image|Kernel|Integer	
ee.Image.connectedPixelCount	Generate an image where each pixel contains the number of 4- or 8-connected neighbors (including itself).	Image.connectedPixelCount(maxSize, eightConnected)	Image	input|maxSize|eightConnected	Image|Integer, default: 100|Boolean, default: true	
ee.Image.constant	Generates an image containing a constant value everywhere.	ee.Image.constant(value)	Image	value	Object	
ee.Image.convolve	Convolves each band of an image with the given kernel.	Image.convolve(kernel)	Image	image|kernel	Image|Kernel	
ee.Image.copyProperties	Copies metadata properties from one element to another.	Image.copyProperties(source, properties, exclude)	Element	destination|source|properties|exclude	Element, default: null|Element, default: null|List, default: null|List, default: null	
ee.Image.cos	Computes the cosine of the input in radians.	Image.cos()	Image	value	Image	
ee.Image.cosh	Computes the hyperbolic cosine of the input.	Image.cosh()	Image	value	Image	
ee.Image.cumulativeCost	Computes a cumulative cost map based on an image containing costs to traverse each pixel and an image containing source locations.	Image.cumulativeCost(source, maxDistance, geodeticDistance)	Image	cost|source|maxDistance|geodeticDistance	Image|Image|Float|Boolean, default: true	
ee.Image.date	Returns the acquisition time of an image as a Date object. This helper function is equivalent to ee.Date(image.get('system:time_start')).	Image.date()	Date	image	Image	
ee.Image.derivative	Computes the X and Y discrete derivatives for each band in the input image, in pixel coordinates.	Image.derivative()	Image	image	Image	
ee.Image.digamma	Computes the digamma function of the input.	Image.digamma()	Image	value	Image	
ee.Image.directionalDistanceTransform	For each zero-valued pixel in the source, get the distance to the nearest non-zero pixels in the given direction.	Image.directionalDistanceTransform(angle, maxDistance, labelBand)	Image	source|angle|maxDistance|labelBand	Image|Float|Integer|String, default: null	
ee.Image.displace	Warps an image using an image of displacements.	Image.displace(displacement, mode, maxOffset)	Image	image|displacement|mode|maxOffset	"Image|Image|String, default: ""bicubic""|Float, default: null"	
ee.Image.displacement	Determines displacements required to register an image to a reference image while allowing local, rubber sheet deformations. Displacements are computed in the CRS of the reference image, at a scale dictated by the lowest resolution of the following three projections: input image projection, reference image projection, and requested projection. The displacements are then transformed into the user-specified projection for output.	Image.displacement(referenceImage, maxOffset, projection, patchWidth, stiffness)	Image	image|referenceImage|maxOffset|projection|patchWidth|stiffness	Image|Image|Float|Projection, default: null|Float, default: null|Float, default: 5	
ee.Image.distance	Computes the distance to the nearest non-zero pixel in each band, using the specified distance kernel.	Image.distance(kernel, skipMasked)	Image	image|kernel|skipMasked	Image|Kernel, default: null|Boolean, default: true	
ee.Image.divide	Divides the first value by the second, returning 0 for division by 0 for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.divide(image2)	Image	image1|image2	Image|Image	
ee.Image.double	Casts the input value to a 64-bit float.	Image.double()	Image	value	Image	
ee.Image.entropy	Computes the windowed entropy for each band using the specified kernel centered on each input pixel. Entropy is computed as -sum(p * log2(p)), where p is the normalized probability of occurrence of the values encountered in each window.	Image.entropy(kernel)	Image	image|kernel	Image|Kernel	
ee.Image.eq	Returns 1 if and only if the first value is equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.eq(image2)	Image	image1|image2	Image|Image	
ee.Image.erf	Computes the error function of the input.	Image.erf()	Image	value	Image	
ee.Image.erfInv	Computes the inverse error function of the input.	Image.erfInv()	Image	value	Image	
ee.Image.erfc	Computes the complementary error function of the input.	Image.erfc()	Image	value	Image	
ee.Image.erfcInv	Computes the inverse complementary error function of the input.	Image.erfcInv()	Image	value	Image	
ee.Image.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Image.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Image.exp	Computes the Euler's number e raised to the power of the input.	Image.exp()	Image	value	Image	
ee.Image.expression	Evaluates an arithmetic expression on an image, possibly involving additional images.	Image.expression(expression, map)	Image	image|expression|map	Image|String|Dictionary, optional	
ee.Image.fastDistanceTransform	Returns the distance, as determined by the specified distance metric, to the nearest non-zero valued pixel in the input.  The output contains values for all pixels within the given neighborhood size, regardless of the input's mask.  Note: the default distance metric returns squared distance.	Image.fastDistanceTransform(neighborhood, units, metric)	Image	image|neighborhood|units|metric	"Image|Integer, default: 256|String, default: ""pixels""|String, default: ""squared_euclidean"""	
ee.Image.first	Selects the value of the first value for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.first(image2)	Image	image1|image2	Image|Image	
ee.Image.firstNonZero	Selects the first value if it is non-zero, and the second value otherwise for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.firstNonZero(image2)	Image	image1|image2	Image|Image	
ee.Image.float	Casts the input value to a 32-bit float.	Image.float()	Image	value	Image	
ee.Image.floor	Computes the largest integer less than or equal to the input.	Image.floor()	Image	value	Image	
ee.Image.focalMax	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focalMax(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	
ee.Image.focalMean	Applies a morphological mean filter to each band of an image using a named or custom kernel.	Image.focalMean(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	
ee.Image.focalMedian	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focalMedian(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	
ee.Image.focalMin	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focalMin(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	
ee.Image.focalMode	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focalMode(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	
ee.Image.gamma	Computes the gamma function of the input.	Image.gamma()	Image	value	Image	
ee.Image.gammainc	Calculates the regularized lower incomplete Gamma function γ(x,a) for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.gammainc(image2)	Image	image1|image2	Image|Image	
ee.Image.geometry	Returns the geometry of a given feature in a given projection.	Image.geometry(maxError, proj, geodesics)	Geometry	feature|maxError|proj|geodesics	Element|ErrorMargin, default: null|Projection, default: null|Boolean, default: null	
ee.Image.get	Extract a property from a feature.	Image.get(property)		object|property	Element|String	
ee.Image.getArray	Extract a property from a feature.	Image.getArray(property)	Array	object|property	Element|String	
ee.Image.getDownloadURL	Get a download URL for small chunks of image data in GeoTIFF or NumPy format. Maximum request size is 32 MB, maximum grid dimension is 10000.	Image.getDownloadURL(params, callback)	Object|String	image|params| name: | bands: | id: | crs: | crs_transform: | dimensions: | scale: | crs: | crs_transform: |crs_transform| dimensions: | scale: |crs|crs_transform| region: |crs|crs_transform| filePerBand: | format: |callback	"Image|Object| bands:  a description of the bands to download. Must be an array of band names or an array of dictionaries, each with the following keys (optional parameters apply only when filePerBand is true):
 id:  the name of the band, a string, required.

 crs:  an optional CRS string defining the band projection.
 crs_transform:  an optional array of 6 numbers specifying an affine transform from the specified CRS, in row-major order: [xScale, xShearing, xTranslation, yShearing, yScale, yTranslation]
 dimensions:  an optional array of two integers defining the width and height to which the band is cropped.
 scale:  an optional number, specifying the scale in meters of the band; ignored if crs and crs_transform are specified.| dimensions:  default image cropping dimensions to use for any bands that do not specify them.| filePerBand:  whether to produce a separate GeoTIFF per band (boolean). Defaults to true. If false, a single GeoTIFF is produced and all band-level transformations will be ignored.|Function, optional"	
ee.Image.getInfo	An imperative function that returns information about this image via an AJAX call.	Image.getInfo(callback)	ImageDescription	image|callback	Image|Function, optional	
ee.Image.getMapId	An imperative function that returns a map ID and optional token, suitable for generating a Map overlay.	Image.getMapId(visParams, callback)	MapId|Object	image|visParams|callback	Image|ImageVisualizationParameters, optional|Function, optional	
ee.Image.getNumber	Extract a property from a feature.	Image.getNumber(property)	Number	object|property	Element|String	
ee.Image.getString	Extract a property from a feature.	Image.getString(property)	String	object|property	Element|String	
ee.Image.getThumbId	Applies transformations and returns the thumbId.	Image.getThumbId(params, callback)	ThumbnailId	image|params| dimensions | region |callback	Image|Object| region  Geospatial region of the image to render, it may be an ee.Geometry, GeoJSON, or an array of lat/lon points (E,S,W,N). If not set the default is the bounds image.|An optional callback. If not supplied, the call is made synchronously.	
ee.Image.getThumbURL	Get a thumbnail URL for this image.	Image.getThumbURL(params, callback)	Object|String	image|params| dimensions | region | format |callback	Image|Object| region  Geospatial region of the image to render, it may be an ee.Geometry, GeoJSON, or an array of lat/lon points (E,S,W,N). If not set the default is the bounds image.|Function, optional	
ee.Image.glcmTexture	Computes texture metrics from the Gray Level Co-occurrence Matrix around each pixel of every band.  The GLCM is a tabulation of how often different combinations of pixel brightness values (grey levels) occur in an image.  It counts the number of times a pixel of value X lies next to a pixel of value Y, in a particular direction and distance. and then derives statistics from this tabulation.	Image.glcmTexture(size, kernel, average)	Image	image|size|kernel|average	Image|Integer, default: 1|Kernel, default: null|Boolean, default: true	
ee.Image.gradient	Calculates the x and y gradient.	Image.gradient()	Image	input	Image	
ee.Image.gt	Returns 1 if and only if the first value is greater than the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.gt(image2)	Image	image1|image2	Image|Image	
ee.Image.gte	Returns 1 if and only if the first value is greater than or equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.gte(image2)	Image	image1|image2	Image|Image	
ee.Image.hersDescriptor	Creates a dictionary of Histogram Error Ring Statistic (HERS) descriptor arrays from square array properties of an element. The HERS radius is taken to be the array's (side_length - 1) / 2.	Image.hersDescriptor(selectors, buckets, peakWidthScale)	Dictionary	element|selectors|buckets|peakWidthScale	Element|List, default: null|Integer, default: 100|Float, default: 1	
ee.Image.hersFeature	Computes the Histogram Error Ring Statistic (HERS) for each pixel in each band matching the keys in the descriptor. Only the bands for which HERS could be computed are returned.	Image.hersFeature(reference, peakWidthScale)	Image	image|reference|peakWidthScale	Image|Dictionary|Float, default: 1	
ee.Image.hersImage	Computes the Histogram Error Ring Statistic (HERS) for each pair of pixels in each band present in both images. Only the bands for which HERS could be computed are returned.	Image.hersImage(image2, radius, buckets, peakWidthScale)	Image	image|image2|radius|buckets|peakWidthScale	Image|Image|Integer|Integer, default: 100|Float, default: 1	
ee.Image.hsvToRgb	Transforms the image from the HSV color space to the RGB color space.  Expects a 3 band image in the range [0, 1], and produces three bands: red, green and blue with values in the range [0, 1].	Image.hsvToRgb()	Image	image	Image	
ee.Image.hypot	Calculates the magnitude of the 2D vector [x, y] for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.hypot(image2)	Image	image1|image2	Image|Image	
ee.Image.id	Returns the ID of a given element within a collection. Objects outside collections are not guaranteed to have IDs.	Image.id()	String	element	Element	
ee.Image.int	Casts the input value to a signed 32-bit integer.	Image.int()	Image	value	Image	
ee.Image.int16	Casts the input value to a signed 16-bit integer.	Image.int16()	Image	value	Image	
ee.Image.int32	Casts the input value to a signed 32-bit integer.	Image.int32()	Image	value	Image	
ee.Image.int64	Casts the input value to a signed 64-bit integer.	Image.int64()	Image	value	Image	
ee.Image.int8	Casts the input value to a signed 8-bit integer.	Image.int8()	Image	value	Image	
ee.Image.interpolate	"Interpolates each point in the first band of the input image into the piecewise-linear function specified by the x and y arrays.  The x values must be strictly increasing.  If an input point is less than the first or greater than the last x value, then the output is specified by the ""behavior"" argument: ""extrapolate"" specifies the output value is extrapolated from the two nearest points, ""clamp"" specifies the output value is taken from the nearest point, ""input""  specifies the output value is copied from the input and ""mask"" specifies the output value is masked."	Image.interpolate(x, y, behavior)	Image	image|x|y|behavior	"Image|List|List|String, default: ""extrapolate"""	
ee.Image.lanczos	Computes the Lanczos approximation of the input.	Image.lanczos()	Image	value	Image	
ee.Image.leftShift	Calculates the left shift of v1 by v2 bits for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.leftShift(image2)	Image	image1|image2	Image|Image	
ee.Image.linkCollection	Links the source image to a matching image from an image collection.	Image.linkCollection(imageCollection, linkedBands, linkedProperties, matchPropertyName)	Image	input|imageCollection|linkedBands|linkedProperties|matchPropertyName	"Image|ImageCollection|Object, default: null|Object, default: null|String, default: ""system:index"""	
ee.Image.load	Returns the image given its ID.	ee.Image.load(id, version)	Image	id|version	String|Long, default: -1	
ee.Image.loadGeoTIFF	Loads a GeoTIFF as an Image.	ee.Image.loadGeoTIFF(uri)	Image	uri	String	
ee.Image.log	Computes the natural logarithm of the input.	Image.log()	Image	value	Image	
ee.Image.log10	Computes the base-10 logarithm of the input.	Image.log10()	Image	value	Image	
ee.Image.long	Casts the input value to a signed 64-bit integer.	Image.long()	Image	value	Image	
ee.Image.lt	Returns 1 if and only if the first value is less than the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.lt(image2)	Image	image1|image2	Image|Image	
ee.Image.lte	Returns 1 if and only if the first value is less than or equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.lte(image2)	Image	image1|image2	Image|Image	
ee.Image.mask	Gets or sets an image's mask. The output image retains the metadata and footprint of the input image. Pixels where the mask changes from zero to another value will be filled with zeros, or the values closest to zero within the range of the pixel type.	Image.mask(mask)	Image	image|mask	Image|Image, default: null	
ee.Image.matrixCholeskyDecomposition	Calculates the Cholesky decomposition of a matrix. The Cholesky decomposition is a decomposition into the form L * L' where L is a lower triangular matrix. The input must be a symmetric positive-definite matrix. Returns an image with 1 band named 'L'.	Image.matrixCholeskyDecomposition()	Image	image	Image	
ee.Image.matrixDeterminant	Computes the determinant of the matrix.	Image.matrixDeterminant()	Image	value	Image	
ee.Image.matrixDiagonal	Computes the diagonal of the matrix in a single column.	Image.matrixDiagonal()	Image	value	Image	
ee.Image.matrixFnorm	Computes the Frobenius norm of the matrix.	Image.matrixFnorm()	Image	value	Image	
ee.Image.matrixIdentity	Creates an image where each pixel is a 2D identity matrix of the given size.	ee.Image.matrixIdentity(size)	Image	size	Integer	
ee.Image.matrixInverse	Computes the inverse of the matrix.	Image.matrixInverse()	Image	value	Image	
ee.Image.matrixLUDecomposition	Calculates the LU matrix decomposition such that P×input=L×U, where L is lower triangular (with unit diagonal terms), U is upper triangular and P is a partial pivot permutation matrix. The input matrix must be square. Returns an image with bands named 'L', 'U' and 'P'.	Image.matrixLUDecomposition()	Image	image	Image	
ee.Image.matrixMultiply	Returns the matrix multiplication A * B for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.matrixMultiply(image2)	Image	image1|image2	Image|Image	
ee.Image.matrixPseudoInverse	Computes the Moore-Penrose pseudoinverse of the matrix.	Image.matrixPseudoInverse()	Image	value	Image	
ee.Image.matrixQRDecomposition	Calculates the QR-decomposition of a matrix into two matrices Q and R such that input = QR, where Q is orthogonal, and R is upper triangular. Returns an image with bands named 'Q' and 'R'.	Image.matrixQRDecomposition()	Image	image	Image	
ee.Image.matrixSingularValueDecomposition	Calculates the Singular Value Decomposition of the input matrix into U×S×V', such that U and V are orthogonal and S is diagonal. Returns an image with bands named 'U', 'S' and 'V'.	Image.matrixSingularValueDecomposition()	Image	image	Image	
ee.Image.matrixSolve	Solves for x in the matrix equation A * x = B, finding a least-squares solution if A is overdetermined for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.matrixSolve(image2)	Image	image1|image2	Image|Image	
ee.Image.matrixToDiag	Computes a square diagonal matrix from a single column matrix.	Image.matrixToDiag()	Image	value	Image	
ee.Image.matrixTrace	Computes the trace of the matrix.	Image.matrixTrace()	Image	value	Image	
ee.Image.matrixTranspose	Transposes two dimensions of each array pixel.	Image.matrixTranspose(axis1, axis2)	Image	input|axis1|axis2	Image|Integer, default: 0|Integer, default: 1	
ee.Image.max	Selects the maximum of the first and second values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.max(image2)	Image	image1|image2	Image|Image	
ee.Image.medialAxis	Computes the discrete medial axis of the zero valued pixels of the first band of the input.  Outputs 4 bands:	Image.medialAxis(neighborhood, units)	Image	image|neighborhood|units	"Image|Integer, default: 256|String, default: ""pixels"""	
ee.Image.metadata	Generates a constant image of type double from a metadata property.	Image.metadata(property, name)	Image	image|property|name	Image|String|String, default: null	
ee.Image.min	Selects the minimum of the first and second values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.min(image2)	Image	image1|image2	Image|Image	
ee.Image.mod	Calculates the remainder of the first value divided by the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.mod(image2)	Image	image1|image2	Image|Image	
ee.Image.multiply	Multiplies the first value by the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.multiply(image2)	Image	image1|image2	Image|Image	
ee.Image.neighborhoodToArray	Turns the neighborhood of each pixel in a scalar image into a 2D array. Axes 0 and 1 of the output array correspond to Y and X axes of the image, respectively. The output image will have as many bands as the input; each output band has the same mask as the corresponding input band. The footprint and metadata of the input image are preserved.	Image.neighborhoodToArray(kernel, defaultValue)	Image	image|kernel|defaultValue	Image|Kernel|Float, default: 0	
ee.Image.neighborhoodToBands	Turn the neighborhood of a pixel into a set of bands. The neighborhood is specified using a Kernel, and only non-zero-weight kernel values are used. The weights of the kernel is otherwise ignored.	Image.neighborhoodToBands(kernel)	Image	image|kernel	Image|Kernel	
ee.Image.neq	Returns 1 if and only if the first value is not equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.neq(image2)	Image	image1|image2	Image|Image	
ee.Image.normalizedDifference	Computes the normalized difference between two bands. If the bands to use are not specified, uses the first two bands. The normalized difference is computed as (first − second) / (first + second). Note that the returned image band name is 'nd', the input image properties are not retained in the output image, and a negative pixel value in either input band will cause the output pixel to be masked. To avoid masking negative input values, use ee.Image.expression() to compute normalized difference.	Image.normalizedDifference(bandNames)	Image	input|bandNames	Image|List, default: null	
ee.Image.not	Returns 0 if the input is non-zero, and 1 otherwise.	Image.not()	Image	value	Image	
ee.Image.or	Returns 1 if and only if either input value is non-zero for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.or(image2)	Image	image1|image2	Image|Image	
ee.Image.paint	Paints the geometries of a collection onto an image, using the given 'color' value to replace each band's values where any geometry covers the image (or, if a line width is specified, where the perimeters do).	Image.paint(featureCollection, color, width)	Image	image|featureCollection|color|width	Image|FeatureCollection|Object, default: 0|Object, default: null	
ee.Image.pixelArea	"Generate an image in which the value of each pixel is the area of that pixel in square meters. The returned image has a single band called ""area."""	ee.Image.pixelArea()	Image			
ee.Image.pixelCoordinates	UsageReturnsee.Image.pixelCoordinates(projection)Image	ee.Image.pixelCoordinates(projection)	Image	projection	Projection	
ee.Image.pixelLonLat	Creates an image with two bands named 'longitude' and 'latitude', containing the longitude and latitude at each pixel, in degrees.	ee.Image.pixelLonLat()	Image			
ee.Image.polynomial	UsageReturnsImage.polynomial(coefficients)Image	Image.polynomial(coefficients)	Image	image|coefficients	Image|List	
ee.Image.pow	Raises the first value to the power of the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.pow(image2)	Image	image1|image2	Image|Image	
ee.Image.projection	Returns the default projection of an Image.  Throws an error if the bands of the image don't all have the same projection.	Image.projection()	Projection	image	Image	
ee.Image.propertyNames	Returns the names of properties on this element.	Image.propertyNames()	List	element	Element	
ee.Image.random	Generates a random number at each pixel location.  When using the 'uniform' distribution, outputs are in the range of [0 to 1).  Using the 'normal' distribution, the outputs have μ=0, 𝛔=1, but no explicit limits.	ee.Image.random(seed, distribution)	Image	seed|distribution	"Long, default: 0|String, default: ""uniform"""	
ee.Image.randomVisualizer	Creates a visualization image by assigning a random color to each unique value of the pixels of the first band. The first three bands of the output image will contain 8-bit R, G and B values, followed by all bands of the input image.	Image.randomVisualizer()	Image	image	Image	
ee.Image.reduce	Applies a reducer to all of the bands of an image.	Image.reduce(reducer)	Image	image|reducer	Image|Reducer	
ee.Image.reduceConnectedComponents	Applies a reducer to all of the pixels inside of each 'object'. Pixels are considered to belong to an object if they are connected (8-way) and have the same value in the 'label' band.  The label band is only used to identify the connectedness; the rest are provided as inputs to the reducer.	Image.reduceConnectedComponents(reducer, labelBand, maxSize)	Image	image|reducer|labelBand|maxSize	Image|Reducer|String, default: null|Integer, default: 256	
ee.Image.reduceNeighborhood	Applies the given reducer to the neighborhood around each pixel, as determined by the given kernel. If the reducer has a single input, it will be applied separately to each band of the collection; otherwise it must have the same number of inputs as the input image has bands.	Image.reduceNeighborhood(reducer, kernel, inputWeight, skipMasked, optimization)	Image	image|reducer|kernel|inputWeight|skipMasked|optimization	"Image|Reducer|Kernel|String, default: ""kernel""|Boolean, default: true|String, default: null"	
ee.Image.reduceRegion	Apply a reducer to all the pixels in a specific region.	Image.reduceRegion(reducer, geometry, scale, crs, crsTransform, bestEffort, maxPixels, tileScale)	Dictionary	image|reducer|geometry|scale|crs|crsTransform|bestEffort|maxPixels|tileScale	Image|Reducer|Geometry, default: null|Float, default: null|Projection, default: null|List, default: null|Boolean, default: false|Long, default: 10000000|Float, default: 1	
ee.Image.reduceRegions	Apply a reducer over the area of each feature in the given collection.	Image.reduceRegions(collection, reducer, scale, crs, crsTransform, tileScale)	FeatureCollection	image|collection|reducer|scale|crs|crsTransform|tileScale	Image|FeatureCollection|Reducer|Float, default: null|Projection, default: null|List, default: null|Float, default: 1	
ee.Image.reduceResolution	Enables reprojection using the given reducer to combine all input pixels corresponding to each output pixel. If the reducer has a single input, it will be applied separately to each band of the collection; otherwise it must have the same number of inputs as the input image has bands.	Image.reduceResolution(reducer, bestEffort, maxPixels)	Image	image|reducer|bestEffort|maxPixels	Image|Reducer|Boolean, default: false|Integer, default: 64	
ee.Image.reduceToVectors	Convert an image to a feature collection by reducing homogeneous regions. Given an image containing a band of labeled segments and zero or more additional bands, runs a reducer over the pixels in each segment producing a feature per segment.	Image.reduceToVectors(reducer, geometry, scale, geometryType, eightConnected, labelProperty, crs, crsTransform, bestEffort, maxPixels, tileScale, geometryInNativeProjection)	FeatureCollection	image|reducer|geometry|scale|geometryType|eightConnected|labelProperty|crs|crsTransform|bestEffort|maxPixels|tileScale|geometryInNativeProjection	"Image|Reducer, default: null|Geometry, default: null|Float, default: null|String, default: ""polygon""|Boolean, default: true|String, default: ""label""|Projection, default: null|List, default: null|Boolean, default: false|Long, default: 10000000|Float, default: 1|Boolean, default: false"	
ee.Image.regexpRename	Renames the bands of an image by applying a regular expression replacement to the current band names.  Any bands not matched by the regex will be copied over without renaming.	Image.regexpRename(regex, replacement, all)	Image	input|regex|replacement|all	Image|String|String|Boolean, default: true	
ee.Image.register	Registers an image to a reference image while allowing local, rubber sheet deformations. Displacements are computed in the CRS of the reference image, at a scale dictated by the lowest resolution of the following three projections: input image projection, reference image projection, and requested projection. The displacements then applied to the input image to register it with the reference.	Image.register(referenceImage, maxOffset, patchWidth, stiffness)	Image	image|referenceImage|maxOffset|patchWidth|stiffness	Image|Image|Float|Float, default: null|Float, default: 5	
ee.Image.remap	Maps from input values to output values, represented by two parallel lists. Any input values not included in the input list are either set to defaultValue if it is given, or masked if it isn't.  Note that inputs containing floating point values might sometimes fail to match due to  floating point precision errors.	Image.remap(from, to, defaultValue, bandName)	Image	image|from|to|defaultValue|bandName	Image|List|List|Object, default: null|String, default: null	
ee.Image.rename	Rename the bands of an image.	Image.rename(var_args)	Image	image|var_args	Image|List	
ee.Image.reproject	Force an image to be computed in a given projection and resolution.	Image.reproject(crs, crsTransform, scale)	Image	image|crs|crsTransform|scale	Image|Projection|List, default: null|Float, default: null	
ee.Image.resample	An algorithm that returns an image identical to its argument, but which uses bilinear or bicubic interpolation (rather than the default nearest-neighbor) to compute pixels in projections other than its native projection or other levels of the same image pyramid.	Image.resample(mode)	Image	image|mode	"Image|String, default: ""bilinear"""	
ee.Image.rgb	Create a 3-band image specifically for visualization. This uses the first band in each image.	ee.Image.rgb(r, g, b)	Image	r|g|b	Image|Image|Image	
ee.Image.rgbToHsv	Transforms the image from the RGB color space to the HSV color space.  Expects a 3 band image in the range [0, 1], and produces three bands: hue, saturation and value with values in the range [0, 1].	Image.rgbToHsv()	Image	image	Image	
ee.Image.rightShift	Calculates the signed right shift of v1 by v2 bits for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.rightShift(image2)	Image	image1|image2	Image|Image	
ee.Image.round	Computes the integer nearest to the input.	Image.round()	Image	value	Image	
ee.Image.rsedTransform	Computes the 2D maximal height surface created by placing an inverted parabola over each non-zero pixel of the input image, where the pixel's value is the height of the parabola.  Viewed as a binary image (zero/not-zero) this is equivalent to buffering each non-zero input pixel by the square root of its value, in pixels.	Image.rsedTransform(neighborhood, units)	Image	image|neighborhood|units	"Image|Integer, default: 256|String, default: ""pixels"""	
ee.Image.sample	Samples the pixels of an image, returning them as a FeatureCollection. Each feature will have 1 property per band in the input image. Note that the default behavior is to drop features that intersect masked pixels, which result in null-valued properties (see dropNulls argument).	Image.sample(region, scale, projection, factor, numPixels, seed, dropNulls, tileScale, geometries)	FeatureCollection	image|region|scale|projection|factor|numPixels|seed|dropNulls|tileScale|geometries	Image|Geometry, default: null|Float, default: null|Projection, default: null|Float, default: null|Long, default: null|Integer, default: 0|Boolean, default: true|Float, default: 1|Boolean, default: false	
ee.Image.sampleRectangle	Extracts a rectangular region of pixels from an image into a ND array per band. The arrays are returned in a feature retaining the same properties as the image and a geometry the same as that used to sample the image (or the image footprint if unspecified). Each band is sampled in its input projection, and if no geometry is specified, sampled using its footprint. For scalar bands, the output array is 2D. For array bands the output array is (2+N)D where N is the number of dimensions in the original band. If sampling array bands, all arrays must have the same number of elements. If a band's sampled region is entirely masked and a default array value is specified, the default array value is used in-lieu of sampling the image.	Image.sampleRectangle(region, properties, defaultValue, defaultArrayValue)	Feature	image|region|properties|defaultValue|defaultArrayValue	Image|Geometry, default: null|List, default: null|Float, default: null|Array, default: null	
ee.Image.sampleRegions	Converts each pixel of an image (at a given scale) that intersects one or more regions to a Feature, returning them as a FeatureCollection.  Each output feature will have one property per band of the input image, as well as any specified properties copied from the input feature.	Image.sampleRegions(collection, properties, scale, projection, tileScale, geometries)	FeatureCollection	image|collection|properties|scale|projection|tileScale|geometries	Image|FeatureCollection|List, default: null|Float, default: null|Projection, default: null|Float, default: 1|Boolean, default: false	
ee.Image.select	Selects bands from an image.	Image.select(var_args)	Image	image|var_args	Image|VarArgs	
ee.Image.selfMask	Updates an image's mask at all positions where the existing mask is not zero using the value of the image as the new mask value. The output image retains the metadata and footprint of the input image.	Image.selfMask()	Image	image	Image	
ee.Image.serialize	Returns the serialized representation of this object.	Image.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.Image.set	Overrides one or more metadata properties of an Element.	Image.set(var_args)	Element	element|var_args	Element|VarArgs	
ee.Image.setDefaultProjection	Set a default projection to be applied to this image. The projection's resolution may be overridden by later operations.	Image.setDefaultProjection(crs, crsTransform, scale)	Image	image|crs|crsTransform|scale	Image|Projection|List, default: null|Float, default: null	
ee.Image.short	Casts the input value to a signed 16-bit integer.	Image.short()	Image	value	Image	
ee.Image.signum	Computes the signum function (sign) of the input; zero if the input is zero, 1 if the input is greater than zero, -1 if the input is less than zero.	Image.signum()	Image	value	Image	
ee.Image.sin	Computes the sine of the input in radians.	Image.sin()	Image	value	Image	
ee.Image.sinh	Computes the hyperbolic sine of the input.	Image.sinh()	Image	value	Image	
ee.Image.sldStyle	Styles a raster input with the provided OGC SLD styling.	Image.sldStyle(sldXml)	Image	input|sldXml	Image|String	
ee.Image.slice	Selects a contiguous group of bands from an image by position.	Image.slice(start, end)	Image	image|start|end	Image|Integer|Integer, default: null	
ee.Image.spectralDilation	Computes the spectral/spatial dilation of an image by computing the spectral distance of each pixel under a structuring kernel from the centroid of all pixels under the kernel and taking the most distant result. See 'Spatial/spectral endmember extraction by multidimensional morphological operations.' IEEE transactions on geoscience and remote sensing 40.9 (2002): 2025-2041.	Image.spectralDilation(metric, kernel, useCentroid)	Image	image|metric|kernel|useCentroid	"Image|String, default: ""sam""|Kernel, default: null|Boolean, default: false"	
ee.Image.spectralDistance	Computes the per-pixel spectral distance between two images.  If the images are array based then only the first band of each image is used; otherwise all bands are involved in the distance computation.  The two images are therefore expected  to contain the same number of bands or have the same 1-dimensional array length.	Image.spectralDistance(image2, metric)	Image	image1|image2|metric	"Image|Image|String, default: ""sam"""	
ee.Image.spectralErosion	Computes the spectral/spatial erosion of an image by computing the spectral distance of each pixel under a structuring kernel from the centroid of all pixels under the kernel and taking the closest result.  See 'Spatial/spectral endmember extraction by multidimensional morphological operations.' IEEE transactions on geoscience and remote sensing 40.9 (2002): 2025-2041.	Image.spectralErosion(metric, kernel, useCentroid)	Image	image|metric|kernel|useCentroid	"Image|String, default: ""sam""|Kernel, default: null|Boolean, default: false"	
ee.Image.spectralGradient	Computes the spectral gradient over all bands of an image (or the first band if the image is Array typed) by computing the per-pixel difference between the spectral erosion and dilation with a given structuring kernel and distance metric. See: Plaza, Antonio, et al. 'Spatial/spectral endmember extraction by multidimensional morphological operations.' IEEE transactions on geoscience and remote sensing 40.9 (2002): 2025-2041.	Image.spectralGradient(metric, kernel, useCentroid)	Image	image|metric|kernel|useCentroid	"Image|String, default: ""sam""|Kernel, default: null|Boolean, default: false"	
ee.Image.sqrt	Computes the square root of the input.	Image.sqrt()	Image	value	Image	
ee.Image.stratifiedSample	Extracts a stratified random sample of points from an image.  Extracts the specified number of samples for each distinct value discovered within the 'classBand'.  Returns a FeatureCollection of 1 Feature per extracted point, with each feature having 1 property per band in the input image.  If there are less than the specified number of samples available for a given class value, then all of the points for that class will be included.  Requires that the classBand contain integer values.	Image.stratifiedSample(numPoints, classBand, region, scale, projection, seed, classValues, classPoints, dropNulls, tileScale, geometries)	FeatureCollection	image|numPoints|classBand|region|scale|projection|seed|classValues|classPoints|dropNulls|tileScale|geometries	Image|Integer|String, default: null|Geometry, default: null|Float, default: null|Projection, default: null|Integer, default: 0|List, default: null|List, default: null|Boolean, default: true|Float, default: 1|Boolean, default: false	
ee.Image.subtract	Subtracts the second value from the first for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.subtract(image2)	Image	image1|image2	Image|Image	
ee.Image.tan	Computes the tangent of the input in radians.	Image.tan()	Image	value	Image	
ee.Image.tanh	Computes the hyperbolic tangent of the input.	Image.tanh()	Image	value	Image	
ee.Image.toArray	Concatenates pixels from each band into a single array per pixel. The result will be masked if any input bands are masked.	Image.toArray(axis)	Image	image|axis	Image|Integer, default: 0	
ee.Image.toByte	Casts the input value to an unsigned 8-bit integer.	Image.toByte()	Image	value	Image	
ee.Image.toDictionary	Extract properties from a feature as a dictionary.	Image.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	
ee.Image.toDouble	Casts the input value to a 64-bit float.	Image.toDouble()	Image	value	Image	
ee.Image.toFloat	Casts the input value to a 32-bit float.	Image.toFloat()	Image	value	Image	
ee.Image.toInt	Casts the input value to a signed 32-bit integer.	Image.toInt()	Image	value	Image	
ee.Image.toInt16	Casts the input value to a signed 16-bit integer.	Image.toInt16()	Image	value	Image	
ee.Image.toInt32	Casts the input value to a signed 32-bit integer.	Image.toInt32()	Image	value	Image	
ee.Image.toInt64	Casts the input value to a signed 64-bit integer.	Image.toInt64()	Image	value	Image	
ee.Image.toInt8	Casts the input value to a signed 8-bit integer.	Image.toInt8()	Image	value	Image	
ee.Image.toLong	Casts the input value to a signed 64-bit integer.	Image.toLong()	Image	value	Image	
ee.Image.toShort	Casts the input value to a signed 16-bit integer.	Image.toShort()	Image	value	Image	
ee.Image.toUint16	Casts the input value to an unsigned 16-bit integer.	Image.toUint16()	Image	value	Image	
ee.Image.toUint32	Casts the input value to an unsigned 32-bit integer.	Image.toUint32()	Image	value	Image	
ee.Image.toUint8	Casts the input value to an unsigned 8-bit integer.	Image.toUint8()	Image	value	Image	
ee.Image.translate	Translate the input image.	Image.translate(x, y, units, proj)	Image	input|x|y|units|proj	"Image|Float|Float|String, default: ""meters""|Projection, default: null"	
ee.Image.trigamma	Computes the trigamma function of the input.	Image.trigamma()	Image	value	Image	
ee.Image.uint16	Casts the input value to an unsigned 16-bit integer.	Image.uint16()	Image	value	Image	
ee.Image.uint32	Casts the input value to an unsigned 32-bit integer.	Image.uint32()	Image	value	Image	
ee.Image.uint8	Casts the input value to an unsigned 8-bit integer.	Image.uint8()	Image	value	Image	
ee.Image.unitScale	Scales the input so that the range of input values [low, high] becomes [0, 1]. Values outside the range are NOT clamped. This algorithm always produces floating point pixels.	Image.unitScale(low, high)	Image	input|low|high	Image|Float|Float	
ee.Image.unmask	Replaces mask and value of the input image with the mask and value of another image at all positions where the input mask is zero. The output image retains the metadata of the input image. By default, the output image also retains the footprint of the input, but setting sameFootprint to false allows to extend the footprint.	Image.unmask(value, sameFootprint)	Image	input|value|sameFootprint	Image|Image, default: null|Boolean, default: true	
ee.Image.unmix	Unmix each pixel with the given endmembers, by computing the pseudo-inverse and multiplying it through each pixel.  Returns an image of doubles with the same number of bands as endmembers.	Image.unmix(endmembers, sumToOne, nonNegative)	Image	image|endmembers|sumToOne|nonNegative	Image|List|Boolean, default: false|Boolean, default: false	
ee.Image.updateMask	Updates an image's mask at all positions where the existing mask is not zero. The output image retains the metadata and footprint of the input image.	Image.updateMask(mask)	Image	image|mask	Image|Image	
ee.Image.visualize	Produces an RGB or grayscale visualization of an image.  Each of the gain, bias, min, max and gamma arguments can take either a single value, which will be applied to all bands, or a list of values the same length as bands.	Image.visualize(bands, gain, bias, min, max, gamma, opacity, palette, forceRgbOutput)	Image	image|bands|gain|bias|min|max|gamma|opacity|palette|forceRgbOutput	Image|Object, default: null|Object, default: null|Object, default: null|Object, default: null|Object, default: null|Object, default: null|Number, default: null|Object, default: null|Boolean, default: false	
ee.Image.where	Performs conditional replacement of values.	Image.where(test, value)	Image	input|test|value	Image|Image|Image	
ee.Image.zeroCrossing	Finds zero-crossings on each band of an image.	Image.zeroCrossing()	Image	image	Image	
ee.ImageCollection	ImageCollections can be constructed from the following arguments:	ee.ImageCollection(args)	ImageCollection	args	ComputedObject|Image|List	
ee.ImageCollection.aggregate_array	Aggregates over a given property of the objects in a collection, calculating a list of all the values of the selected property.	ImageCollection.aggregate_array(property)	List	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_count	Aggregates over a given property of the objects in a collection, calculating the number of non-null values of the property.	ImageCollection.aggregate_count(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_count_distinct	Aggregates over a given property of the objects in a collection, calculating the number of distinct values for the selected property.	ImageCollection.aggregate_count_distinct(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_first	Aggregates over a given property of the objects in a collection, calculating the property value of the first object in the collection.	ImageCollection.aggregate_first(property)		collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_histogram	Aggregates over a given property of the objects in a collection, calculating a histogram of the selected property.	ImageCollection.aggregate_histogram(property)	Dictionary	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_max	Aggregates over a given property of the objects in a collection, calculating the maximum of the values of the selected property.	ImageCollection.aggregate_max(property)		collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_mean	Aggregates over a given property of the objects in a collection, calculating the mean of the selected property.	ImageCollection.aggregate_mean(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_min	Aggregates over a given property of the objects in a collection, calculating the minimum of the values of the selected property.	ImageCollection.aggregate_min(property)		collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_product	Aggregates over a given property of the objects in a collection, calculating the product of the values of the selected property.	ImageCollection.aggregate_product(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_sample_sd	Aggregates over a given property of the objects in a collection, calculating the sample std. deviation of the values of the selected property.	ImageCollection.aggregate_sample_sd(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_sample_var	Aggregates over a given property of the objects in a collection, calculating the sample variance of the values of the selected property.	ImageCollection.aggregate_sample_var(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_stats	Aggregates over a given property of the objects in a collection, calculating the sum, min, max, mean, sample standard deviation, sample variance, total standard deviation and total variance of the selected property.	ImageCollection.aggregate_stats(property)	Dictionary	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_sum	Aggregates over a given property of the objects in a collection, calculating the sum of the values of the selected property.	ImageCollection.aggregate_sum(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_total_sd	Aggregates over a given property of the objects in a collection, calculating the total std. deviation of the values of the selected property.	ImageCollection.aggregate_total_sd(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.aggregate_total_var	Aggregates over a given property of the objects in a collection, calculating the total variance of the values of the selected property.	ImageCollection.aggregate_total_var(property)	Number	collection|property	FeatureCollection|String	
ee.ImageCollection.and	Reduces an image collection by setting each pixel to 1 iff all the non-masked values at that pixel are non-zero across the stack of all matching bands. Bands are matched by name.	ImageCollection.and()	Image	collection	ImageCollection	
ee.ImageCollection.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	ImageCollection.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.ImageCollection.cast	Casts some or all bands of each image in an ImageCollection to the specified types.	ImageCollection.cast(bandTypes, bandOrder)	ImageCollection	collection|bandTypes|bandOrder	ImageCollection|Dictionary|List	
ee.ImageCollection.combine	Makes a new collection that is a copy of the images in primary, adding all the bands from the image in secondary with a matching ID. If there are no matching IDs, the resulting collection will be empty. This is equivalent to an inner join on ID with merging of the bands of the result.	ImageCollection.combine(secondary, overwrite)	ImageCollection	primary|secondary|overwrite	ImageCollection|ImageCollection|Boolean, default: false	
ee.ImageCollection.copyProperties	Copies metadata properties from one element to another.	ImageCollection.copyProperties(source, properties, exclude)	Element	destination|source|properties|exclude	Element, default: null|Element, default: null|List, default: null|List, default: null	
ee.ImageCollection.count	Reduces an image collection by calculating the number of images with a valid mask at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.count()	Image	collection	ImageCollection	
ee.ImageCollection.distance	Produces a DOUBLE image where each pixel is the distance in meters from the pixel center to the nearest Point, LineString, or polygonal boundary in the collection. Note distance is also measured within interiors of polygons. Pixels that are not within 'searchRadius' meters of a geometry will be masked out.	ImageCollection.distance(searchRadius, maxError)	Image	features|searchRadius|maxError	FeatureCollection|Float, default: 100000|Float, default: 100	
ee.ImageCollection.distinct	Removes duplicates from a collection. Note that duplicates are determined using a strong hash over the serialized form of the selected properties.	ImageCollection.distinct(properties)	FeatureCollection	collection|properties	FeatureCollection|Object	
ee.ImageCollection.draw	Paints a vector collection for visualization. Not intended for use as input to other algorithms.	ImageCollection.draw(color, pointRadius, strokeWidth)	Image	collection|color|pointRadius|strokeWidth	FeatureCollection|String|Integer, default: 3|Integer, default: 2	
ee.ImageCollection.errorMatrix	Computes a 2D error matrix for a collection by comparing two columns of a collection: one containing the actual values, and one containing predicted values.The values are expected to be small contiguous integers, starting from 0. Axis 0 (the rows) of the matrix correspond to the actual values, and Axis 1 (the columns) to the predicted values.	ImageCollection.errorMatrix(actual, predicted, order)	ConfusionMatrix	collection|actual|predicted|order	FeatureCollection|String|String|List, default: null	
ee.ImageCollection.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	ImageCollection.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.ImageCollection.filter	Apply a filter to this collection.	ImageCollection.filter(filter)	Collection	collection|filter	Collection|Filter	
ee.ImageCollection.filterBounds	Shortcut to filter a collection by intersection with geometry. Items in the collection with a footprint that fails to intersect the given geometry will be excluded.	ImageCollection.filterBounds(geometry)	Collection	collection|geometry	Collection|ComputedObject|FeatureCollection|Geometry	
ee.ImageCollection.filterDate	Shortcut to filter a collection by a date range. The start and end may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). Based on 'system:time_start'.	ImageCollection.filterDate(start, end)	Collection	collection|start|end	Collection|Date|Number|String|Date|Number|String, optional	
ee.ImageCollection.first	Returns the first entry from a given collection.	ImageCollection.first()	Image	imagecollection	ImageCollection	
ee.ImageCollection.flatten	Flattens collections of collections.	ImageCollection.flatten()	FeatureCollection	collection	FeatureCollection	
ee.ImageCollection.formaTrend	Computes the long and short term trends of a time series or optionally, the trends of the ratio of the time series and a covariate.  The long term trend is estimated from the linear term of a regression on the full time series.  The short term trend is computed as the windowed minimum over the time series.	ImageCollection.formaTrend(covariates, windowSize)	Image	timeSeries|covariates|windowSize	ImageCollection|ImageCollection, default: null|Integer, default: 6	
ee.ImageCollection.fromImages	Returns the image collection containing the given images.	ee.ImageCollection.fromImages(images)	ImageCollection	images	List	
ee.ImageCollection.geometry	Extracts and merges the geometries of a collection. Requires that all the geometries in the collection share the projection and edge interpretation.	ImageCollection.geometry(maxError)	Geometry	collection|maxError	FeatureCollection|ErrorMargin, optional	
ee.ImageCollection.get	Extract a property from a feature.	ImageCollection.get(property)		object|property	Element|String	
ee.ImageCollection.getArray	Extract a property from a feature.	ImageCollection.getArray(property)	Array	object|property	Element|String	
ee.ImageCollection.getFilmstripThumbURL	Get the URL of a tiled thumbnail for this ImageCollection.	ImageCollection.getFilmstripThumbURL(params, callback)	Object|String	imagecollection|params| dimensions | region | format |callback	ImageCollection|Object| region  (E,S,W,N or GeoJSON) Geospatial region of the image to render. By default, the whole image.|Function, optional	
ee.ImageCollection.getInfo	An imperative function that returns all the known information about this collection via an AJAX call.	ImageCollection.getInfo(callback)	ImageCollectionDescription	imagecollection|callback	ImageCollection|Function, optional	
ee.ImageCollection.getMapId	An imperative function that returns a map ID via a synchronous AJAX call.	ImageCollection.getMapId(visParams, callback)	MapId|Object	imagecollection|visParams|callback	ImageCollection|Object, optional|Function, optional	
ee.ImageCollection.getNumber	Extract a property from a feature.	ImageCollection.getNumber(property)	Number	object|property	Element|String	
ee.ImageCollection.getRegion	Output an array of values for each [pixel, band, image] tuple in an ImageCollection.  The output contains rows of id, lon, lat, time, and all bands for each image that intersects each pixel in the given region. Attempting to extract more than 1048576 values will result in an error.	ImageCollection.getRegion(geometry, scale, crs, crsTransform)	List	collection|geometry|scale|crs|crsTransform	ImageCollection|Geometry|Float, default: null|Projection, optional|List, default: null	
ee.ImageCollection.getString	Extract a property from a feature.	ImageCollection.getString(property)	String	object|property	Element|String	
ee.ImageCollection.getVideoThumbURL	Get the URL of an animated thumbnail for this ImageCollection.	ImageCollection.getVideoThumbURL(params, callback)	Object|String	imagecollection|params| dimensions | region | format | framesPerSecond |callback	ImageCollection|Object| region  (E,S,W,N or GeoJSON) Geospatial region of the image to render. By default, the whole image.|callback	
ee.ImageCollection.iterate	Applies a user-supplied function to each element of a collection. The user-supplied function is given two arguments: the current element, and the value returned by the previous call to iterate() or the first argument, for the first iteration. The result is the value returned by the final call to the user-supplied function.	ImageCollection.iterate(algorithm, first)	ComputedObject	collection|algorithm|first	Collection|Function|Object, optional	
ee.ImageCollection.limit	Limit a collection to the specified number of elements, optionally sorting them by a specified property first.	ImageCollection.limit(max, property, ascending)	Collection	collection|max|property|ascending	Collection|Number|String, optional|Boolean, optional	
ee.ImageCollection.linkCollection	Links images in this collection to matching images from imageCollection.	ImageCollection.linkCollection(imageCollection, linkedBands, linkedProperties, matchPropertyName)	ImageCollection	imagecollection|imageCollection|linkedBands|linkedProperties|matchPropertyName	ImageCollection|ImageCollection|List, optional|List, optional|String, optional	
ee.ImageCollection.load	Returns the image collection given its ID.	ee.ImageCollection.load(id, version)	ImageCollection	id|version	String|Long, default: null	
ee.ImageCollection.map	Maps an algorithm over a collection.	ImageCollection.map(algorithm, dropNulls)	Collection	collection|algorithm|dropNulls	Collection|Function|Boolean, optional	
ee.ImageCollection.max	Reduces an image collection by calculating the maximum value of each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.max()	Image	collection	ImageCollection	
ee.ImageCollection.mean	Reduces an image collection by calculating the mean of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.mean()	Image	collection	ImageCollection	
ee.ImageCollection.median	Reduces an image collection by calculating the median of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.median()	Image	collection	ImageCollection	
ee.ImageCollection.merge	Merges two image collections into one. The result has all the images that were in either collection.	ImageCollection.merge(collection2)	ImageCollection	collection1|collection2	ImageCollection|ImageCollection	
ee.ImageCollection.min	Reduces an image collection by calculating the minimum value of each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.min()	Image	collection	ImageCollection	
ee.ImageCollection.mode	Reduces an image collection by calculating the most common value at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.mode()	Image	collection	ImageCollection	
ee.ImageCollection.mosaic	Composites all the images in a collection, using the mask.	ImageCollection.mosaic()	Image	collection	ImageCollection	
ee.ImageCollection.or	Reduces an image collection by setting each pixel to 1 iff any of the non-masked values at that pixel are non-zero across the stack of all matching bands. Bands are matched by name.	ImageCollection.or()	Image	collection	ImageCollection	
ee.ImageCollection.product	Reduces an image collection by calculating the product of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.product()	Image	collection	ImageCollection	
ee.ImageCollection.propertyNames	Returns the names of properties on this element.	ImageCollection.propertyNames()	List	element	Element	
ee.ImageCollection.qualityMosaic	Composites all the images in a collection, using a quality band as a per-pixel ordering function.	ImageCollection.qualityMosaic(qualityBand)	Image	collection|qualityBand	ImageCollection|String	
ee.ImageCollection.randomColumn	Adds a column of deterministic pseudorandom numbers to a collection.  The outputs are double-precision floating point numbers. When using the 'uniform' distribution (default), outputs are in the range of [0, 1). Using the 'normal' distribution, outputs have μ=0, 𝛔=1, but have no explicit limits.	ImageCollection.randomColumn(columnName, seed, distribution)	FeatureCollection	collection|columnName|seed|distribution	"FeatureCollection|String, default: ""random""|Long, default: 0|String, default: ""uniform"""	
ee.ImageCollection.reduce	Applies a reducer across all of the images in a collection.	ImageCollection.reduce(reducer, parallelScale)	Image	collection|reducer|parallelScale	ImageCollection|Reducer|Float, default: 1	
ee.ImageCollection.reduceColumns	Apply a reducer to each element of a collection, using the given selectors to determine the inputs.	ImageCollection.reduceColumns(reducer, selectors, weightSelectors)	Dictionary	collection|reducer|selectors|weightSelectors	FeatureCollection|Reducer|List|List, default: null	
ee.ImageCollection.reduceToImage	Creates an image from a feature collection by applying a reducer over the selected properties of all the features that intersect each pixel.	ImageCollection.reduceToImage(properties, reducer)	Image	collection|properties|reducer	FeatureCollection|List|Reducer	
ee.ImageCollection.remap	Remaps the value of a specific property in a collection. Takes two parallel lists and maps values found in one to values in the other. Any element with a value that is not specified in the first list is dropped from the output collection.	ImageCollection.remap(lookupIn, lookupOut, columnName)	FeatureCollection	collection|lookupIn|lookupOut|columnName	FeatureCollection|List|List|String	
ee.ImageCollection.select	Select bands from each image in a collection.	ImageCollection.select(selectors, names)	ImageCollection	imagecollection|selectors|names	ImageCollection|List|List, optional	
ee.ImageCollection.serialize	Returns the serialized representation of this object.	ImageCollection.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.ImageCollection.set	Overrides one or more metadata properties of an Element.	ImageCollection.set(var_args)	Element	element|var_args	Element|VarArgs	
ee.ImageCollection.size	Returns the number of elements in the collection.	ImageCollection.size()	Integer	collection	FeatureCollection	
ee.ImageCollection.sort	Sort a collection by the specified property.	ImageCollection.sort(property, ascending)	Collection	collection|property|ascending	Collection|String|Boolean, optional	
ee.ImageCollection.style	Draw a vector collection for visualization using a simple style language.	ImageCollection.style(color, pointSize, pointShape, width, fillColor, styleProperty, neighborhood, lineType)	Image	collection|color|pointSize|pointShape|width|fillColor|styleProperty|neighborhood|lineType	"FeatureCollection|String, default: ""black""|Integer, default: 3|String, default: ""circle""|Float, default: 2|String, default: null|String, default: null|Integer, default: 5|String, default: ""solid"""	
ee.ImageCollection.sum	Reduces an image collection by calculating the sum of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.sum()	Image	collection	ImageCollection	
ee.ImageCollection.toArray	Converts an image collection into an image of 2D arrays.  At each pixel, the images that have valid (unmasked) values in all bands are laid out along the first axis of the array in the order they appear in the image collection.  The bands of each image are laid out along the second axis of the array, in the order the bands appear in that image.  The array element type will be the union of the types of each band.	ImageCollection.toArray()	Image	collection	ImageCollection	
ee.ImageCollection.toArrayPerBand	Concatenates multiple images into a single array image. The result will be masked if any input is masked.	ImageCollection.toArrayPerBand(axis)	Image	collection|axis	ImageCollection|Integer, default: 0	
ee.ImageCollection.toBands	Converts a collection to a single multi-band image containing all of the bands of every image in the collection.  Output bands are named by prefixing the existing band names with the image id from which it came (e.g.: 'image1_band1'). Note: The maximum number of bands is 5000	ImageCollection.toBands()	Image	collection	ImageCollection	
ee.ImageCollection.toDictionary	Extract properties from a feature as a dictionary.	ImageCollection.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	
ee.ImageCollection.toList	Returns the elements of a collection as a list.	ImageCollection.toList(count, offset)	List	collection|count|offset	FeatureCollection|Integer|Integer, default: 0	
ee.ImageCollection.union	Merges all geometries in a given collection into one and returns a collection containing a single feature with only an ID of 'union_result' and a geometry.	ImageCollection.union(maxError)	FeatureCollection	collection|maxError	FeatureCollection|ErrorMargin, default: null	
ee.Join.apply	Joins two collections.	Join.apply(primary, secondary, condition)	FeatureCollection	join|primary|secondary|condition	Join|FeatureCollection|FeatureCollection|Filter	
ee.Join.inner	Returns a join that pairs elements from the primary collection with matching elements from the secondary collection. Each result has a 'primary' property that contains the element from the primary collection, and a 'secondary' property containing the matching element from the secondary collection. If measureKey is specified, the join measure is also attached to the object as a property.	ee.Join.inner(primaryKey, secondaryKey, measureKey)	Join	primaryKey|secondaryKey|measureKey	"String, default: ""primary""|String, default: ""secondary""|String, default: null"	
ee.Join.inverted	Returns a join that produces the elements of the primary collection that match no elements of the secondary collection. No properties are added to the results.	ee.Join.inverted()	Join			
ee.Join.saveAll	UsageReturnsee.Join.saveAll(matchesKey, ordering, ascending, measureKey, outer)Join	ee.Join.saveAll(matchesKey, ordering, ascending, measureKey, outer)	Join	matchesKey|ordering|ascending|measureKey|outer	String|String, default: null|Boolean, default: true|String, default: null|Boolean, default: false	
ee.Join.saveBest	Returns a join that pairs each element from the first collection with a matching element from the second collection. The match with the best join measure is added to each result as an additional property. Join measures are produced when withinDistance or maxDifference filters are used as the join condition.	ee.Join.saveBest(matchKey, measureKey, outer)	Join	matchKey|measureKey|outer	String|String|Boolean, default: false	
ee.Join.saveFirst	Returns a join that pairs each element from the first collection with a matching element from the second collection. The first match is added to the result as an additional property.	ee.Join.saveFirst(matchKey, ordering, ascending, measureKey, outer)	Join	matchKey|ordering|ascending|measureKey|outer	String|String, default: null|Boolean, default: true|String, default: null|Boolean, default: false	
ee.Join.simple	Returns a join that produces the elements of the primary collection that match any element of the secondary collection. No properties are added to the results.	ee.Join.simple()	Join			
ee.Kernel.add	UsageReturnsKernel.add(kernel2, normalize)Kernel	Kernel.add(kernel2, normalize)	Kernel	kernel1|kernel2|normalize	Kernel|Kernel|Boolean, default: false	
ee.Kernel.chebyshev	Generates a distance kernel based on Chebyshev distance (greatest distance along any dimension).	ee.Kernel.chebyshev(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: false|Float, default: 1"	
ee.Kernel.circle	Generates a circle-shaped boolean kernel.	ee.Kernel.circle(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.Kernel.compass	Generates a 3x3 Prewitt's Compass edge-detection kernel.	ee.Kernel.compass(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	
ee.Kernel.cross	Generates a cross-shaped boolean kernel.	ee.Kernel.cross(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.Kernel.diamond	Generates a diamond-shaped boolean kernel.	ee.Kernel.diamond(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.Kernel.euclidean	Generates a distance kernel based on Euclidean (straight-line) distance.	ee.Kernel.euclidean(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: false|Float, default: 1"	
ee.Kernel.fixed	Creates a Kernel.	ee.Kernel.fixed(width, height, weights, x, y, normalize)	Kernel	width|height|weights|x|y|normalize	Integer, default: -1|Integer, default: -1|List|Integer, default: -1|Integer, default: -1|Boolean, default: false	
ee.Kernel.gaussian	Generates a Gaussian kernel from a sampled continuous Gaussian.	ee.Kernel.gaussian(radius, sigma, units, normalize, magnitude)	Kernel	radius|sigma|units|normalize|magnitude	"Float|Float, default: 1|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.Kernel.inverse	Returns a kernel which has each of its weights multiplicatively inverted. Weights with a value of zero are not inverted and remain zero.	Kernel.inverse()	Kernel	kernel	Kernel	
ee.Kernel.kirsch	Generates a 3x3 Kirsch's Compass edge-detection kernel.	ee.Kernel.kirsch(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	
ee.Kernel.laplacian4	Generates a 3x3 Laplacian-4 edge-detection kernel.	ee.Kernel.laplacian4(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	
ee.Kernel.laplacian8	Generates a 3x3 Laplacian-8 edge-detection kernel.	ee.Kernel.laplacian8(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	
ee.Kernel.manhattan	Generates a distance kernel based on rectilinear (city-block) distance.	ee.Kernel.manhattan(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: false|Float, default: 1"	
ee.Kernel.octagon	Generates an octagon-shaped boolean kernel.	ee.Kernel.octagon(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.Kernel.plus	Generates a plus-shaped boolean kernel.	ee.Kernel.plus(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.Kernel.prewitt	Generates a 3x3 Prewitt edge-detection kernel.	ee.Kernel.prewitt(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	
ee.Kernel.rectangle	Generates a rectangular-shaped kernel.	ee.Kernel.rectangle(xRadius, yRadius, units, normalize, magnitude)	Kernel	xRadius|yRadius|units|normalize|magnitude	"Float|Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.Kernel.roberts	Generates a 2x2 Roberts edge-detection kernel.	ee.Kernel.roberts(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	
ee.Kernel.rotate	Creates a Kernel.	Kernel.rotate(rotations)	Kernel	kernel|rotations	Kernel|Integer	
ee.Kernel.sobel	Generates a 3x3 Sobel edge-detection kernel.	ee.Kernel.sobel(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	
ee.Kernel.square	Generates a square-shaped boolean kernel.	ee.Kernel.square(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	
ee.List	Constructs a new list.	ee.List(list)	List	list	List	
ee.List.add	Appends the element to the end of list.	List.add(element)	List	list|element	List|Object	
ee.List.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	List.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.List.cat	Concatenates the contents of other onto list.	List.cat(other)	List	list|other	List|List	
ee.List.contains	Returns true if list contains element.	List.contains(element)	Boolean	list|element	List|Object	
ee.List.containsAll	Returns true if list contains all of the elements of other, regardless of order.	List.containsAll(other)	Boolean	list|other	List|List	
ee.List.distinct	Returns a copy of list without duplicate elements.	List.distinct()	List	list	List	
ee.List.equals	Returns true if list contains the same elements as other, in the same order.	List.equals(other)	Boolean	list|other	List|List	
ee.List.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	List.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.List.filter	Filters a list to only the elements that match the given filter. To filter list items that aren't images or features, test a property named 'item', e.g.: ee.Filter.gt('item', 3)	List.filter(filter)	List	list|filter	List|Filter	
ee.List.flatten	Flattens any sublists into a single list.	List.flatten()	List	list	List	
ee.List.frequency	Returns the number of elements in list equal to element.	List.frequency(element)	Integer	list|element	List|Object	
ee.List.get	Returns the element at the specified position in list.  A negative index counts backwards from the end of the list.	List.get(index)	Object	list|index	List|Integer	
ee.List.getArray	Returns the array at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a array, an error will occur.	List.getArray(index)	Array	list|index	List|Integer	
ee.List.getGeometry	Returns the geometry at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a geometry, an error will occur.	List.getGeometry(index)	Geometry	list|index	List|Integer	
ee.List.getInfo	Retrieves the value of this object from the server.	List.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.List.getNumber	Returns the number at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a number, an error will occur.	List.getNumber(index)	Number	list|index	List|Integer	
ee.List.getString	Returns the string at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a string, an error will occur.	List.getString(index)	String	list|index	List|Integer	
ee.List.indexOf	Returns the position of the first occurrence of target in list, or -1 if list does not contain target.	List.indexOf(element)	Integer	list|element	List|Object	
ee.List.indexOfSublist	Returns the starting position of the first occurrence of target within list, or -1 if there is no such occurrence.	List.indexOfSublist(target)	Integer	list|target	List|List	
ee.List.insert	Inserts element at the specified position in list. A negative index counts backwards from the end of the list.	List.insert(index, element)	List	list|index|element	List|Integer|Object	
ee.List.iterate	Iterate an algorithm over a list.  The algorithm is expected to take two objects, the current list item, and the result from the previous iteration or the value of first for the first iteration.	List.iterate(function, first)	Object	list|function|first	List|Algorithm|Object	
ee.List.join	Returns a string containing the elements of the list joined together with the specified separator between elements.	List.join(separator)	String	list|separator	"List|String, default: """""	
ee.List.lastIndexOfSubList	Returns the starting position of the last occurrence of target within list, or -1 if there is no such occurrence.	List.lastIndexOfSubList(target)	Integer	list|target	List|List	
ee.List.length	Returns the number of elements in list.	List.length()	Integer	list	List	
ee.List.map	Map an algorithm over a list.  The algorithm is expected to take an Object and return an Object.	List.map(baseAlgorithm, dropNulls)	List	list|baseAlgorithm|dropNulls	List|Algorithm|Boolean, default: false	
ee.List.reduce	Apply a reducer to a list.  If the reducer takes more than 1 input, then each element in the list is assumed to be a list of inputs.  If the reducer returns a single output, it is returned directly, otherwise returns a dictionary containing the named reducer outputs.	List.reduce(reducer)	Object	list|reducer	List|Reducer	
ee.List.remove	Removes the first occurrence of the specified element from list, if it is present.	List.remove(element)	List	list|element	List|Object	
ee.List.removeAll	Removes from list all of the elements that are contained in other list.	List.removeAll(other)	List	list|other	List|List	
ee.List.repeat	Returns a new list containing value repeated count times.	ee.List.repeat(value, count)	List	value|count	Object|Integer	
ee.List.replace	Replaces the first occurrence of oldVal in list with newVal.	List.replace(oldval, newval)	List	list|oldval|newval	List|Object|Object	
ee.List.replaceAll	Replaces all occurrences of oldVal in list with newVal.	List.replaceAll(oldval, newval)	List	list|oldval|newval	List|Object|Object	
ee.List.reverse	Reverses the order of the elements in list.	List.reverse()	List	list	List	
ee.List.rotate	Rotates the elements of the list by the specified distance.	List.rotate(distance)	List	list|distance	List|Integer	
ee.List.sequence	Generate a sequence of numbers from start to end (inclusive) in increments of step, or in count equally-spaced increments.  If end is not specified it is computed from start + step * count, so at least one of end or count must be specified.	ee.List.sequence(start, end, step, count)	List	start|end|step|count	Number|Number, default: null|Number, default: 1|Integer, default: null	
ee.List.serialize	Returns the serialized representation of this object.	List.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.List.set	Replaces the value at the specified position in list with element.  A negative index counts backwards from the end of the list.	List.set(index, element)	List	list|index|element	List|Integer|Object	
ee.List.shuffle	Randomly permute the specified list.  Note that the permutation order will always be the same for any given seed, unless the value for seed is 'false'.	List.shuffle(seed)	List	list|seed	List|Object, default: null	
ee.List.size	Returns the number of elements in list.	List.size()	Integer	list	List	
ee.List.slice	Returns a portion of list between the start index, inclusive, and end index, exclusive.  Negative values for start or end count backwards from the end of the list.  Values greater than the size of the list are legal but are truncated to the size of list.	List.slice(start, end, step)	List	list|start|end|step	List|Integer|Integer, default: null|Integer, default: null	
ee.List.sort	Sorts the list into ascending order.  If the 'keys' argument is provided, then it is sorted first, and the elements of 'list' are placed in the same order.	List.sort(keys)	List	list|keys	List|List, default: null	
ee.List.splice	Starting at the start index, removes count elements from list and insert the contents of other at that location.  If start is negative, it counts backwards from the end of the list.	List.splice(start, count, other)	List	list|start|count|other	List|Integer|Integer|List, default: null	
ee.List.swap	Swaps the elements at the specified positions.  A negative position counts backwards from the end of the list.	List.swap(pos1, pos2)	List	list|pos1|pos2	List|Integer|Integer	
ee.List.unzip	Transposes a list of lists, extracting the first element of each inner list into one list the second elements into another, etc., up to the length of the shortest inner list. The remaining items are discarded. The result is a list of lists.	List.unzip()	List	list	List	
ee.List.zip	Pairs the elements of two lists to create a list of two-element lists.  When the input lists are of different sizes, the final list has the same size as the shortest one.	List.zip(other)	List	list|other	List|List	
ee.Model.fromAiPlatformPredictor	Returns an ee.Model from a description of an AI Platform prediction model. (See https://cloud.google.com/ml-engine/).	ee.Model.fromAiPlatformPredictor(projectName, projectId, modelName, version, region, inputProperties, inputTypeOverride, inputShapes, proj, fixInputProj, inputTileSize, inputOverlapSize, outputTileSize, outputBands, outputProperties, outputMultiplier)	Model	projectName|projectId|modelName|version|region|inputProperties|inputTypeOverride|inputShapes|proj|fixInputProj|inputTileSize|inputOverlapSize|outputTileSize|outputBands|outputProperties|outputMultiplier	Object, default: null|String, default: null|String, default: null|String, default: null|String, default: null|List, default: null|Dictionary, default: null|Dictionary, default: null|Projection, default: null|Boolean, default: null|List, default: null|List, default: null|List, default: null|Dictionary, default: null|Dictionary, default: null|Float, default: null	
ee.Model.fromVertexAi	Returns an ee.Model from a description of a Vertex AI model endpoint. (See https://cloud.google.com/vertex-ai).	ee.Model.fromVertexAi(endpoint, inputProperties, inputTypeOverride, inputShapes, proj, fixInputProj, inputTileSize, inputOverlapSize, outputTileSize, outputBands, outputProperties, outputMultiplier, maxPayloadBytes, payloadFormat)	Model	endpoint|inputProperties|inputTypeOverride|inputShapes|proj|fixInputProj|inputTileSize|inputOverlapSize|outputTileSize|outputBands|outputProperties|outputMultiplier|maxPayloadBytes|payloadFormat	String, default: null|List, default: null|Dictionary, default: null|Dictionary, default: null|Projection, default: null|Boolean, default: null|List, default: null|List, default: null|List, default: null|Dictionary, default: null|Dictionary, default: null|Float, default: null|Long, default: null|String, default: null	
ee.Model.predictImage	Make predictions from pixel tiles of an image. The predictions are merged as bands with the input image.	Model.predictImage(image)	Image	model|image	Model|Image	
ee.Model.predictProperties	Make predictions for each feature in a collection. Predicted properties are merged with the properties of the input feature.	Model.predictProperties(collection)	FeatureCollection	model|collection	Model|FeatureCollection	
ee.Number	Constructs a new Number.	ee.Number(number)	Number	number	Number|Object	
ee.Number.abs	Computes the absolute value of the input.	Number.abs()	Number	input	Number	
ee.Number.acos	Computes the arc cosine in radians of the input.	Number.acos()	Number	input	Number	
ee.Number.add	Adds the first value to the second.	Number.add(right)	Number	left|right	Number|Number	
ee.Number.and	Returns 1 if and only if both values are non-zero.	Number.and(right)	Number	left|right	Number|Number	
ee.Number.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Number.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.Number.asin	Computes the arc sine in radians of the input.	Number.asin()	Number	input	Number	
ee.Number.atan	Computes the arc tangent in radians of the input.	Number.atan()	Number	input	Number	
ee.Number.atan2	Calculates the angle formed by the 2D vector [x, y].	Number.atan2(right)	Number	left|right	Number|Number	
ee.Number.bitCount	Calculates the number of one-bits in the 64-bit two's complement binary representation of the input.	Number.bitCount()	Number	input	Number	
ee.Number.bitwiseAnd	Calculates the bitwise AND of the input values.	Number.bitwiseAnd(right)	Number	left|right	Number|Number	
ee.Number.bitwiseNot	Calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Number.bitwiseNot()	Number	input	Number	
ee.Number.bitwiseOr	Calculates the bitwise OR of the input values.	Number.bitwiseOr(right)	Number	left|right	Number|Number	
ee.Number.bitwiseXor	Calculates the bitwise XOR of the input values.	Number.bitwiseXor(right)	Number	left|right	Number|Number	
ee.Number.byte	Casts the input value to an unsigned 8-bit integer.	Number.byte()	Number	input	Number	
ee.Number.cbrt	Computes the cubic root of the input.	Number.cbrt()	Number	input	Number	
ee.Number.ceil	Computes the smallest integer greater than or equal to the input.	Number.ceil()	Number	input	Number	
ee.Number.clamp	Clamps the value to lie within the range of min to max.	Number.clamp(min, max)	Number	number|min|max	Number|Float|Float	
ee.Number.cos	Computes the cosine of the input in radians.	Number.cos()	Number	input	Number	
ee.Number.cosh	Computes the hyperbolic cosine of the input.	Number.cosh()	Number	input	Number	
ee.Number.digamma	Computes the digamma function of the input.	Number.digamma()	Number	input	Number	
ee.Number.divide	Divides the first value by the second, returning 0 for division by 0.	Number.divide(right)	Number	left|right	Number|Number	
ee.Number.double	Casts the input value to a 64-bit float.	Number.double()	Number	input	Number	
ee.Number.eq	Returns 1 if and only if the first value is equal to the second.	Number.eq(right)	Number	left|right	Number|Number	
ee.Number.erf	Computes the error function of the input.	Number.erf()	Number	input	Number	
ee.Number.erfInv	Computes the inverse error function of the input.	Number.erfInv()	Number	input	Number	
ee.Number.erfc	Computes the complementary error function of the input.	Number.erfc()	Number	input	Number	
ee.Number.erfcInv	Computes the inverse complementary error function of the input.	Number.erfcInv()	Number	input	Number	
ee.Number.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Number.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.Number.exp	Computes the Euler's number e raised to the power of the input.	Number.exp()	Number	input	Number	
ee.Number.expression	Computes a numeric expression.	ee.Number.expression(expression, vars)	Number	expression|vars	String|Dictionary, default: null	
ee.Number.first	Selects the value of the first value.	Number.first(right)	Number	left|right	Number|Number	
ee.Number.firstNonZero	Selects the first value if it is non-zero, and the second value otherwise.	Number.firstNonZero(right)	Number	left|right	Number|Number	
ee.Number.float	Casts the input value to a 32-bit float.	Number.float()	Number	input	Number	
ee.Number.floor	Computes the largest integer less than or equal to the input.	Number.floor()	Number	input	Number	
ee.Number.format	Convert a number to a string using printf-style formatting.	Number.format(pattern)	String	number|pattern	"Number|String, default: ""%s"""	
ee.Number.gamma	Computes the gamma function of the input.	Number.gamma()	Number	input	Number	
ee.Number.gammainc	Calculates the regularized lower incomplete Gamma function γ(x,a).	Number.gammainc(right)	Number	left|right	Number|Number	
ee.Number.getInfo	Retrieves the value of this object from the server.	Number.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.Number.gt	Returns 1 if and only if the first value is greater than the second.	Number.gt(right)	Number	left|right	Number|Number	
ee.Number.gte	Returns 1 if and only if the first value is greater than or equal to the second.	Number.gte(right)	Number	left|right	Number|Number	
ee.Number.hypot	Calculates the magnitude of the 2D vector [x, y].	Number.hypot(right)	Number	left|right	Number|Number	
ee.Number.int	Casts the input value to a signed 32-bit integer.	Number.int()	Number	input	Number	
ee.Number.int16	Casts the input value to a signed 16-bit integer.	Number.int16()	Number	input	Number	
ee.Number.int32	Casts the input value to a signed 32-bit integer.	Number.int32()	Number	input	Number	
ee.Number.int64	Casts the input value to a signed 64-bit integer.	Number.int64()	Number	input	Number	
ee.Number.int8	Casts the input value to a signed 8-bit integer.	Number.int8()	Number	input	Number	
ee.Number.lanczos	Computes the Lanczos approximation of the input.	Number.lanczos()	Number	input	Number	
ee.Number.leftShift	Calculates the left shift of v1 by v2 bits.	Number.leftShift(right)	Number	left|right	Number|Number	
ee.Number.log	Computes the natural logarithm of the input.	Number.log()	Number	input	Number	
ee.Number.log10	Computes the base-10 logarithm of the input.	Number.log10()	Number	input	Number	
ee.Number.long	Casts the input value to a signed 64-bit integer.	Number.long()	Number	input	Number	
ee.Number.lt	Returns 1 if and only if the first value is less than the second.	Number.lt(right)	Number	left|right	Number|Number	
ee.Number.lte	Returns 1 if and only if the first value is less than or equal to the second.	Number.lte(right)	Number	left|right	Number|Number	
ee.Number.max	Selects the maximum of the first and second values.	Number.max(right)	Number	left|right	Number|Number	
ee.Number.min	Selects the minimum of the first and second values.	Number.min(right)	Number	left|right	Number|Number	
ee.Number.mod	Calculates the remainder of the first value divided by the second.	Number.mod(right)	Number	left|right	Number|Number	
ee.Number.multiply	Multiplies the first value by the second.	Number.multiply(right)	Number	left|right	Number|Number	
ee.Number.neq	Returns 1 if and only if the first value is not equal to the second.	Number.neq(right)	Number	left|right	Number|Number	
ee.Number.not	Returns 0 if the input is non-zero, and 1 otherwise.	Number.not()	Number	input	Number	
ee.Number.or	Returns 1 if and only if either input value is non-zero.	Number.or(right)	Number	left|right	Number|Number	
ee.Number.parse	Convert a string to a number.	ee.Number.parse(input, radix)	Number	input|radix	String|Integer, default: 10	
ee.Number.pow	Raises the first value to the power of the second.	Number.pow(right)	Number	left|right	Number|Number	
ee.Number.rightShift	Calculates the signed right shift of v1 by v2 bits.	Number.rightShift(right)	Number	left|right	Number|Number	
ee.Number.round	Computes the integer nearest to the input.	Number.round()	Number	input	Number	
ee.Number.serialize	Returns the serialized representation of this object.	Number.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.Number.short	Casts the input value to a signed 16-bit integer.	Number.short()	Number	input	Number	
ee.Number.signum	Computes the signum function (sign) of the input; zero if the input is zero, 1 if the input is greater than zero, -1 if the input is less than zero.	Number.signum()	Number	input	Number	
ee.Number.sin	Computes the sine of the input in radians.	Number.sin()	Number	input	Number	
ee.Number.sinh	Computes the hyperbolic sine of the input.	Number.sinh()	Number	input	Number	
ee.Number.sqrt	Computes the square root of the input.	Number.sqrt()	Number	input	Number	
ee.Number.subtract	Subtracts the second value from the first.	Number.subtract(right)	Number	left|right	Number|Number	
ee.Number.tan	Computes the tangent of the input in radians.	Number.tan()	Number	input	Number	
ee.Number.tanh	Computes the hyperbolic tangent of the input.	Number.tanh()	Number	input	Number	
ee.Number.toByte	Casts the input value to an unsigned 8-bit integer.	Number.toByte()	Number	input	Number	
ee.Number.toDouble	Casts the input value to a 64-bit float.	Number.toDouble()	Number	input	Number	
ee.Number.toFloat	Casts the input value to a 32-bit float.	Number.toFloat()	Number	input	Number	
ee.Number.toInt	Casts the input value to a signed 32-bit integer.	Number.toInt()	Number	input	Number	
ee.Number.toInt16	Casts the input value to a signed 16-bit integer.	Number.toInt16()	Number	input	Number	
ee.Number.toInt32	Casts the input value to a signed 32-bit integer.	Number.toInt32()	Number	input	Number	
ee.Number.toInt64	Casts the input value to a signed 64-bit integer.	Number.toInt64()	Number	input	Number	
ee.Number.toInt8	Casts the input value to a signed 8-bit integer.	Number.toInt8()	Number	input	Number	
ee.Number.toLong	Casts the input value to a signed 64-bit integer.	Number.toLong()	Number	input	Number	
ee.Number.toShort	Casts the input value to a signed 16-bit integer.	Number.toShort()	Number	input	Number	
ee.Number.toUint16	Casts the input value to an unsigned 16-bit integer.	Number.toUint16()	Number	input	Number	
ee.Number.toUint32	Casts the input value to an unsigned 32-bit integer.	Number.toUint32()	Number	input	Number	
ee.Number.toUint8	Casts the input value to an unsigned 8-bit integer.	Number.toUint8()	Number	input	Number	
ee.Number.trigamma	Computes the trigamma function of the input.	Number.trigamma()	Number	input	Number	
ee.Number.uint16	Casts the input value to an unsigned 16-bit integer.	Number.uint16()	Number	input	Number	
ee.Number.uint32	Casts the input value to an unsigned 32-bit integer.	Number.uint32()	Number	input	Number	
ee.Number.uint8	Casts the input value to an unsigned 8-bit integer.	Number.uint8()	Number	input	Number	
ee.Number.unitScale	Scales the input so that the range of input values [min, max] becomes [0, 1]. Values outside the range are NOT clamped.  If min == max, 0 is returned.	Number.unitScale(min, max)	Number	number|min|max	Number|Float|Float	
ee.PixelType	Returns a PixelType of the given precision with the given limits per element, and an optional dimensionality.	ee.PixelType(precision, minValue, maxValue, dimensions)	PixelType	precision|minValue|maxValue|dimensions	Object|Number, default: null|Number, default: null|Integer, default: 0	
ee.PixelType.dimensions	Returns the number of dimensions for this type. Will be 0 for scalar values and >= 1 for array values.	PixelType.dimensions()	Integer	pixelType	PixelType	
ee.PixelType.double	Returns the 64-bit floating point pixel type.	ee.PixelType.double()	PixelType			
ee.PixelType.float	UsageReturnsee.PixelType.float()PixelType	ee.PixelType.float()	PixelType			
ee.PixelType.int16	UsageReturnsee.PixelType.int16()PixelType	ee.PixelType.int16()	PixelType			
ee.PixelType.int32	UsageReturnsee.PixelType.int32()PixelType	ee.PixelType.int32()	PixelType			
ee.PixelType.int64	UsageReturnsee.PixelType.int64()PixelType	ee.PixelType.int64()	PixelType			
ee.PixelType.int8	UsageReturnsee.PixelType.int8()PixelType	ee.PixelType.int8()	PixelType			
ee.PixelType.maxValue	UsageReturnsPixelType.maxValue()Number	PixelType.maxValue()	Number	pixelType	PixelType	
ee.PixelType.minValue	Returns the minimum value of the PixelType.	PixelType.minValue()	Number	pixelType	PixelType	
ee.PixelType.precision	Returns the precision of the PixelType.  One of 'int', 'float', or 'double'.	PixelType.precision()	String	pixelType	PixelType	
ee.PixelType.uint16	Returns the 16-bit unsigned integer pixel type.	ee.PixelType.uint16()	PixelType			
ee.PixelType.uint32	UsageReturnsee.PixelType.uint32()PixelType	ee.PixelType.uint32()	PixelType			
ee.PixelType.uint8	UsageReturnsee.PixelType.uint8()PixelType	ee.PixelType.uint8()	PixelType			
ee.Projection	UsageReturnsee.Projection(crs, transform, transformWkt)Projection	ee.Projection(crs, transform, transformWkt)	Projection	crs|transform|transformWkt	Object|List, default: null|String, default: null	
ee.Projection.atScale	Returns the projection scaled such that its units have the given scale in linear meters, as measured at the point of true scale.	Projection.atScale(meters)	Projection	projection|meters	Projection|Float	
ee.Projection.crs	Returns the authority code (e.g. 'EPSG:4326') for the base coordinate system of this projection, or null if the base coordinate system is not found in any available database.	Projection.crs()	String	projection	Projection	
ee.Projection.nominalScale	Returns the linear scale in meters of the units of this projection, as measured at the point of true scale.	Projection.nominalScale()	Float	proj	Projection	
ee.Projection.scale	Returns the projection scaled by the given amount in each axis.	Projection.scale(x, y)	Projection	projection|x|y	Projection|Float|Float	
ee.Projection.transform	Returns a WKT representation of the transform of this Projection. This is the transform that converts from projected coordinates to the base coordinate system.	Projection.transform()	String	projection	Projection	
ee.Projection.translate	Returns the projection translated by the given amount in each axis.	Projection.translate(x, y)	Projection	projection|x|y	Projection|Float|Float	
ee.Projection.wkt	Returns a WKT representation of the base coordinate system of this Projection.	Projection.wkt()	String	projection	Projection	
ee.Reducer.allNonZero	Returns a Reducer that returns 1 if all of its inputs are non-zero, 0 otherwise.	ee.Reducer.allNonZero()	Reducer			
ee.Reducer.anyNonZero	UsageReturnsee.Reducer.anyNonZero()Reducer	ee.Reducer.anyNonZero()	Reducer			
ee.Reducer.autoHistogram	UsageReturnsee.Reducer.autoHistogram(maxBuckets, minBucketWidth, maxRaw, cumulative)Reducer	ee.Reducer.autoHistogram(maxBuckets, minBucketWidth, maxRaw, cumulative)	Reducer	maxBuckets|minBucketWidth|maxRaw|cumulative	Integer, default: null|Float, default: null|Integer, default: null|Boolean, default: false	
ee.Reducer.bitwiseAnd	Returns a Reducer that computes the bitwise-and summation of its inputs.	ee.Reducer.bitwiseAnd()	Reducer			
ee.Reducer.bitwiseOr	UsageReturnsee.Reducer.bitwiseOr()Reducer	ee.Reducer.bitwiseOr()	Reducer			
ee.Reducer.centeredCovariance	UsageReturnsee.Reducer.centeredCovariance()Reducer	ee.Reducer.centeredCovariance()	Reducer			
ee.Reducer.circularMean	UsageReturnsee.Reducer.circularMean()Reducer	ee.Reducer.circularMean()	Reducer			
ee.Reducer.circularStddev	UsageReturnsee.Reducer.circularStddev()Reducer	ee.Reducer.circularStddev()	Reducer			
ee.Reducer.circularVariance	UsageReturnsee.Reducer.circularVariance()Reducer	ee.Reducer.circularVariance()	Reducer			
ee.Reducer.combine	UsageReturnsReducer.combine(reducer2, outputPrefix, sharedInputs)Reducer	Reducer.combine(reducer2, outputPrefix, sharedInputs)	Reducer	reducer1|reducer2|outputPrefix|sharedInputs	"Reducer|Reducer|String, default: """"|Boolean, default: false"	
ee.Reducer.count	Returns a Reducer that computes the number of non-null inputs.	ee.Reducer.count()	Reducer			
ee.Reducer.countDistinct	UsageReturnsee.Reducer.countDistinct()Reducer	ee.Reducer.countDistinct()	Reducer			
ee.Reducer.countDistinctNonNull	UsageReturnsee.Reducer.countDistinctNonNull()Reducer	ee.Reducer.countDistinctNonNull()	Reducer			
ee.Reducer.countEvery	UsageReturnsee.Reducer.countEvery()Reducer	ee.Reducer.countEvery()	Reducer			
ee.Reducer.countRuns	UsageReturnsee.Reducer.countRuns()Reducer	ee.Reducer.countRuns()	Reducer			
ee.Reducer.covariance	UsageReturnsee.Reducer.covariance()Reducer	ee.Reducer.covariance()	Reducer			
ee.Reducer.disaggregate	UsageReturnsReducer.disaggregate(axis)Reducer	Reducer.disaggregate(axis)	Reducer	reducer|axis	Reducer|Integer, default: null	
ee.Reducer.first	Returns a Reducer that returns the first of its inputs.	ee.Reducer.first()	Reducer			
ee.Reducer.firstNonNull	UsageReturnsee.Reducer.firstNonNull()Reducer	ee.Reducer.firstNonNull()	Reducer			
ee.Reducer.fixed2DHistogram	UsageReturnsee.Reducer.fixed2DHistogram(xMin, xMax, xSteps, yMin, yMax, ySteps)Reducer	ee.Reducer.fixed2DHistogram(xMin, xMax, xSteps, yMin, yMax, ySteps)	Reducer	xMin|xMax|xSteps|yMin|yMax|ySteps	Float|Float|Integer|Float|Float|Integer	
ee.Reducer.fixedHistogram	Creates a reducer that will compute a histogram of the inputs using a fixed number of fixed width bins. Values outside of the [min, max) range are ignored.  The output is a Nx2 array of bucket lower edges and counts (or cumulative counts) and is suitable for use per-pixel.	ee.Reducer.fixedHistogram(min, max, steps, cumulative)	Reducer	min|max|steps|cumulative	Float|Float|Integer|Boolean, default: false	
ee.Reducer.forEach	Creates a Reducer by combining a copy of the given reducer for each output name in the given list.  If the reducer has a single output, the output names are used as-is; otherwise they are prefixed to the original output names.	Reducer.forEach(outputNames)	Reducer	reducer|outputNames	Reducer|List	
ee.Reducer.forEachBand	Creates a Reducer by combining a copy of the given reducer for each band in the given image, using the band names as output names.	Reducer.forEachBand(image)	Reducer	reducer|image	Reducer|Image	
ee.Reducer.forEachElement	Separately reduces each position in array inputs of equal shape, producing an array output of the same shape.	Reducer.forEachElement()	Reducer	reducer	Reducer	
ee.Reducer.frequencyHistogram	Returns a Reducer that returns a (weighted) frequency table of its inputs.	ee.Reducer.frequencyHistogram()	Reducer			
ee.Reducer.geometricMedian	UsageReturnsee.Reducer.geometricMedian(numX, eta, initialStepSize)Reducer	ee.Reducer.geometricMedian(numX, eta, initialStepSize)	Reducer	numX|eta|initialStepSize	Integer|Float, default: 0.001|Float, default: 10	
ee.Reducer.getOutputs	Returns a list of the output names of the given reducer.	Reducer.getOutputs()	List	reducer	Reducer	
ee.Reducer.group	Groups reducer records by the value of a given input, and reduces each group with the given reducer.	Reducer.group(groupField, groupName)	Reducer	reducer|groupField|groupName	"Reducer|Integer, default: 0|String, default: ""group"""	
ee.Reducer.histogram	Create a reducer that will compute a histogram of the inputs.	ee.Reducer.histogram(maxBuckets, minBucketWidth, maxRaw)	Reducer	maxBuckets|minBucketWidth|maxRaw	Integer, default: null|Float, default: null|Integer, default: null	
ee.Reducer.intervalMean	Creates a Reducer to compute the mean of all inputs in the specified percentile range.  For small numbers of inputs (up to maxRaw) the mean will be computed directly; for larger numbers of inputs the mean will be derived from a histogram.	ee.Reducer.intervalMean(minPercentile, maxPercentile, maxBuckets, minBucketWidth, maxRaw)	Reducer	minPercentile|maxPercentile|maxBuckets|minBucketWidth|maxRaw	Float|Float|Integer, default: null|Float, default: null|Integer, default: null	
ee.Reducer.kendallsCorrelation	Creates a reducer that computes the Kendall's Tau-b rank correlation.  A positive tau value indicates an increasing trend; negative value indicates a decreasing trend. See https://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/stat/correlation/KendallsCorrelation.html for details.	ee.Reducer.kendallsCorrelation(numInputs)	Reducer	numInputs	Integer, default: 1	
ee.Reducer.kurtosis	Returns a Reducer that Computes the kurtosis of its inputs.	ee.Reducer.kurtosis()	Reducer			
ee.Reducer.last	UsageReturnsee.Reducer.last()Reducer	ee.Reducer.last()	Reducer			
ee.Reducer.lastNonNull	UsageReturnsee.Reducer.lastNonNull()Reducer	ee.Reducer.lastNonNull()	Reducer			
ee.Reducer.linearFit	UsageReturnsee.Reducer.linearFit()Reducer	ee.Reducer.linearFit()	Reducer			
ee.Reducer.linearRegression	UsageReturnsee.Reducer.linearRegression(numX, numY)Reducer	ee.Reducer.linearRegression(numX, numY)	Reducer	numX|numY	Integer|Integer, default: 1	
ee.Reducer.max	Creates a reducer that outputs the maximum value of its (first) input.  If numInputs is greater than one, also outputs the corresponding values of the additional inputs.	ee.Reducer.max(numInputs)	Reducer	numInputs	Integer, default: 1	
ee.Reducer.mean	Returns a Reducer that computes the (weighted) arithmetic mean of its inputs.	ee.Reducer.mean()	Reducer			
ee.Reducer.median	UsageReturnsee.Reducer.median(maxBuckets, minBucketWidth, maxRaw)Reducer	ee.Reducer.median(maxBuckets, minBucketWidth, maxRaw)	Reducer	maxBuckets|minBucketWidth|maxRaw	Integer, default: null|Float, default: null|Integer, default: null	
ee.Reducer.min	Creates a reducer that outputs the minimum value of its (first) input.  If numInputs is greater than one, also outputs the corresponding values of the additional inputs.	ee.Reducer.min(numInputs)	Reducer	numInputs	Integer, default: 1	
ee.Reducer.minMax	Returns a Reducer that computes the minimum and maximum of its inputs.	ee.Reducer.minMax()	Reducer			
ee.Reducer.mode	UsageReturnsee.Reducer.mode(maxBuckets, minBucketWidth, maxRaw)Reducer	ee.Reducer.mode(maxBuckets, minBucketWidth, maxRaw)	Reducer	maxBuckets|minBucketWidth|maxRaw	Integer, default: null|Float, default: null|Integer, default: null	
ee.Reducer.pearsonsCorrelation	Creates a two-input reducer that computes Pearson's product-moment correlation coefficient and the 2-sided p-value test for correlation = 0.	ee.Reducer.pearsonsCorrelation()	Reducer			
ee.Reducer.percentile	UsageReturnsee.Reducer.percentile(percentiles, outputNames, maxBuckets, minBucketWidth, maxRaw)Reducer	ee.Reducer.percentile(percentiles, outputNames, maxBuckets, minBucketWidth, maxRaw)	Reducer	percentiles|outputNames|maxBuckets|minBucketWidth|maxRaw	List|List, default: null|Integer, default: null|Float, default: null|Integer, default: null	
ee.Reducer.product	Returns a Reducer that computes the product of its inputs.	ee.Reducer.product()	Reducer			
ee.Reducer.repeat	UsageReturnsReducer.repeat(count)Reducer	Reducer.repeat(count)	Reducer	reducer|count	Reducer|Integer	
ee.Reducer.ridgeRegression	Creates a reducer that computes a ridge regression with numX independent variables (not including constant) followed by numY dependent variables.  Ridge regression is a form of Tikhonov regularization which shrinks the regression coefficients by imposing a penalty on their size. With this implementation of ridge regression there NO NEED to include a constant value for bias.	ee.Reducer.ridgeRegression(numX, numY, lambda)	Reducer	numX|numY|lambda	Integer|Integer, default: 1|Float, default: 0.1	
ee.Reducer.robustLinearRegression	Creates a reducer that computes a robust least squares regression with numX independent variables and numY dependent variables, using iteratively reweighted least squares with the Talwar cost function. A point is considered an outlier if the RMS of residuals is greater than beta.	ee.Reducer.robustLinearRegression(numX, numY, beta)	Reducer	numX|numY|beta	Integer|Integer, default: 1|Float, default: null	
ee.Reducer.sampleStdDev	Returns a Reducer that computes the sample standard deviation of its inputs.	ee.Reducer.sampleStdDev()	Reducer			
ee.Reducer.sampleVariance	UsageReturnsee.Reducer.sampleVariance()Reducer	ee.Reducer.sampleVariance()	Reducer			
ee.Reducer.sensSlope	UsageReturnsee.Reducer.sensSlope()Reducer	ee.Reducer.sensSlope()	Reducer			
ee.Reducer.setOutputs	UsageReturnsReducer.setOutputs(outputs)Reducer	Reducer.setOutputs(outputs)	Reducer	reducer|outputs	Reducer|List	
ee.Reducer.skew	Returns a Reducer that Computes the skewness of its inputs.	ee.Reducer.skew()	Reducer			
ee.Reducer.spearmansCorrelation	UsageReturnsee.Reducer.spearmansCorrelation()Reducer	ee.Reducer.spearmansCorrelation()	Reducer			
ee.Reducer.splitWeights	UsageReturnsReducer.splitWeights()Reducer	Reducer.splitWeights()	Reducer	reducer	Reducer	
ee.Reducer.stdDev	Returns a Reducer that computes the standard deviation of its inputs.	ee.Reducer.stdDev()	Reducer			
ee.Reducer.sum	UsageReturnsee.Reducer.sum()Reducer	ee.Reducer.sum()	Reducer			
ee.Reducer.toCollection	UsageReturnsee.Reducer.toCollection(propertyNames, numOptional)Reducer	ee.Reducer.toCollection(propertyNames, numOptional)	Reducer	propertyNames|numOptional	List|Integer, default: 0	
ee.Reducer.toList	Creates a reducer that collects its inputs into a list, optionally grouped into tuples.	ee.Reducer.toList(tupleSize, numOptional)	Reducer	tupleSize|numOptional	Integer, default: null|Integer, default: 0	
ee.Reducer.unweighted	Returns a Reducer with the same inputs and outputs as the given Reducer, but with no weighted inputs.	Reducer.unweighted()	Reducer	reducer	Reducer	
ee.Reducer.variance	Returns a Reducer that computes the variance of its inputs.	ee.Reducer.variance()	Reducer			
ee.String	UsageReturnsee.String(string)String	ee.String(string)	String	string	Object|String	
ee.String.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	String.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	
ee.String.cat	Concatenates two strings.	String.cat(string2)	String	string1|string2	String|String	
ee.String.compareTo	Compares two strings lexicographically. Returns: the value 0 if the two strings are lexicographically equal; a value less than 0 if string1 is less than string2;  and a value greater than 0 if string1 is lexicographically greater than string2.	String.compareTo(string2)	Integer	string1|string2	String|String	
ee.String.decodeJSON	Decodes a JSON string.	String.decodeJSON()	Object	string	String	
ee.String.encodeJSON	Encodes an object to JSON.  Supports primitives, lists and dictionaries.	ee.String.encodeJSON(object)	String	object	Object	
ee.String.equals	Checks for string equality with a given object. Returns true if the target is a string and is lexicographically equal to the reference, or false otherwise.	String.equals(target)	Boolean	reference|target	String|Object	
ee.String.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	String.evaluate(callback)		computedobject|callback	ComputedObject|Function	
ee.String.getInfo	Retrieves the value of this object from the server.	String.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	
ee.String.index	Searches a string for the first occurrence of a substring.  Returns the index of the first match, or -1.	String.index(pattern)	Integer	target|pattern	String|String	
ee.String.length	Returns the length of a string.	String.length()	Integer	string	String	
ee.String.match	Matches a string against a regular expression.  Returns a list of matching strings.	String.match(regex, flags)	List	input|regex|flags	"String|String|String, default: """""	
ee.String.replace	Returns a new string with some or all matches of a pattern replaced.	String.replace(regex, replacement, flags)	String	input|regex|replacement|flags	"String|String|String|String, default: """""	
ee.String.rindex	Searches a string for the last occurrence of a substring.  Returns the index of the first match, or -1.	String.rindex(pattern)	Integer	target|pattern	String|String	
ee.String.serialize	Returns the serialized representation of this object.	String.serialize(legacy)	String	computedobject|legacy	ComputedObject|Boolean, optional	
ee.String.slice	Returns a substring of the given string. If the specified range exceeds the length of the string, returns a shorter substring.	String.slice(start, end)	String	string|start|end	String|Integer|Integer, default: null	
ee.String.split	Splits a string on a regular expression, Returning a list of strings.	String.split(regex, flags)	List	string|regex|flags	"String|String|String, default: """""	
ee.String.toLowerCase	Converts all of the characters in a string to lower case.	String.toLowerCase()	String	string	String	
ee.String.toUpperCase	Converts all of the characters in a string to upper case.	String.toUpperCase()	String	string	String	
ee.String.trim	Returns a string whose value is the original string, with any leading and trailing whitespace removed.	String.trim()	String	string	String	
ee.Terrain.aspect	Calculates aspect in degrees from a terrain DEM.	ee.Terrain.aspect(input)	Image	input	Image	
ee.Terrain.fillMinima	Fills local minima.  Only works on INT types.	ee.Terrain.fillMinima(image, borderValue, neighborhood)	Image	image|borderValue|neighborhood	Image|Long, default: null|Integer, default: 50	
ee.Terrain.hillShadow	Creates a shadow band, with output 1 where pixels are illumunated and 0 where they are shadowed. Takes as input an elevation band, azimuth and zenith of the light source in degrees, a neighborhood size, and whether or not to apply hysteresis when a shadow appears. Currently, this algorithm only works for Mercator projections, in which light rays are parallel.	ee.Terrain.hillShadow(image, azimuth, zenith, neighborhoodSize, hysteresis)	Image	image|azimuth|zenith|neighborhoodSize|hysteresis	Image|Float|Float|Integer, default: 0|Boolean, default: false	
ee.Terrain.hillshade	Computes a simple hillshade from a DEM.	ee.Terrain.hillshade(input, azimuth, elevation)	Image	input|azimuth|elevation	Image|Float, default: 270|Float, default: 45	
ee.Terrain.products	Calculates slope, aspect, and a simple hillshade from a terrain DEM.	ee.Terrain.products(input)	Image	input	Image	
ee.Terrain.slope	Calculates slope in degrees from a terrain DEM.	ee.Terrain.slope(input)	Image	input	Image	
ee.apply	Call a function with a dictionary of named arguments.	ee.apply(func, namedArgs)	ComputedObject	func|namedArgs	Function|String|Object	
ee.call	Call a function with the given positional arguments.	ee.call(func, var_args)	ComputedObject	func|var_args	Function|String|VarArgs	
ee.data.authenticateViaOauth	Configures client-side authentication of EE API calls through the Google APIs Client Library for JavaScript. The library will be loaded automatically if it is not already loaded on the page. The user will be asked to grant the application identified by clientId access to their EE data if they have not done so previously.	ee.data.authenticateViaOauth(clientId, success, error, extraScopes, onImmediateFailed, suppressDefaultScopes)		clientId|success|error|extraScopes|onImmediateFailed|suppressDefaultScopes	String|Function|Function, optional|List, optional|Function, optional|Boolean, optional	
ee.data.authenticateViaPopup	Shows a popup asking for the user's permission. Should only be called if ee.data.authenticate() called its opt_onImmediateFailed argument in the past.	ee.data.authenticateViaPopup(success, error)		success|error	Function, optional|Function, optional	
ee.data.authenticateViaPrivateKey	Configures server-side authentication of EE API calls through the Google APIs Node.js Client. Private key authentication is strictly for server-side API calls: for browser-based applications, use ee.data.authenticateViaOauth(). No user interaction (e.g. authentication popup) is necessary when using server-side authentication.	ee.data.authenticateViaPrivateKey(privateKey, success, error, extraScopes, suppressDefaultScopes)		privateKey|success|error|extraScopes|suppressDefaultScopes	AuthPrivateKey|Function, optional|Function, optional|List, optional|Boolean, optional	
ee.data.cancelOperation	Cancels the given operation(s).	ee.data.cancelOperation(operationName, callback)		operationName|callback	List|Function, optional	
ee.data.computeValue	Sends a request to compute a value.	ee.data.computeValue(obj, callback)	Object|Value	obj|callback	Object|Function, optional	
ee.data.copyAsset	Copies the asset from sourceId into destinationId.	ee.data.copyAsset(sourceId, destinationId, overwrite, callback)		sourceId|destinationId|overwrite|callback	String|String|Boolean, optional|Function, optional	
ee.data.createAsset	"Creates an asset from a JSON value. To create an empty image collection or folder, pass in a ""value"" object with a ""type"" key whose value is one of ee.data.AssetType.* (i.e. ""ImageCollection"" or ""Folder"")."	ee.data.createAsset(value, path, force, properties, callback)	Object	value|path|force|properties|callback	Object|String, optional|Boolean, optional|Object, optional|Function, optional	
ee.data.createAssetHome	"Attempts to create a home root folder (e.g. ""users/joe"") for the current user. This results in an error if the user already has a home root folder or the requested ID is unavailable."	ee.data.createAssetHome(requestedId, callback)		requestedId|callback	String|Function, optional	
ee.data.createFolder	Creates an asset folder.	ee.data.createFolder(path, force, callback)	Object	path|force|callback	String|Boolean, optional|Function, optional	
ee.data.deleteAsset	Deletes the asset with the given id.	ee.data.deleteAsset(assetId, callback)		assetId|callback	String|Function, optional	
ee.data.getAsset	Load info for an asset, given an asset id.	ee.data.getAsset(id, callback)	Object	id|callback	String|Function, optional	
ee.data.getAssetAcl	Returns the access control list of the asset with the given ID.	ee.data.getAssetAcl(assetId, callback)	AssetAcl	assetId|callback	String|Function, optional	
ee.data.getAssetRootQuota	Returns quota usage details for the asset root with the given ID.	ee.data.getAssetRootQuota(rootId, callback)	AssetQuotaDetails	rootId|callback	String|Function, optional	
ee.data.getDownloadId	Get a Download ID.	ee.data.getDownloadId(params, callback)	DownloadId	params| name: | bands: | id: | crs: | crs_transform: | dimensions: | scale: | crs: | crs_transform: |crs_transform| dimensions: | scale: |crs|crs_transform| region: |crs|crs_transform| filePerBand: | format: | id: |callback	"Object| bands:  a description of the bands to download. Must be an array of band names or an array of dictionaries, each with the following keys (optional parameters apply only when filePerBand is true):
 id:  the name of the band, a string, required.

 crs:  an optional CRS string defining the band projection.
 crs_transform:  an optional array of 6 numbers specifying an affine transform from the specified CRS, in row-major order: [xScale, xShearing, xTranslation, yShearing, yScale, yTranslation]
 dimensions:  an optional array of two integers defining the width and height to which the band is cropped.
 scale:  an optional number, specifying the scale in meters of the band; ignored if crs and crs_transform are specified.| dimensions:  default image cropping dimensions to use for any bands that do not specify them.| filePerBand:  whether to produce a separate GeoTIFF per band (boolean). Defaults to true. If false, a single GeoTIFF is produced and all band-level transformations will be ignored.|callback"	
ee.data.getFeatureViewTilesKey	Get a tiles key for a given map or asset. The tiles key can be passed to an instance of FeatureViewTileSource which can be rendered on a base map outside of the Code Editor.	ee.data.getFeatureViewTilesKey(params, callback)	FeatureViewTilesKey	params| assetId | visParams |callback	FeatureViewVisualizationParameters| visParams  (Object) The visualization parameters for this layer.|An optional callback. If not supplied, the call is made synchronously.	
ee.data.getFilmstripThumbId	Get a Filmstrip Thumbnail Id for a given asset.	ee.data.getFilmstripThumbId(params, callback)	ThumbnailId	params|callback	FilmstripThumbnailOptions|Function, optional	
ee.data.getMapId	Get a Map ID for a given asset	ee.data.getMapId(params, callback)	RawMapId	params| image | version | bands | min | max | gain | bias | gamma | palette | opacity | format |callback	"ImageVisualizationParameters| version  (number) Version number of image (or latest).| max  (comma-separated numbers) Value (or one per band) to map onto FF.| gamma  (comma-separated numbers) Gamma correction factor (or one per band).| format  (string) Either ""jpg"" or ""png"".|An optional callback. If not supplied, the call is made synchronously."	
ee.data.getOperation	Gets information on an operation or list of operations.	ee.data.getOperation(operationName, callback)	Dictionary|api.Operation	operationName|callback	List|Function, optional	
ee.data.getTableDownloadId	Get a download ID.	ee.data.getTableDownloadId(params, callback)	DownloadId	params| table: | format: | selectors: | filename: |callback	Object| format:  The download format, CSV, JSON, KML, KMZ or TF_RECORD.|callback	
ee.data.getThumbId	Get a Thumbnail Id for a given asset.	ee.data.getThumbId(params, callback)	ThumbnailId	params| image | bands | format | name |callback	ThumbnailOptions| bands  (array of strings) An array of band names.|callback	
ee.data.getTileUrl	Generate a URL for map tiles from a Map ID and coordinates. If formatTileUrl is not present, we generate it by using or guessing the urlFormat string, and add urlFormat and formatTileUrl to id for future use.	ee.data.getTileUrl(id, x, y, z)	String	id|x|y|z	RawMapId|Number|Number|Number	
ee.data.getVideoThumbId	Get a Video Thumbnail Id for a given asset.	ee.data.getVideoThumbId(params, callback)	ThumbnailId	params|callback	VideoThumbnailOptions|Function, optional	
ee.data.getWorkloadTag	Returns the currently set workload tag.	ee.data.getWorkloadTag()	String			
ee.data.listAssets	UsageReturnsee.data.listAssets(parent, params, callback)api.ListAssetsResponse	ee.data.listAssets(parent, params, callback)	api.ListAssetsResponse	"parent|params| pageSize | pageToken | filter |properties.my_property>=1 AND properties.my_property<2 AND startTime >= ""2019-01-01T00:00:00.000Z"" AND endTime < ""2020-01-01T00:00:00.000Z"" AND intersects(""{'type':'Point','coordinates':[0,0]}"")| view |callback"	String|api.ProjectsAssetsListAssetsNamedParameters, optional| pageToken  (string) The token for the page of results to return.|callback	
ee.data.listBuckets	Returns top-level assets and folders for the Cloud Project or user. Leave the project field blank to use the current project.	ee.data.listBuckets(project, callback)	api.ListAssetsResponse	project|callback	String, optional|Function, optional	
ee.data.listFeatures	List features for a given table asset.	ee.data.listFeatures(asset, params, callback)	api.ListFeaturesResponse	asset|params| pageSize | pageToken | region | filter |callback	String|api.ProjectsAssetsListFeaturesNamedParameters| pageToken  (string): An optional token identifying a page of results the server should return, usually taken from the response object.|callback	
ee.data.listImages	Returns a list of the contents in an image collection, in an object that includes an images array and an optional nextPageToken.	ee.data.listImages(parent, params, callback)	ListImagesResponse	"parent|params| pageSize | pageToken | startTime | endTime | region | properties | filter |properties.my_property>=1 AND properties.my_property<2 AND startTime >= ""2019-01-01T00:00:00.000Z"" AND endTime < ""2020-01-01T00:00:00.000Z"" AND intersects(""{'type':'Point','coordinates':[0,0]}"")| view |callback"	"String|Object, optional| pageToken  (string) The token page of results to return.| region  (GeoJSON or WKT string) A region to filter on.| view  (string) Specifies how much detail is returned in the list. Either ""FULL"" (default) for all image properties or ""BASIC"".|If not supplied, the call is made synchronously."	
ee.data.listOperations	Returns see getOperation for details on the Operation object.	ee.data.listOperations(limit, callback)	List	limit|callback	Number, optional|Function, optional	
ee.data.makeDownloadUrl	Create a download URL from a docid and token.	ee.data.makeDownloadUrl(id)	String	id	DownloadId	
ee.data.makeTableDownloadUrl	Create a table download URL from a docid and token.	ee.data.makeTableDownloadUrl(id)	String	id	DownloadId	
ee.data.makeThumbUrl	Create a thumbnail URL from a thumbid and token.	ee.data.makeThumbUrl(id)	String	id	ThumbnailId	
ee.data.newTaskId	"Generates an ""unsubmitted"" ID for a long-running task."	ee.data.newTaskId(count, callback)	List	count|callback	Number, optional|Function, optional	
ee.data.renameAsset	Renames the asset from sourceId to destinationId.	ee.data.renameAsset(sourceId, destinationId, callback)		sourceId|destinationId|callback	String|String|Function, optional	
ee.data.resetWorkloadTag	Resets the tag back to the default. If resetDefault parameter is set to true, the default will be set to empty before resetting.	ee.data.resetWorkloadTag(resetDefault)		resetDefault	Boolean, optional	
ee.data.setAssetAcl	Sets the access control list of the asset with the given ID.	ee.data.setAssetAcl(assetId, aclUpdate, callback)		assetId|aclUpdate|callback	String|AssetAclUpdate|Function, optional	
ee.data.setDefaultWorkloadTag	Sets the workload tag, and as the default for which to reset back to.	ee.data.setDefaultWorkloadTag(tag)		tag	String	
ee.data.setWorkloadTag	Sets the workload tag, used to label computation and exports.	ee.data.setWorkloadTag(tag)		tag	String	
ee.data.startIngestion	Creates an image asset ingestion task.	ee.data.startIngestion(taskId, request, callback)	ProcessingResponse	taskId|request|callback	String|IngestionRequest|Function, optional	
ee.data.startProcessing	Create processing task that exports or pre-renders an image.	ee.data.startProcessing(taskId, params, callback)	ProcessingResponse	taskId|params|callback	String|Object|Function, optional	
ee.data.startTableIngestion	Creates a table asset ingestion task.	ee.data.startTableIngestion(taskId, request, callback)	ProcessingResponse	taskId|request|callback	String|TableIngestionRequest|Function, optional	
ee.data.updateAsset	Updates an asset.	ee.data.updateAsset(assetId, asset, updateFields, callback)	Object	assetId|asset|updateFields|callback	String|api.EarthEngineAsset|List|Function, optional	
ee.data.updateTask	Update one or more tasks' properties. For now, only the following properties may be updated: State (to CANCELLED)	ee.data.updateTask(taskId, action, callback)	List	taskId|action|callback	List|TaskUpdateActions|Function, optional	
ee.initialize	Initialize the library.  If this hasn't been called by the time any object constructor is used, it will be called then.  If this is called a second time with a different baseurl or tileurl, this doesn't do an un-initialization of e.g.: the previously loaded Algorithms, but will overwrite them and let point at alternate servers.	ee.initialize(baseurl, tileurl, successCallback, errorCallback, xsrfToken, project)		baseurl|tileurl|successCallback|errorCallback|xsrfToken|project	String, optional|String, optional|Function, optional|Function, optional|String, optional|String, optional	
ee.reset	Reset the library to its base state. Useful for re-initializing to a different server.	ee.reset()				
Export.classifier.toAsset	UsageReturnsExport.classifier.toAsset(classifier, description, assetId)	Export.classifier.toAsset(classifier, description, assetId)		classifier|description|assetId	ComputedObject|String, optional|String, optional	
Export.image.toAsset	Creates a batch task to export an Image as a raster to an Earth Engine asset. Tasks can be started from the Tasks tab.	Export.image.toAsset(image, description, assetId, pyramidingPolicy, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, priority)		image|description|assetId|pyramidingPolicy|dimensions|region|scale|crs|crsTransform|maxPixels|shardSize|priority	Image|String, optional|String, optional|Object, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|List, optional|Number, optional|Number, optional|Number, optional	
Export.image.toCloudStorage	Creates a batch task to export an Image as a raster to Google Cloud Storage. Tasks can be started from the Tasks tab.	Export.image.toCloudStorage(image, description, bucket, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions, priority)		image|description|bucket|fileNamePrefix|dimensions|region|scale|crs|crsTransform|maxPixels|shardSize|fileDimensions|skipEmptyTiles|fileFormat|formatOptions|priority	Image|String, optional|String, optional|String, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|List, optional|Number, optional|Number, optional|List, optional|Boolean, optional|String, optional|ImageExportFormatConfig, optional|Number, optional	
Export.image.toDrive	"Creates a batch task to export an Image as a raster to Drive. Tasks can be started from the Tasks tab. ""crsTransform"", ""scale"", and ""dimensions"" are mutually exclusive."	Export.image.toDrive(image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions, priority)		image|description|folder|fileNamePrefix|dimensions|region|scale|crs|crsTransform|maxPixels|shardSize|fileDimensions|skipEmptyTiles|fileFormat|formatOptions|priority	Image|String, optional|String, optional|String, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|List, optional|Number, optional|Number, optional|List, optional|Boolean, optional|String, optional|ImageExportFormatConfig, optional|Number, optional	
Export.map.toCloudStorage	Creates a batch task to export an Image as a rectangular pyramid of map tiles for use with web map viewers. The map tiles will be accompanied by a reference index.html file that displays them using the Google Maps API, and an earth.html file for opening the map on Google Earth.	Export.map.toCloudStorage(image, description, bucket, fileFormat, path, writePublicTiles, maxZoom, scale, minZoom, region, skipEmptyTiles, mapsApiKey, bucketCorsUris, priority)		image|description|bucket|fileFormat|path|writePublicTiles|maxZoom|scale|minZoom|region|skipEmptyTiles|mapsApiKey|bucketCorsUris|priority	Image|String, optional|String, optional|String, optional|String, optional|Boolean, optional|Number, optional|Number, optional|Number, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Boolean, optional|String, optional|List, optional|Number, optional	
Export.table.toAsset	Creates a batch task to export a feature collection to an Earth Engine table asset. Tasks can be started from the Tasks tab.	Export.table.toAsset(collection, description, assetId, maxVertices, priority)		collection|description|assetId|maxVertices|priority	FeatureCollection|String, optional|String, optional|Number, optional|Number, optional	
Export.table.toBigQuery	Creates a batch task to export a FeatureCollection to BigQuery. Tasks can be started from the Tasks tab.	Export.table.toBigQuery(collection, description, table, overwrite, append, selectors, maxVertices, priority)		collection|description|table|overwrite|append|selectors|maxVertices|priority	FeatureCollection|String, optional|String, optional|Boolean, optional|Boolean, optional|List, optional|Number, optional|Number, optional	
Export.table.toCloudStorage	Creates a batch task to export a FeatureCollection as a table to Google Cloud Storage. Tasks can be started from the Tasks tab.	Export.table.toCloudStorage(collection, description, bucket, fileNamePrefix, fileFormat, selectors, maxVertices, priority)		collection|description|bucket|fileNamePrefix|fileFormat|selectors|maxVertices|priority	FeatureCollection|String, optional|String, optional|String, optional|String, optional|List, optional|Number, optional|Number, optional	
Export.table.toDrive	Creates a batch task to export a FeatureCollection as a table to Drive. Tasks can be started from the Tasks tab.	Export.table.toDrive(collection, description, folder, fileNamePrefix, fileFormat, selectors, maxVertices, priority)		collection|description|folder|fileNamePrefix|fileFormat|selectors|maxVertices|priority	FeatureCollection|String, optional|String, optional|String, optional|String, optional|List, optional|Number, optional|Number, optional	
Export.table.toFeatureView	Creates a batch task to export a FeatureCollection to a FeatureView asset. Tasks can be started from the Tasks tab.	Export.table.toFeatureView(collection, description, assetId, maxFeaturesPerTile, thinningStrategy, thinningRanking, zOrderRanking, priority)		collection|description|assetId|maxFeaturesPerTile|thinningStrategy|thinningRanking|zOrderRanking|priority	FeatureCollection|String, optional|String, optional|Number, optional|String, optional|List, optional|List, optional|Number, optional	
Export.video.toCloudStorage	"Creates a batch task to export an ImageCollection as a video to Google Cloud Storage. The collection must only contain RGB images. Tasks can be started from the Tasks tab. ""crsTransform"", ""scale"", and ""dimensions"" are mutually exclusive."	Export.video.toCloudStorage(collection, description, bucket, fileNamePrefix, framesPerSecond, dimensions, region, scale, crs, crsTransform, maxPixels, maxFrames, priority)		collection|description|bucket|fileNamePrefix|framesPerSecond|dimensions|region|scale|crs|crsTransform|maxPixels|maxFrames|priority	ImageCollection|String, optional|String, optional|String, optional|Number, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|String, optional|Number, optional|Number, optional|Number, optional	
Export.video.toDrive	"Creates a batch task to export an ImageCollection as a video to Drive. The collection must only contain RGB images. Tasks can be started from the Tasks tab. ""crsTransform"", ""scale"", and ""dimensions"" are mutually exclusive."	Export.video.toDrive(collection, description, folder, fileNamePrefix, framesPerSecond, dimensions, region, scale, crs, crsTransform, maxPixels, maxFrames, priority)		collection|description|folder|fileNamePrefix|framesPerSecond|dimensions|region|scale|crs|crsTransform|maxPixels|maxFrames|priority	ImageCollection|String, optional|String, optional|String, optional|Number, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|String, optional|Number, optional|Number, optional|Number, optional	
Map.add	Adds an item to the map. Can also be used to add widgets like ui.Label as well as some non-widget objects like ui.Map.Layer.	Map.add(item)	ui.Map	item	Object	
Map.addLayer	Adds a given EE object to the map as a layer.	Map.addLayer(eeObject, visParams, name, shown, opacity)	ui.Map.Layer	eeObject|visParams|name|shown|opacity	Collection|Feature|Image|RawMapId|FeatureVisualizationParameters|ImageVisualizationParameters, optional|String, optional|Boolean, optional|Number, optional	
Map.centerObject	Centers the map view on a given object.	Map.centerObject(object, zoom, onComplete)	ui.Map	object|zoom|onComplete	Element|Geometry|Number, optional|Function, optional	
Map.clear	Clears the map by removing all layers, listeners, and widgets and restoring the options to their defaults.	Map.clear()	ui.Map			
Map.drawingTools	UsageReturnsMap.drawingTools()ui.Map.DrawingTools	Map.drawingTools()	ui.Map.DrawingTools			
Map.getBounds	UsageReturnsMap.getBounds(asGeoJSON)GeoJSONGeometry|List|String	Map.getBounds(asGeoJSON)	GeoJSONGeometry|List|String	asGeoJSON	Boolean, optional	
Map.getCenter	Returns the coordinates at the center of the map.	Map.getCenter()	Geometry.Point			
Map.getScale	UsageReturnsMap.getScale()Number|String	Map.getScale()	Number|String			
Map.getZoom	UsageReturnsMap.getZoom()Number	Map.getZoom()	Number			
Map.layers	UsageReturnsMap.layers()ui.data.ActiveList	Map.layers()	ui.data.ActiveList			
Map.onChangeBounds	UsageReturnsMap.onChangeBounds(callback)String	Map.onChangeBounds(callback)	String	callback	Function	
Map.onChangeCenter	Registers a callback that's fired when the map center changes. This is fired during pan or when the map's center is changed programmatically.	Map.onChangeCenter(callback)	String	callback	Function	
Map.onChangeZoom	Registers a callback that's fired when the map zoom level changes.	Map.onChangeZoom(callback)	String	callback	Function	
Map.onClick	Registers a callback that's fired when the map is clicked.	Map.onClick(callback)	String	callback	Function	
Map.onIdle	Registers a callback that's fired when the map stops moving.	Map.onIdle(callback)	String	callback	Function	
Map.onTileLoaded	Registers a callback that's fired when a map tile has been loaded.	Map.onTileLoaded(callback)	String	callback	Function	
Map.remove	Removes the given item from the map, if it exists.	Map.remove(item)	Object	item	Object	
Map.setCenter	Centers the map view at a given coordinates with the given zoom level.	Map.setCenter(lon, lat, zoom)	ui.Map	lon|lat|zoom	Number|Number|Number, optional	
Map.setControlVisibility	Sets the visibility of the controls on the map.	Map.setControlVisibility(all, layerList, zoomControl, scaleControl, mapTypeControl, fullscreenControl, drawingToolsControl)	ui.Map	all|layerList|zoomControl|scaleControl|mapTypeControl|fullscreenControl|drawingToolsControl	Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional	
Map.setGestureHandling	Controls how gestures are handled on the map.	Map.setGestureHandling(option)		option	String	
Map.setLocked	Limits panning and zooming on the map.	Map.setLocked(locked, minZoom, maxZoom)		locked|minZoom|maxZoom	Boolean|Number, optional|Number, optional	
Map.setOptions	Modifies the Google Maps basemap.  Allows for:	Map.setOptions(mapTypeId, styles, types)	ui.Map	mapTypeId|styles|types	String, optional|Object, optional|List, optional	
Map.setZoom	Sets the zoom level of the map.	Map.setZoom(zoom)	ui.Map	zoom	Number	
Map.style	Returns the Map's style ActiveDictionary, which can be modified to update the Map's styles.	Map.style()	ui.data.ActiveDictionary			
Map.unlisten	UsageReturnsMap.unlisten(idOrType)	Map.unlisten(idOrType)		idOrType	String, optional	
Map.widgets	Returns the list of the widgets currently on the map.	Map.widgets()	ui.data.ActiveList			
exports	UsageReturnsexports()	exports()				
print	UsageReturnsprint(var_args)	print(var_args)		var_args	VarArgs	
require	Retrieves the script found at a given path as a module. The module is used to access exposed members of the required script.	require(path)	Object	path	String	
ui.Button	A clickable button with a text label.	ui.Button(label, onClick, disabled, style, imageUrl)	ui.Button	label|onClick|disabled|style|imageUrl	String, optional|Function, optional|Boolean, optional|Object, optional|String, optional	
ui.Button.getDisabled	Returns whether the button is disabled.	Button.getDisabled()	Boolean	ui.button	ui.Button	
ui.Button.getImageUrl	Returns the url of the image if it exists.	Button.getImageUrl()	String	ui.button	ui.Button	
ui.Button.getLabel	Returns the button's label.	Button.getLabel()	String	ui.button	ui.Button	
ui.Button.onClick	Registers a callback that's fired when the button is clicked.	Button.onClick(callback)	String	ui.button|callback	ui.Button|Function	
ui.Button.setDisabled	Sets whether the button is disabled.	Button.setDisabled(disabled)	ui.Button	ui.button|disabled	ui.Button|Boolean	
ui.Button.setImageUrl	Shows the button as image, which will render instead of the label text.	Button.setImageUrl(imageUrl)	ui.Button	ui.button|imageUrl	ui.Button|String	
ui.Button.setLabel	Sets the button's label.	Button.setLabel(label)	ui.Button	ui.button|label	ui.Button|String	
ui.Button.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Button.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Button.unlisten	Deletes callbacks.	Button.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.Chart	A chart widget.	ui.Chart(dataTable, chartType, options, view, downloadable)	ui.Chart	dataTable|chartType|options| title | colors |view|downloadable	List, optional|String, optional|Object, optional| colors  (Array) An array of colors used to draw the chart.|Sets a DataView initializer object, which acts as a filter over the underlying data. See: https://developers.google.com/chart/interactive/docs/reference#DataView|Whether the chart can be downloaded as CSV, SVG, and PNG. Defaults to true.	
ui.Chart.array.values	Generates a Chart from an array. Plots separate series for each 1-D vector along the given axis.	ui.Chart.array.values(array, axis, xLabels)	ui.Chart	array|axis|xLabels	Array|List|Number|Array|List, optional	
ui.Chart.feature.byFeature	Generates a Chart from a set of features. Plots the value of one or more properties for each feature:	ui.Chart.feature.byFeature(features, xProperty, yProperties)	ui.Chart	features|xProperty|yProperties	Feature|FeatureCollection|List|String, optional|List, optional	
ui.Chart.feature.byProperty	Generates a Chart from a set of features. Plots property values of one or more features.	ui.Chart.feature.byProperty(features, xProperties, seriesProperty)	ui.Chart	features|xProperties|seriesProperty	Feature|FeatureCollection|List|List, optional|String, optional	
ui.Chart.feature.groups	Generates a Chart from a set of features. Plots the value of a given property across groups of features. Features with the same value of groupProperty will be grouped and plotted as a single series.	ui.Chart.feature.groups(features, xProperty, yProperty, seriesProperty)	ui.Chart	features|xProperty|yProperty|seriesProperty	Feature|FeatureCollection|List|String|String|String	
ui.Chart.feature.histogram	Generates a Chart from a set of features. Computes and plots a histogram of the given property.	ui.Chart.feature.histogram(features, property, maxBuckets, minBucketWidth, maxRaw)	ui.Chart	features|property|maxBuckets|minBucketWidth|maxRaw	Feature|FeatureCollection|List|String|Number, optional|Number, optional|Number, optional	
ui.Chart.getChartType	Returns this chart's type; e.g 'ScatterChart', 'LineChart', and 'ColumnChart'. For the complete list of charts, see: https://developers.google.com/chart/interactive/docs/gallery	Chart.getChartType()	String	ui.chart	ui.Chart	
ui.Chart.getDataTable	Returns the DataTable containing data for this chart. See: http://developers.google.com/chart/interactive/docs/reference#DataTable	Chart.getDataTable()	Object	ui.chart	ui.Chart	
ui.Chart.getDownloadable	Returns whether the chart can be downloaded as CSV, SVG, and PNG.	Chart.getDownloadable()	Boolean	ui.chart	ui.Chart	
ui.Chart.getOptions	Returns this chart's options. See: https://developers.google.com/chart/interactive/docs/customizing_charts	Chart.getOptions()	Object	ui.chart	ui.Chart	
ui.Chart.getView	Returns this chart's DataView initializer object, which acts as a filter over the underlying data in the chart. See: https://developers.google.com/chart/interactive/docs/reference#DataView	Chart.getView()	Object	ui.chart	ui.Chart	
ui.Chart.image.byClass	Generates a Chart from an image. Plots derived band values in classified regions in an image.	ui.Chart.image.byClass(image, classBand, region, reducer, scale, classLabels, xLabels)	ui.Chart	image|classBand|region|reducer|scale|classLabels|xLabels	Image|Number|String|Feature|FeatureCollection|Geometry, optional|Reducer, optional|Number, optional|List., optional|List, optional	
ui.Chart.image.byRegion	Generates a Chart from an image. Extracts and plots band values in one or more regions in the image, with each band in a separate series.	ui.Chart.image.byRegion(image, regions, reducer, scale, xProperty)	ui.Chart	image|regions|reducer|scale|xProperty	Image|Feature|FeatureCollection|Geometry|List, optional|Reducer, optional|Number, optional|String, optional	
ui.Chart.image.doySeries	Generates a Chart from an ImageCollection. Plots derived values of each band in a region for a each day of the year.	ui.Chart.image.doySeries(imageCollection, region, regionReducer, scale, yearReducer, startDay, endDay)	ui.Chart	imageCollection|region|regionReducer|scale|yearReducer|startDay|endDay	ImageCollection|Feature|FeatureCollection|Geometry, optional|Reducer, optional|Number, optional|Reducer, optional|Number, optional|Number, optional	
ui.Chart.image.doySeriesByRegion	Generates a Chart from an ImageCollection. Plots the derived value of the given band in different regions at each day-of-year.	ui.Chart.image.doySeriesByRegion(imageCollection, bandName, regions, regionReducer, scale, yearReducer, seriesProperty, startDay, endDay)	ui.Chart	imageCollection|bandName|regions|regionReducer|scale|yearReducer|seriesProperty|startDay|endDay	ImageCollection|Number|String|Feature|FeatureCollection|Geometry|List|Reducer, optional|Number, optional|Reducer, optional|String, optional|Number, optional|Number, optional	
ui.Chart.image.doySeriesByYear	Generates a Chart from an ImageCollection. Plots the derived value of the given band in a region for each day-of-year across different years.	ui.Chart.image.doySeriesByYear(imageCollection, bandName, region, regionReducer, scale, sameDayReducer, startDay, endDay)	ui.Chart	imageCollection|bandName|region|regionReducer|scale|sameDayReducer|startDay|endDay	ImageCollection|Number|String|Feature|FeatureCollection|Geometry, optional|Reducer, optional|Number, optional|Reducer, optional|Number, optional|Number, optional	
ui.Chart.image.histogram	Generates a Chart from an image. Computes and plots histograms of the values of the bands in the specified region of the image.	ui.Chart.image.histogram(image, region, scale, maxBuckets, minBucketWidth, maxRaw, maxPixels)	ui.Chart	image|region|scale|maxBuckets|minBucketWidth|maxRaw|maxPixels	Image|Feature|FeatureCollection|Geometry, optional|Number, optional|Number, optional|Number, optional|Number, optional|Number, optional	
ui.Chart.image.regions	Generates a Chart from an image. Extracts and plots the value of each band in one or more regions.	ui.Chart.image.regions(image, regions, reducer, scale, seriesProperty, xLabels)	ui.Chart	image|regions|reducer|scale|seriesProperty|xLabels	Image|Feature|FeatureCollection|Geometry|List, optional|Reducer, optional|Number, optional|String, optional|List, optional	
ui.Chart.image.series	Generates a Chart from an ImageCollection. Plots derived values of each band in a region across images. Usually a time series.	ui.Chart.image.series(imageCollection, region, reducer, scale, xProperty)	ui.Chart	imageCollection|region|reducer|scale|xProperty	ImageCollection|Feature|FeatureCollection|Geometry|Reducer, optional|Number, optional|String, optional	
ui.Chart.image.seriesByRegion	Generates a Chart from an image collection. Extracts and plots the value of the specified band in each region for each image in the collection. Usually a time series.	ui.Chart.image.seriesByRegion(imageCollection, regions, reducer, band, scale, xProperty, seriesProperty)	ui.Chart	imageCollection|regions|reducer|band|scale|xProperty|seriesProperty	ImageCollection|Feature|FeatureCollection|Geometry|List|Reducer|Number|String, optional|Number, optional|String, optional|String, optional	
ui.Chart.onClick	Registers a callback that's fired when the chart is clicked.	Chart.onClick(callback)	String	ui.chart|callback	ui.Chart|Function	
ui.Chart.setChartType	Sets the chartType of this chart.	Chart.setChartType(chartType)	ui.Chart	ui.chart|chartType	ui.Chart|String	
ui.Chart.setDataTable	Sets the DataTable containing data for this chart.	Chart.setDataTable(dataTable)	ui.Chart	ui.chart|dataTable	ui.Chart|List	
ui.Chart.setDownloadable	Sets a view for this chart.	Chart.setDownloadable(Whether)	ui.Chart	ui.chart|Whether	ui.Chart|Boolean	
ui.Chart.setOptions	Sets options used to style this chart.	Chart.setOptions(options)	ui.Chart	ui.chart|options| title | colors 	ui.Chart|Object| colors  (Array) An array of colors used to draw the chart.	
ui.Chart.setSeriesNames	Returns a copy of this chart with updated series names.	Chart.setSeriesNames(seriesNames, seriesIndex)	ui.Chart	ui.chart|seriesNames|seriesIndex	ui.Chart|Dictionary|Dictionary|Number, optional	
ui.Chart.setView	Sets a view for this chart.	Chart.setView(view)	ui.Chart	ui.chart|view	ui.Chart|Object	
ui.Chart.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Chart.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Chart.unlisten	Deletes callbacks.	Chart.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.Checkbox	A checkbox with a label.	ui.Checkbox(label, value, onChange, disabled, style)	ui.Checkbox	label|value|onChange|disabled|style	String, optional|Boolean, optional|Function, optional|Boolean, optional|Object, optional	
ui.Checkbox.getDisabled	Returns whether the checkbox is disabled.	Checkbox.getDisabled()	Boolean	ui.checkbox	ui.Checkbox	
ui.Checkbox.getLabel	Returns the checkbox's label.	Checkbox.getLabel()	String	ui.checkbox	ui.Checkbox	
ui.Checkbox.getValue	Returns whether the checkbox is checked. A null value indicates the checkbox is in an indeterminate state.	Checkbox.getValue()	Boolean	ui.checkbox	ui.Checkbox	
ui.Checkbox.onChange	Registers a callback that's fired when the value of the checkbox changes.	Checkbox.onChange(callback)	String	ui.checkbox|callback	ui.Checkbox|Function	
ui.Checkbox.setDisabled	Sets whether the checkbox is disabled.	Checkbox.setDisabled(disabled)	ui.Checkbox	ui.checkbox|disabled	ui.Checkbox|Boolean	
ui.Checkbox.setLabel	Sets the checkbox's label.	Checkbox.setLabel(value)	ui.Checkbox	ui.checkbox|value	ui.Checkbox|String	
ui.Checkbox.setValue	Sets whether the checkbox is checked.	Checkbox.setValue(value, trigger)	ui.Checkbox	ui.checkbox|value|trigger	ui.Checkbox|Boolean|Boolean, optional	
ui.Checkbox.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Checkbox.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Checkbox.unlisten	Deletes callbacks.	Checkbox.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.DateSlider	A draggable target that ranges linearly between two dates. The date slider can be configured to display dates of various interval sizes, including day, 8-day, and year. The value of the slider is displayed as a label alongside it.	ui.DateSlider(start, end, value, period, onChange, disabled, style)	ui.DateSlider	start|end|value|period|onChange|disabled|style	Date|Number|String, optional|Date|Number|String, optional|Date|Number|String, optional|Number, optional|Function, optional|Boolean, optional|Object, optional	
ui.DateSlider.getDisabled	Returns whether the slider is disabled.	DateSlider.getDisabled()	Boolean	ui.dateslider	ui.DateSlider	
ui.DateSlider.getEnd	Returns the slider's end date as a UTC timestamp.	DateSlider.getEnd()	Number	ui.dateslider	ui.DateSlider	
ui.DateSlider.getPeriod	Returns the slider's period interval.	DateSlider.getPeriod()	Number	ui.dateslider	ui.DateSlider	
ui.DateSlider.getStart	Returns the slider's start date as a UTC timestamp.	DateSlider.getStart()	Number	ui.dateslider	ui.DateSlider	
ui.DateSlider.getValue	Returns the slider's current value, and array with the start and end datetimes as epoch UTC timestamps.	DateSlider.getValue()	List	ui.dateslider	ui.DateSlider	
ui.DateSlider.onChange	Registers a callback that's fired when the slider's value changes.	DateSlider.onChange(callback)	String	ui.dateslider|callback	ui.DateSlider|Function	
ui.DateSlider.setDisabled	Sets whether the slider is disabled.	DateSlider.setDisabled(disabled)	ui.DateSlider	ui.dateslider|disabled	ui.DateSlider|Boolean	
ui.DateSlider.setEnd	Sets the end date of the slider.	DateSlider.setEnd(value)	ui.DateSlider	ui.dateslider|value	ui.DateSlider|Number|String	
ui.DateSlider.setPeriod	Sets the period interval of the slider.	DateSlider.setPeriod(value)	ui.DateSlider	ui.dateslider|value	ui.DateSlider|Number	
ui.DateSlider.setStart	Sets the start date of the slider.	DateSlider.setStart(start)	ui.DateSlider	ui.dateslider|start	ui.DateSlider|Number|String	
ui.DateSlider.setValue	Set the value of the slider.	DateSlider.setValue(value, trigger)	ui.DateSlider	ui.dateslider|value|trigger	ui.DateSlider|Number|String|Boolean, optional	
ui.DateSlider.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	DateSlider.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.DateSlider.unlisten	Deletes callbacks.	DateSlider.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.Label	A text label.	ui.Label(value, style, targetUrl, imageUrl)	ui.Label	value|style|targetUrl|imageUrl	String, optional|Object, optional|String, optional|String, optional	
ui.Label.getImageUrl	Returns the url of the image if it exists.	Label.getImageUrl()	String	ui.label	ui.Label	
ui.Label.getUrl	Returns the url of the label if it exists.	Label.getUrl()	String	ui.label	ui.Label	
ui.Label.getValue	Returns the value of the label.	Label.getValue()	String	ui.label	ui.Label	
ui.Label.setImageUrl	Sets the label to an image, which will render instead of the value text.	Label.setImageUrl(imageUrl)	ui.Label	ui.label|imageUrl	ui.Label|String	
ui.Label.setUrl	Sets the url of the label, which will cause it to render as a link.	Label.setUrl(targetUrl)	ui.Label	ui.label|targetUrl	ui.Label|String	
ui.Label.setValue	Sets the value of the label.	Label.setValue(value)	ui.Label	ui.label|value	ui.Label|String	
ui.Label.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Label.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Map	A Google map.	ui.Map(center, onClick, style)	ui.Map	center|onClick|style	Object, optional|Function, optional|Object, optional	
ui.Map.CloudStorageLayer	A layer generated from Cloud Storage tiles for display on a ui.Map.	ui.Map.CloudStorageLayer(bucket, path, maxZoom, suffix, name, shown, opacity)	ui.Map.CloudStorageLayer	bucket|path|maxZoom|suffix|name|shown|opacity	String|String|Number|String, optional|String, optional|Boolean, optional|Number, optional	
ui.Map.CloudStorageLayer.getBucket	Returns the name of this layer's bucket.	CloudStorageLayer.getBucket()	String	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	
ui.Map.CloudStorageLayer.getMaxZoom	Returns the maximum zoom level of this layer's tileset.	CloudStorageLayer.getMaxZoom()	Number	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	
ui.Map.CloudStorageLayer.getName	Returns the name of the layer.	CloudStorageLayer.getName()	String	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.CloudStorageLayer.getOpacity	Returns the layer's opacity represented as a number between 0 and 1.	CloudStorageLayer.getOpacity()	Number	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.CloudStorageLayer.getPath	Returns the path within the bucket to the tiles.	CloudStorageLayer.getPath()	String	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	
ui.Map.CloudStorageLayer.getShown	Returns whether the layer is shown.	CloudStorageLayer.getShown()	Boolean	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.CloudStorageLayer.getSuffix	Returns the suffix for this layer's tile files.	CloudStorageLayer.getSuffix()	String	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	
ui.Map.CloudStorageLayer.setBucket	Sets the bucket for this layer.	CloudStorageLayer.setBucket(bucket)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|bucket	ui.Map.CloudStorageLayer|String	
ui.Map.CloudStorageLayer.setMaxZoom	Sets the maximum zoom level for tiles. When the user zooms in beyond this level, the parent tile at this level will be fetched and zoomed on the client.	CloudStorageLayer.setMaxZoom(maxZoom)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|maxZoom	ui.Map.CloudStorageLayer|Number	
ui.Map.CloudStorageLayer.setName	Sets the name of the layer.	CloudStorageLayer.setName(name)	ui.Map.AbstractLayer	ui.map.abstractlayer|name	ui.Map.AbstractLayer|String, optional	
ui.Map.CloudStorageLayer.setOpacity	Sets the opacity of the layer.	CloudStorageLayer.setOpacity(opacity)	ui.Map.AbstractLayer	ui.map.abstractlayer|opacity	ui.Map.AbstractLayer|Number, optional	
ui.Map.CloudStorageLayer.setPath	Sets the location of the folder from which the layer will retrieve its tiles.	CloudStorageLayer.setPath(path)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|path	ui.Map.CloudStorageLayer|String	
ui.Map.CloudStorageLayer.setShown	Sets the visibility of the layer.	CloudStorageLayer.setShown(shown)	ui.Map.AbstractLayer	ui.map.abstractlayer|shown	ui.Map.AbstractLayer|Boolean, optional	
ui.Map.CloudStorageLayer.setSuffix	Sets the CloudStorageLayer's file suffix.	CloudStorageLayer.setSuffix(suffix)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|suffix	ui.Map.CloudStorageLayer|String	
ui.Map.DrawingTools	A set of tools for drawing on a map.	ui.Map.DrawingTools(layers, shape, selected, shown, linked)	ui.Map.DrawingTools	layers|shape|selected|shown|linked	List, optional|String, optional|ui.Map.GeometryLayer, optional|Boolean, optional|Boolean, optional	
ui.Map.DrawingTools.addLayer	Adds a given list of ee.Geometry objects to the drawing tools as a geometry layer.	DrawingTools.addLayer(geometries, name, color, shown, locked)	ui.Map.GeometryLayer	ui.map.drawingtools|geometries|name|color|shown|locked	ui.Map.DrawingTools|List|String, optional|String, optional|Boolean, optional|Boolean, optional	
ui.Map.DrawingTools.clear	Clears the drawing tools.	DrawingTools.clear()	ui.Map.DrawingTools	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.draw	Enters drawing mode, in which a click on the map will begin drawing the selected shape.	DrawingTools.draw()	ui.Map.DrawingTools	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.edit	Starts editing the selected layer.	DrawingTools.edit()	ui.Map.DrawingTools	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.get	Returns either a clone of this object or, if a key is provided, the value of the property with the passed-in key. Look at the constructor's parameters to see which properties are available.	DrawingTools.get(key)	Object	ui.data.activedictionary|key	ui.data.ActiveDictionary|String, optional	
ui.Map.DrawingTools.getDrawModes	Gets the available draw modes on the drawing tool. The available draw mode shapes are: point, line, polygon, and rectangle.	DrawingTools.getDrawModes()	List	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.getLinked	Returns whether the drawing tools' geometries are linked to those in the imports panel.	DrawingTools.getLinked()	Boolean	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.getMap	Returns the map for these drawing tools or null if the drawing tools have not been added to a map.	DrawingTools.getMap()	ui.Map	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.getSelected	Returns the selected layer.	DrawingTools.getSelected()	ui.Map.GeometryLayer	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.getShape	Returns the shape drawn when in drawing mode.	DrawingTools.getShape()	String	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.getShown	Returns whether the drawing tools are shown.	DrawingTools.getShown()	Boolean	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.layers	Returns the list of geometry layers in the drawing tools.	DrawingTools.layers()	ui.data.ActiveList	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.onDraw	Registers a callback that's fired when a shape is drawn.	DrawingTools.onDraw(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onEdit	Registers a callback that's fired when a shape is edited.	DrawingTools.onEdit(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onErase	Registers a callback that's fired when a shape is erased.	DrawingTools.onErase(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onLayerAdd	Registers a callback that's fired when a layer is added.	DrawingTools.onLayerAdd(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onLayerConfig	Registers a callback that's fired after a layer's name or color is changed.	DrawingTools.onLayerConfig(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onLayerRemove	Registers a callback that's fired when a layer is removed.	DrawingTools.onLayerRemove(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onLayerSelect	Registers a callback that's fired when a layer is selected.	DrawingTools.onLayerSelect(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onSelect	Registers a callback that's fired when a shape is selected.	DrawingTools.onSelect(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.onShapeChange	Registers a callback that's fired when a drawing mode shape is changed.	DrawingTools.onShapeChange(callback)	String	ui.map.drawingtools|callback	ui.Map.DrawingTools|Function	
ui.Map.DrawingTools.set	Sets the value of a given property. Throws an error if the key provided is not supported by the object. Look at the constructor's parameters to see which properties can be set.	DrawingTools.set(keyOrDict, value)	ui.data.ActiveDictionary	ui.data.activedictionary|keyOrDict|value	ui.data.ActiveDictionary|Object|String|Object, optional	
ui.Map.DrawingTools.setDrawModes	Sets the available draw mode shapes on the drawing tool. The available draw mode shapes are: point, line, polygon, and rectangle.	DrawingTools.setDrawModes(drawModes)		ui.map.drawingtools|drawModes	ui.Map.DrawingTools|List, optional	
ui.Map.DrawingTools.setLinked	Sets whether the drawing tools' geometries are linked to the imports panel or isolated to the map.	DrawingTools.setLinked(linked)	ui.Map.DrawingTools	ui.map.drawingtools|linked	ui.Map.DrawingTools|Boolean	
ui.Map.DrawingTools.setSelected	Sets the selected layer.	DrawingTools.setSelected(layer)	ui.Map.DrawingTools	ui.map.drawingtools|layer	ui.Map.DrawingTools|ui.Map.GeometryLayer, optional	
ui.Map.DrawingTools.setShape	Sets the draw mode shape and starts draw mode. The available draw mode shapes are: point, line, polygon, and rectangle.	DrawingTools.setShape(shape)	ui.Map.DrawingTools	ui.map.drawingtools|shape	ui.Map.DrawingTools|String	
ui.Map.DrawingTools.setShown	Sets the visibility of the shape selector and geometry layer list.	DrawingTools.setShown(shown)	ui.Map.DrawingTools	ui.map.drawingtools|shown	ui.Map.DrawingTools|Boolean	
ui.Map.DrawingTools.stop	Closes the drawing tools, exiting interactive drawing or editing.	DrawingTools.stop()	ui.Map.DrawingTools	ui.map.drawingtools	ui.Map.DrawingTools	
ui.Map.DrawingTools.toFeatureCollection	Returns a feature collection in which each geometry in the drawing tools is a feature.	DrawingTools.toFeatureCollection(indexProperty)	FeatureCollection	ui.map.drawingtools|indexProperty	ui.Map.DrawingTools|String	
ui.Map.DrawingTools.unlisten	Deletes callbacks.	DrawingTools.unlisten(idOrType)		ui.map.drawingtools|idOrType	ui.Map.DrawingTools|String, optional	
ui.Map.FeatureViewLayer	A layer generated from a FeatureView asset for display on a ui.Map.	ui.Map.FeatureViewLayer(assetId, visParams, name, shown, opacity)	ui.Map.FeatureViewLayer	assetId|visParams|name|shown|opacity	String|Object, optional|String, optional|Boolean, optional|Number, optional	
ui.Map.FeatureViewLayer.getAssetId	Returns the asset ID for the FeatureView asset backing this layer.	FeatureViewLayer.getAssetId()	String	ui.map.featureviewlayer	ui.Map.FeatureViewLayer	
ui.Map.FeatureViewLayer.getName	Returns the name of the layer.	FeatureViewLayer.getName()	String	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.FeatureViewLayer.getOpacity	Returns the layer's opacity represented as a number between 0 and 1.	FeatureViewLayer.getOpacity()	Number	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.FeatureViewLayer.getShown	Returns whether the layer is shown.	FeatureViewLayer.getShown()	Boolean	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.FeatureViewLayer.getVisParams	Returns the visualization parameters for this layer.	FeatureViewLayer.getVisParams()	Object	ui.map.featureviewlayer	ui.Map.FeatureViewLayer	
ui.Map.FeatureViewLayer.setAssetId	Changes the asset being displayed on this layer.	FeatureViewLayer.setAssetId(assetId)	ui.Map.FeatureViewLayer	ui.map.featureviewlayer|assetId	ui.Map.FeatureViewLayer|String	
ui.Map.FeatureViewLayer.setName	Sets the name of the layer.	FeatureViewLayer.setName(name)	ui.Map.AbstractLayer	ui.map.abstractlayer|name	ui.Map.AbstractLayer|String, optional	
ui.Map.FeatureViewLayer.setOpacity	Sets the opacity of the layer.	FeatureViewLayer.setOpacity(opacity)	ui.Map.AbstractLayer	ui.map.abstractlayer|opacity	ui.Map.AbstractLayer|Number, optional	
ui.Map.FeatureViewLayer.setShown	Sets the visibility of the layer.	FeatureViewLayer.setShown(shown)	ui.Map.AbstractLayer	ui.map.abstractlayer|shown	ui.Map.AbstractLayer|Boolean, optional	
ui.Map.FeatureViewLayer.setVisParams	Sets the visualization parameters for this layer.	FeatureViewLayer.setVisParams(visParams)	ui.Map.FeatureViewLayer	ui.map.featureviewlayer|visParams	ui.Map.FeatureViewLayer|Object, optional	
ui.Map.GeometryLayer	A layer of ee.Geometries for display as shapes on a ui.Map.	ui.Map.GeometryLayer(geometries, name, color, shown, locked)	ui.Map.GeometryLayer	geometries|name|color|shown|locked	List, optional|String, optional|String, optional|Boolean, optional|Boolean, optional	
ui.Map.GeometryLayer.fromGeometry	Resets the layer's geometries by parsing individual geometries from an ee.Geometry.	GeometryLayer.fromGeometry(geometry)	ui.Map.GeometryLayer	ui.map.geometrylayer|geometry	ui.Map.GeometryLayer|Geometry	
ui.Map.GeometryLayer.geometries	Returns the active list of geometries associated with the layer.	GeometryLayer.geometries()	ui.data.ActiveList	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.GeometryLayer.get	Returns either a clone of this object or, if a key is provided, the value of the property with the passed-in key. Look at the constructor's parameters to see which properties are available.	GeometryLayer.get(key)	Object	ui.data.activedictionary|key	ui.data.ActiveDictionary|String, optional	
ui.Map.GeometryLayer.getColor	Returns the color of the layer.	GeometryLayer.getColor()	String	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.GeometryLayer.getEeObject	Returns the EE object associated with the layer.	GeometryLayer.getEeObject()	Feature|FeatureCollection|Geometry	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.GeometryLayer.getLocked	Returns whether the shapes in the layer are shown.	GeometryLayer.getLocked()	Boolean	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.GeometryLayer.getName	Returns the name of the layer.	GeometryLayer.getName()	String	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.GeometryLayer.getShown	Returns whether the shapes in the layer are shown.	GeometryLayer.getShown()	Boolean	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.GeometryLayer.openConfigurationDialog	Opens a configuration dialog for the layer. Use onLayerConfig to register a callback for when the user makes changes using the dialog.	GeometryLayer.openConfigurationDialog()	ui.Map.GeometryLayer	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.GeometryLayer.set	Sets the value of a given property. Throws an error if the key provided is not supported by the object. Look at the constructor's parameters to see which properties can be set.	GeometryLayer.set(keyOrDict, value)	ui.data.ActiveDictionary	ui.data.activedictionary|keyOrDict|value	ui.data.ActiveDictionary|Object|String|Object, optional	
ui.Map.GeometryLayer.setColor	Sets the CSS color of shapes in the layer.	GeometryLayer.setColor(color)	ui.Map.GeometryLayer	ui.map.geometrylayer|color	ui.Map.GeometryLayer|String	
ui.Map.GeometryLayer.setLocked	Sets the locked state of the layer. A locked layer disallows adding, removing, or editing the geometries on the layer from the user interface.	GeometryLayer.setLocked(locked)	ui.Map.GeometryLayer	ui.map.geometrylayer|locked	ui.Map.GeometryLayer|Boolean	
ui.Map.GeometryLayer.setName	Sets the name of the layer.	GeometryLayer.setName(name)	ui.Map.GeometryLayer	ui.map.geometrylayer|name	ui.Map.GeometryLayer|String	
ui.Map.GeometryLayer.setShown	Sets the visibility of shapes in the layer.	GeometryLayer.setShown(shown)	ui.Map.GeometryLayer	ui.map.geometrylayer|shown	ui.Map.GeometryLayer|Boolean	
ui.Map.GeometryLayer.toGeometry	Returns the layer's geometries as a single ee.Geometry.	GeometryLayer.toGeometry()	Geometry	ui.map.geometrylayer	ui.Map.GeometryLayer	
ui.Map.Layer	A layer generated from an Earth Engine object for display on a ui.Map.	ui.Map.Layer(eeObject, visParams, name, shown, opacity)	ui.Map.Layer	eeObject|visParams|name|shown|opacity	Collection|Feature|Image, optional|FeatureVisualizationParameters|ImageVisualizationParameters, optional|String, optional|Boolean, optional|Number, optional	
ui.Map.Layer.getEeObject	Returns the layer's ee.Object.	Layer.getEeObject()	Collection|Feature|Image	ui.map.layer	ui.Map.Layer	
ui.Map.Layer.getName	Returns the name of the layer.	Layer.getName()	String	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.Layer.getOpacity	Returns the layer's opacity represented as a number between 0 and 1.	Layer.getOpacity()	Number	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.Layer.getShown	Returns whether the layer is shown.	Layer.getShown()	Boolean	ui.map.abstractlayer	ui.Map.AbstractLayer	
ui.Map.Layer.getVisParams	Returns the layer's visualization parameters.	Layer.getVisParams()	FeatureVisualizationParameters|ImageVisualizationParameters	ui.map.layer	ui.Map.Layer	
ui.Map.Layer.setEeObject	Sets the layer's ee.Object.	Layer.setEeObject(eeObject)	ui.Map.Layer	ui.map.layer|eeObject	ui.Map.Layer|Collection|Feature|Image, optional	
ui.Map.Layer.setName	Sets the name of the layer.	Layer.setName(name)	ui.Map.AbstractLayer	ui.map.abstractlayer|name	ui.Map.AbstractLayer|String, optional	
ui.Map.Layer.setOpacity	Sets the opacity of the layer.	Layer.setOpacity(opacity)	ui.Map.AbstractLayer	ui.map.abstractlayer|opacity	ui.Map.AbstractLayer|Number, optional	
ui.Map.Layer.setShown	Sets the visibility of the layer.	Layer.setShown(shown)	ui.Map.AbstractLayer	ui.map.abstractlayer|shown	ui.Map.AbstractLayer|Boolean, optional	
ui.Map.Layer.setVisParams	Sets the layer's visualization parameters.	Layer.setVisParams(visParams)	ui.Map.Layer	ui.map.layer|visParams	ui.Map.Layer|FeatureVisualizationParameters|ImageVisualizationParameters, optional	
ui.Map.Linker	A utility for creating linked maps.	ui.Map.Linker(maps, event)	ui.Map.Linker	maps|event	List, optional|String, optional	
ui.Map.Linker.add	Appends an element to the list.	Linker.add(el)	ui.data.ActiveList	ui.data.activelist|el	ui.data.ActiveList|Object	
ui.Map.Linker.forEach	Iterates over each element, calling the provided callback. The callback is called for each element like: callback(element, index).	Linker.forEach(callback)		ui.data.activelist|callback	ui.data.ActiveList|Function	
ui.Map.Linker.get	Returns the element at the specified index.	Linker.get(index)	Object	ui.data.activelist|index	ui.data.ActiveList|Number	
ui.Map.Linker.getJsArray	Returns the list as a JS array.	Linker.getJsArray()	List	ui.data.activelist	ui.data.ActiveList	
ui.Map.Linker.insert	Inserts an element at the specified index and shifts the rest of the list. If the specified index is greater than the length of the list, the element will be appended to the list.	Linker.insert(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	
ui.Map.Linker.length	Returns the number of elements in the list.	Linker.length()	Number	ui.data.activelist	ui.data.ActiveList	
ui.Map.Linker.remove	Removes the specified element from the list.	Linker.remove(el)	Object	ui.data.activelist|el	ui.data.ActiveList|Object	
ui.Map.Linker.reset	Replaces all elements in list with a new list or, if no list is provided, removes all elements from list.	Linker.reset(list)	List	ui.data.activelist|list	ui.data.ActiveList|List, optional	
ui.Map.Linker.set	Sets an element at the specified index. If the index exceeds that of the list's last element, the element will be added to the end of the list.	Linker.set(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	
ui.Map.add	Adds an item to the map. Can also be used to add widgets like ui.Label as well as some non-widget objects like ui.Map.Layer.	Map.add(item)	ui.Map	ui.map|item	ui.Map|Object	
ui.Map.addLayer	Adds a given EE object to the map as a layer.	Map.addLayer(eeObject, visParams, name, shown, opacity)	ui.Map.Layer	ui.map|eeObject|visParams|name|shown|opacity	ui.Map|Collection|Feature|Image|MapId|FeatureVisualizationParameters|ImageVisualizationParameters, optional|String, optional|Boolean, optional|Number, optional	
ui.Map.centerObject	Centers the map view on a given object.	Map.centerObject(object, zoom, onComplete)	ui.Map	ui.map|object|zoom|onComplete	ui.Map|Element|Geometry|Number, optional|Function, optional	
ui.Map.clear	Clears the map by removing all layers, listeners, and widgets and restoring the options to their defaults.	Map.clear()	ui.Map	ui.map	ui.Map	
ui.Map.drawingTools	Returns the map's drawing tools, which can be used to create and edit shapes on the map. Adds the drawing tools to the map if none exist.	Map.drawingTools()	ui.Map.DrawingTools	ui.map	ui.Map	
ui.Map.getBounds	Returns the bounds of the current map view, as a list in the format [west, south, east, north] in degrees.	Map.getBounds(asGeoJSON)	GeoJSONGeometry|List|String	ui.map|asGeoJSON	ui.Map|Boolean, optional	
ui.Map.getCenter	Returns the coordinates at the center of the map.	Map.getCenter()	Geometry.Point	ui.map	ui.Map	
ui.Map.getScale	Returns the approximate pixel scale of the current map view, in meters.	Map.getScale()	Number|String	ui.map	ui.Map	
ui.Map.getZoom	Returns the current zoom level of the map.	Map.getZoom()	Number	ui.map	ui.Map	
ui.Map.insert	Inserts a widget into to the panel at the specified index.	Map.insert(index, widget)	ui.Panel	ui.panel|index|widget	ui.Panel|Number|ui.Widget	
ui.Map.layers	Returns the list of layers associated with the map.	Map.layers()	ui.data.ActiveList	ui.map	ui.Map	
ui.Map.onChangeBounds	Registers a callback that's fired when the map bounds change. This is fired during pan, zoom, and when the map's bounds are changed programmatically.	Map.onChangeBounds(callback)	String	ui.map|callback	ui.Map|Function	
ui.Map.onChangeCenter	Registers a callback that's fired when the map center changes. This is fired during pan or when the map's center is changed programmatically.	Map.onChangeCenter(callback)	String	ui.map|callback	ui.Map|Function	
ui.Map.onChangeZoom	Registers a callback that's fired when the map zoom level changes.	Map.onChangeZoom(callback)	String	ui.map|callback	ui.Map|Function	
ui.Map.onClick	Registers a callback that's fired when the map is clicked.	Map.onClick(callback)	String	ui.map|callback	ui.Map|Function	
ui.Map.onIdle	Registers a callback that's fired when the map stops moving.	Map.onIdle(callback)	String	ui.map|callback	ui.Map|Function	
ui.Map.onTileLoaded	Registers a callback that's fired when a map tile has been loaded.	Map.onTileLoaded(callback)	String	ui.map|callback	ui.Map|Function	
ui.Map.remove	Removes the given item from the map, if it exists.	Map.remove(item)	Object	ui.map|item	ui.Map|Object	
ui.Map.setCenter	Centers the map view at the given coordinates with the given zoom level. If no zoom level is provided, it uses the most recent zoom level on the map.	Map.setCenter(lon, lat, zoom)	ui.Map	ui.map|lon|lat|zoom	ui.Map|Number|Number|Number, optional	
ui.Map.setControlVisibility	Sets the visibility of the controls on the map.	Map.setControlVisibility(all, layerList, zoomControl, scaleControl, mapTypeControl, fullscreenControl, drawingToolsControl)	ui.Map	ui.map|all|layerList|zoomControl|scaleControl|mapTypeControl|fullscreenControl|drawingToolsControl	ui.Map|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional	
ui.Map.setGestureHandling	Controls how gestures are handled on the map.	Map.setGestureHandling(option)		ui.map|option	ui.Map|String	
ui.Map.setLocked	Limits panning and zooming on the map.	Map.setLocked(locked, minZoom, maxZoom)		ui.map|locked|minZoom|maxZoom	ui.Map|Boolean|Number, optional|Number, optional	
ui.Map.setOptions	Modifies the Google Maps basemap.  Allows for: 1) Setting the current MapType. 2) Providing custom styles for the basemap (MapTypeStyles). 3) Setting the list of available mapTypesIds for the basemap.	Map.setOptions(mapTypeId, styles, types)	ui.Map	ui.map|mapTypeId|styles|types	ui.Map|String, optional|Object, optional|List, optional	
ui.Map.setZoom	Sets the zoom level of the map.	Map.setZoom(zoom)	ui.Map	ui.map|zoom	ui.Map|Number	
ui.Map.style	Returns the map's style ActiveDictionary, which can be modified to update the map's styles.	Map.style()	ui.data.ActiveDictionary	ui.map	ui.Map	
ui.Map.unlisten	Deletes callbacks.	Map.unlisten(idOrType)		ui.map|idOrType	ui.Map|String, optional	
ui.Map.widgets	Returns the list of widgets currently in the panel.	Map.widgets()	ui.data.ActiveList	ui.panel	ui.Panel	
ui.Panel	A widget that can hold other widgets. Use panels to construct complex combinations of nested widgets.	ui.Panel(widgets, layout, style)	ui.Panel	widgets|layout|style	List, optional|String|ui.Panel.Layout, optional|Object, optional	
ui.Panel.Layout.absolute	Returns a layout that places its widgets absolutely relative to the panel.	ui.Panel.Layout.absolute()	ui.Panel.Layout			
ui.Panel.Layout.flow	UsageReturnsui.Panel.Layout.flow(direction, wrap)ui.Panel.Layout	ui.Panel.Layout.flow(direction, wrap)	ui.Panel.Layout	direction|wrap	String, optional|Boolean, optional	
ui.Panel.add	Adds a widget to the panel.	Panel.add(widget)	ui.Panel	ui.panel|widget	ui.Panel|ui.Widget	
ui.Panel.clear	Removes all widgets from the panel.	Panel.clear()	ui.Panel	ui.panel	ui.Panel	
ui.Panel.getLayout	Gets the panel's layout.	Panel.getLayout()	ui.Panel.Layout	ui.panel	ui.Panel	
ui.Panel.insert	Inserts a widget into to the panel at the specified index.	Panel.insert(index, widget)	ui.Panel	ui.panel|index|widget	ui.Panel|Number|ui.Widget	
ui.Panel.remove	Removes the given widget from the panel, if it exists.	Panel.remove(widget)	Boolean	ui.panel|widget	ui.Panel|ui.Widget	
ui.Panel.setLayout	Sets the panel's layout.	Panel.setLayout(layout)	ui.Panel	ui.panel|layout	ui.Panel|ui.Panel.Layout	
ui.Panel.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Panel.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Panel.widgets	Returns the list of widgets currently in the panel.	Panel.widgets()	ui.data.ActiveList	ui.panel	ui.Panel	
ui.Select	A printable select menu with a callback.	ui.Select(items, placeholder, value, onChange, disabled, style)	ui.Select	items|placeholder|value|onChange|disabled|style	List, optional|String, optional|String, optional|Function, optional|Boolean, optional|Object, optional	
ui.Select.getDisabled	Returns whether the select is disabled.	Select.getDisabled()	Boolean	ui.select	ui.Select	
ui.Select.getPlaceholder	Returns the select's placeholder text.	Select.getPlaceholder()	String	ui.select	ui.Select	
ui.Select.getValue	Returns the currently selected value.	Select.getValue()	String	ui.select	ui.Select	
ui.Select.items	See ui.data.ActiveList.	Select.items()	ui.data.ActiveList	ui.select	ui.Select	
ui.Select.onChange	Registers a callback that's fired when an item is selected.	Select.onChange(callback)	String	ui.select|callback	ui.Select|Function	
ui.Select.setDisabled	Sets whether the select is disabled.	Select.setDisabled(disabled)	ui.Select	ui.select|disabled	ui.Select|Boolean	
ui.Select.setPlaceholder	Sets the select's placeholder text, which is shown when no value is selected.	Select.setPlaceholder(placeholder)	ui.Select	ui.select|placeholder	ui.Select|String	
ui.Select.setValue	Sets the selected value.	Select.setValue(value, trigger)	ui.Select	ui.select|value|trigger	ui.Select|String|Boolean, optional	
ui.Select.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Select.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Select.unlisten	Deletes callbacks.	Select.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.Slider	A draggable target that ranges linearly between two numeric values. The value of the slider is displayed as a label alongside it.	ui.Slider(min, max, value, step, onChange, direction, disabled, style)	ui.Slider	min|max|value|step|onChange|direction|disabled|style	Number, optional|Number, optional|Number, optional|Number, optional|Function, optional|String, optional|Boolean, optional|Object, optional	
ui.Slider.getDisabled	Returns whether the slider is disabled.	Slider.getDisabled()	Boolean	ui.slider	ui.Slider	
ui.Slider.getMax	Returns the slider's maximum value.	Slider.getMax()	Number	ui.slider	ui.Slider	
ui.Slider.getMin	Returns the slider's minimum value.	Slider.getMin()	Number	ui.slider	ui.Slider	
ui.Slider.getStep	Returns the slider's step value.	Slider.getStep()	Number	ui.slider	ui.Slider	
ui.Slider.getValue	Returns the current slider value.	Slider.getValue()	Number	ui.slider	ui.Slider	
ui.Slider.onChange	Registers a callback that's fired when the slider's state changes. If the change is due to the user dragging the slider, the event will not fire until the drag completes.	Slider.onChange(callback)	String	ui.slider|callback	ui.Slider|Function	
ui.Slider.onSlide	Registers a callback that's fired when the slider's state changes. The callback will be invoked repeatedly while the user is dragging the slider.	Slider.onSlide(callback)	String	ui.slider|callback	ui.Slider|Function	
ui.Slider.setDisabled	Sets whether the slider is disabled.	Slider.setDisabled(disabled)	ui.Slider	ui.slider|disabled	ui.Slider|Boolean	
ui.Slider.setMax	Sets the maximum value of the slider.	Slider.setMax(value)	ui.Slider	ui.slider|value	ui.Slider|Number	
ui.Slider.setMin	Sets the minimum value of the slider.	Slider.setMin(value)	ui.Slider	ui.slider|value	ui.Slider|Number	
ui.Slider.setStep	Sets the step value of the slider.	Slider.setStep(value)	ui.Slider	ui.slider|value	ui.Slider|Number	
ui.Slider.setValue	Set the value of the slider.	Slider.setValue(value, trigger)	ui.Slider	ui.slider|value|trigger	ui.Slider|Number|Boolean, optional	
ui.Slider.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Slider.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Slider.unlisten	Deletes callbacks.	Slider.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.SplitPanel	A widget containing two panels with a divider between them. The divider can be dragged, allowing the panels to be resized. One or both panels may be ui.Map objects.	ui.SplitPanel(firstPanel, secondPanel, orientation, wipe, style)	ui.SplitPanel	firstPanel|secondPanel|orientation|wipe|style	ui.Panel, optional|ui.Panel, optional|String, optional|Boolean, optional|Object, optional	
ui.SplitPanel.getFirstPanel	Returns the first panel in the split panel.	SplitPanel.getFirstPanel()	ui.Panel	ui.splitpanel	ui.SplitPanel	
ui.SplitPanel.getOrientation	Returns the panel's orientation.	SplitPanel.getOrientation()	String	ui.splitpanel	ui.SplitPanel	
ui.SplitPanel.getPanel	Returns the requested panel in the split panel.	SplitPanel.getPanel(index)	ui.Panel	ui.splitpanel|index	ui.SplitPanel|Number	
ui.SplitPanel.getSecondPanel	Returns the second panel in the split panel.	SplitPanel.getSecondPanel()	ui.Panel	ui.splitpanel	ui.SplitPanel	
ui.SplitPanel.getWipe	Returns whether the wiping effect is enabled.	SplitPanel.getWipe()	Boolean	ui.splitpanel	ui.SplitPanel	
ui.SplitPanel.setFirstPanel	Returns this split panel.	SplitPanel.setFirstPanel(panel)	ui.SplitPanel	ui.splitpanel|panel	ui.SplitPanel|ui.Panel	
ui.SplitPanel.setOrientation	"Sets the panel's orientation; one of ""horizontal"" or ""vertical""."	SplitPanel.setOrientation(orientation)	ui.SplitPanel	ui.splitpanel|orientation	ui.SplitPanel|String	
ui.SplitPanel.setPanel	Returns the requested panel in the split panel.	SplitPanel.setPanel(index, panel)	ui.Panel	ui.splitpanel|index|panel	ui.SplitPanel|Number|ui.Panel	
ui.SplitPanel.setSecondPanel	Returns this split panel.	SplitPanel.setSecondPanel(panel)	ui.SplitPanel	ui.splitpanel|panel	ui.SplitPanel|ui.Panel	
ui.SplitPanel.setWipe	Enables or disables the wiping effect.	SplitPanel.setWipe(wipe)	ui.SplitPanel	ui.splitpanel|wipe	ui.SplitPanel|Boolean	
ui.SplitPanel.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	SplitPanel.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.SplitPanel.unlisten	Deletes callbacks.	SplitPanel.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.Textbox	A textbox that enables the user to input text information.	ui.Textbox(placeholder, value, onChange, disabled, style)	ui.Textbox	placeholder|value|onChange|disabled|style	String, optional|String, optional|Function, optional|Boolean, optional|Object, optional	
ui.Textbox.getDisabled	Returns whether the textbox is disabled.	Textbox.getDisabled()	Boolean	ui.textbox	ui.Textbox	
ui.Textbox.getPlaceholder	Returns the textbox's placeholder text.	Textbox.getPlaceholder()	String	ui.textbox	ui.Textbox	
ui.Textbox.getValue	Returns the value of the textbox.	Textbox.getValue()	String	ui.textbox	ui.Textbox	
ui.Textbox.onChange	Registers a callback that's called when text in the textbox changes.	Textbox.onChange(callback)	String	ui.textbox|callback	ui.Textbox|Function	
ui.Textbox.setDisabled	Sets whether the textbox is disabled.	Textbox.setDisabled(disabled)	ui.Textbox	ui.textbox|disabled	ui.Textbox|Boolean	
ui.Textbox.setPlaceholder	Sets the textbox's placeholder text, which is shown when no text is entered.	Textbox.setPlaceholder(placeholder)	ui.Textbox	ui.textbox|placeholder	ui.Textbox|String	
ui.Textbox.setValue	Sets the value of the textbox.	Textbox.setValue(value, trigger)	ui.Textbox	ui.textbox|value|trigger	ui.Textbox|String|Boolean, optional	
ui.Textbox.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Textbox.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Textbox.unlisten	Deletes callbacks.	Textbox.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.Thumbnail	A fixed-size thumbnail image generated asynchronously from an ee.Image.	ui.Thumbnail(image, params, onClick, style)	ui.Thumbnail	image|params|onClick|style	Image, optional|Object, optional|Function, optional|Object, optional	
ui.Thumbnail.getImage	Returns the ee.Image for the thumbnail.	Thumbnail.getImage()	Image|ImageCollection	ui.thumbnail	ui.Thumbnail	
ui.Thumbnail.getParams	See ee.Image.prototype.getThumbnailURL.	Thumbnail.getParams()	Object	ui.thumbnail	ui.Thumbnail	
ui.Thumbnail.onClick	Registers a callback that's fired when the thumbnail is clicked.	Thumbnail.onClick(callback)	String	ui.thumbnail|callback	ui.Thumbnail|Function	
ui.Thumbnail.setImage	Sets the ee.Image used to generate the thumbnail.	Thumbnail.setImage(image)	ui.Thumbnail	ui.thumbnail|image	ui.Thumbnail|Image	
ui.Thumbnail.setParams	Sets the parameters used to generate the thumbnail.	Thumbnail.setParams(params)	ui.Thumbnail	ui.thumbnail|params| dimensions | region | format | bands | min | max | gain | bias | gamma | palette | opacity | version 	ui.Thumbnail|Object| region  (E,S,W,N or GeoJSON) Geospatial region of the image to render. By default, the whole image.| min  (comma-separated numbers) Value (or one per band) to map onto 00.| bias  (comma-separated numbers) Offset (or one per band) to map onto 00-FF.| opacity  (number) a number between 0 and 1 for opacity.	
ui.Thumbnail.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Thumbnail.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	
ui.Thumbnail.unlisten	Deletes callbacks.	Thumbnail.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	
ui.data.ActiveDictionary	A dictionary-like container for data for use in UI components.	ui.data.ActiveDictionary(object, allowedProperties)	ui.data.ActiveDictionary	object|allowedProperties	Object, optional|List, optional	
ui.data.ActiveDictionary.get	Returns either a clone of this object or, if a key is provided, the value of the property with the passed-in key. Look at the constructor's parameters to see which properties are available.	ActiveDictionary.get(key)	Object	ui.data.activedictionary|key	ui.data.ActiveDictionary|String, optional	
ui.data.ActiveDictionary.set	Sets the value of a given property. Throws an error if the key provided is not supported by the object. Look at the constructor's parameters to see which properties can be set.	ActiveDictionary.set(keyOrDict, value)	ui.data.ActiveDictionary	ui.data.activedictionary|keyOrDict|value	ui.data.ActiveDictionary|Object|String|Object, optional	
ui.data.ActiveList	An array-like container for data for use in UI components.	ui.data.ActiveList(list)	ui.data.ActiveList	list	List, optional	
ui.data.ActiveList.add	Appends an element to the list.	ActiveList.add(el)	ui.data.ActiveList	ui.data.activelist|el	ui.data.ActiveList|Object	
ui.data.ActiveList.forEach	Iterates over each element, calling the provided callback. The callback is called for each element like: callback(element, index).	ActiveList.forEach(callback)		ui.data.activelist|callback	ui.data.ActiveList|Function	
ui.data.ActiveList.get	Returns the element at the specified index.	ActiveList.get(index)	Object	ui.data.activelist|index	ui.data.ActiveList|Number	
ui.data.ActiveList.getJsArray	Returns the list as a JS array.	ActiveList.getJsArray()	List	ui.data.activelist	ui.data.ActiveList	
ui.data.ActiveList.insert	Inserts an element at the specified index and shifts the rest of the list. If the specified index is greater than the length of the list, the element will be appended to the list.	ActiveList.insert(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	
ui.data.ActiveList.length	Returns the number of elements in the list.	ActiveList.length()	Number	ui.data.activelist	ui.data.ActiveList	
ui.data.ActiveList.remove	Removes the specified element from the list.	ActiveList.remove(el)	Object	ui.data.activelist|el	ui.data.ActiveList|Object	
ui.data.ActiveList.reset	Replaces all elements in list with a new list or, if no list is provided, removes all elements from list.	ActiveList.reset(list)	List	ui.data.activelist|list	ui.data.ActiveList|List, optional	
ui.data.ActiveList.set	Sets an element at the specified index. If the index exceeds that of the list's last element, the element will be added to the end of the list.	ActiveList.set(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	
ui.root.add	Adds a widget to the root panel.	ui.root.add(widget)	ui.Panel	widget	ui.Widget	
ui.root.clear	Clears the root panel.	ui.root.clear()				
ui.root.getLayout	UsageReturnsui.root.getLayout()ui.Panel.Layout	ui.root.getLayout()	ui.Panel.Layout			
ui.root.insert	UsageReturnsui.root.insert(index, widget)ui.Panel	ui.root.insert(index, widget)	ui.Panel	index|widget	Number|ui.Widget	
ui.root.onResize	"Registers a callback that's fired when the script starts and whenever the browser window size changes. It will be passed an object with boolean fields ""is_mobile"", ""is_tablet"", ""is_desktop"", ""is_portrait"" and ""is_landscape"", and numeric fields ""width"" and ""height""."	ui.root.onResize(callback)		callback	Function	
ui.root.remove	Removes the given widget from the root panel, if it exists.	ui.root.remove(widget)	Object	widget	ui.Widget	
ui.root.setKeyHandler	Sets a keydown event handler to the root panel with a non-predefined key. The handler is fired only once when a user presses the bound key command. The same key will be bound to the latest handler set to it.	ui.root.setKeyHandler(keyCode, handler, description)		keyCode|handler|description	List|Function|String, optional	
ui.root.setLayout	Sets the ui.root panel's layout.	ui.root.setLayout(layout)	ui.Panel	layout	String|ui.Panel.Layout	
ui.root.widgets	Returns the list of widgets currently in the root panel.	ui.root.widgets()	ui.data.ActiveList			
ui.url.get	UsageReturnsui.url.get(key, default)Boolean|Number|Object|String	ui.url.get(key, default)	Boolean|Number|Object|String	key|default	String|Boolean|Number|String, optional	
ui.url.set	Sets the value of the page's URL fragment. The fragment encodes a dictionary of keys and values. If a dictionary is supplied as the first argument, the key/value pairs in that dictionary will be encoded and replace the current URL fragment. If a key string is provided, then only that key (and its value, the second argument) are updated, and the rest of the URL fragment is unchanged.	ui.url.set(keyOrDict, value)		keyOrDict|value	Dictionary|Boolean|Number|String, optional	
ui.util.clear	Clears all state related to utility functions, including cancelling any active timeouts, intervals, debounces, etc.	ui.util.clear()				
ui.util.clearTimeout	UsageReturnsui.util.clearTimeout(timeoutKey)	ui.util.clearTimeout(timeoutKey)		timeoutKey	Number	
ui.util.debounce	Wraps a function to allow it to be called, at most, once for each sequence of calls fired repeatedly so long as they are fired less than a specified interval apart (in milliseconds). This can be used to reduce the number of invocations of an expensive function while ensuring it eventually runs.	ui.util.debounce(func, delay, scope)	Function	func|delay|scope	Function|Number|Object, optional	
ui.util.getCurrentPosition	Gets the user's current geographic position from the browser's geolocation service.	ui.util.getCurrentPosition(success, error)		success|error	Function|Function, optional	
ui.util.rateLimit	Wraps a function to allow it to be called, at most, once per interval. If the wrapper function is called more than once, only the first call will go through, and no subsequent invocations will have an effect until the interval has elapsed. This can be used to ensure a function that is expensive to run executes immediately but doesn't execute repeatedly.	ui.util.rateLimit(func, delay, scope)	Function	func|delay|scope	Function|Number|Object, optional	
ui.util.setInterval	Repeatedly calls a function with a fixed time delay between each call.	ui.util.setInterval(func, delay)	Number	func|delay	Function|Number	
ui.util.setTimeout	Calls a function after a fixed time delay.	ui.util.setTimeout(func, delay)	Number	func|delay	Function|Number	
ui.util.throttle	Wraps a function to allow it to be called, at most, twice per interval. If the wrapper function is called multiple times before the delay elapses, only the first and the last calls will go through.	ui.util.throttle(func, delay, scope)	Function	func|delay|scope	Function|Number|Object, optional	
